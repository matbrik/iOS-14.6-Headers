/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreML.framework/CoreML
 */

@interface MLNeuralNetworkEngine : MLModel <MLClassifier, MLCompiledModelLoader, MLModelSpecificationLoader, MLNeuralNetwork, MLRegressor> {
    struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, bool, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, bool>>> { 
        struct __tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, bool>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, bool>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, bool>>> { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, bool>, void *>>> { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, bool>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _OutputBlobIsDynamic;
    struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>>> { 
        struct __tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>>> { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, void *>>> { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _batches;
    NSMutableDictionary * _blobNameToLastPtrFlags;
    struct vector<bool, std::__1::allocator<bool>> { 
        unsigned long long *__begin_; 
        unsigned long long __size_; 
        struct __compressed_pair<unsigned long, std::__1::allocator<unsigned long>> { 
            unsigned long long __value_; 
        } __cap_alloc_; 
    }  _bufferAvailable;
    NSObject<OS_dispatch_semaphore> * _bufferSemaphore;
    NSArray * _classLabels;
    NSString * _classScoreVectorName;
    MLNeuralNetworkContainer * _container;
    void * _context;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { 
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { 
            struct __rep { 
                union { 
                    struct __long { 
                        char *__data_; 
                        unsigned long long __size_; 
                        unsigned long long __cap_; 
                    } __l; 
                    struct __short { 
                        BOOL __data_[23]; 
                        struct { 
                            unsigned char __size_; 
                        } ; 
                    } __s; 
                    struct __raw { 
                        unsigned long long __words[3]; 
                    } __r; 
                } ; 
            } __value_; 
        } __r_; 
    }  _currentConfigurationName;
    NSDictionary * _defaultOptionalValues;
    int  _engine;
    NSDictionary * _espressoInputShapes;
    NSDictionary * _espressoInputStrides;
    EspressoProfilingNetworkInfo * _espressoProfileInfo;
    NSObject<OS_dispatch_queue> * _espressoQueue;
    struct set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> { 
        struct __tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void *>>> { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _flexibleShapesConfigNamesInNet;
    bool  _hardwareFallbackDetected;
    bool  _hasBidirectionalLayer;
    bool  _hasOptionalInputSequenceConcat;
    struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>>> { 
        struct __tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>>> { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, void *>>> { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _heights;
    NSDictionary * _imagePreprocessingParameters;
    struct vector<std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>>>, std::__1::allocator<std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>>>>> { 
        struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>>> {} *__begin_; 
        struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>>> {} *__end_; 
        struct __compressed_pair<std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>>> *, std::__1::allocator<std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>>>>> { 
            struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>>> {} *__value_; 
        } __end_cap_; 
    }  _inputBuffers;
    NSArray * _inputLayers;
    bool  _isANEPathForbidden;
    bool  _isEspresoBiasPreprocessingShared;
    bool  _isGPUPathForbidden;
    struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>>> { 
        struct __tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>>> { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, void *>>> { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _ks;
    NSString * _modelFilePath;
    MLVersionInfo * _modelVersionInfo;
    bool  _ndArrayInterpretation;
    struct { 
        void *plan; 
        int network_index; 
    }  _network;
    unsigned long long  _numInputs;
    unsigned long long  _numOutputs;
    struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, MLOptionalNNInputType, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, MLOptionalNNInputType>>> { 
        struct __tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, MLOptionalNNInputType>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, MLOptionalNNInputType>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, MLOptionalNNInputType>>> { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, MLOptionalNNInputType>, void *>>> { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, MLOptionalNNInputType>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _optionalInputTypes;
    struct vector<std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>>>, std::__1::allocator<std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>>>>> { 
        struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>>> {} *__begin_; 
        struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>>> {} *__end_; 
        struct __compressed_pair<std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>>> *, std::__1::allocator<std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>>>>> { 
            struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>>> {} *__value_; 
        } __end_cap_; 
    }  _outputBuffers;
    NSArray * _outputLayers;
    struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_simple_image_preprocessing_params_t, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_simple_image_preprocessing_params_t>>> { 
        struct __tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_simple_image_preprocessing_params_t>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_simple_image_preprocessing_params_t>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_simple_image_preprocessing_params_t>>> { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_simple_image_preprocessing_params_t>, void *>>> { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_simple_image_preprocessing_params_t>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _params;
    void * _plan;
    int  _precision;
    NSObject<OS_dispatch_queue> * _predictionsQueue;
    MLProbabilityDictionary * _probDict;
    int  _qos;
    struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>>> { 
        struct __tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>>> { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, void *>>> { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _ranks;
    struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>>> { 
        struct __tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>>> { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, void *>>> { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _sequences;
    NSObject<OS_dispatch_semaphore> * _submitSemaphore;
    bool  _usingCPU;
    struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>>> { 
        struct __tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>>> { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, void *>>> { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _widths;
}

@property (nonatomic, readonly) NSMutableDictionary *blobNameToLastPtrFlags;
@property (retain) NSObject<OS_dispatch_semaphore> *bufferSemaphore;
@property (nonatomic, retain) NSArray *classLabels;
@property (nonatomic, retain) NSString *classScoreVectorName;
@property (nonatomic) MLNeuralNetworkContainer *container;
@property (nonatomic) void*context;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) NSDictionary *defaultOptionalValues;
@property (readonly, copy) NSString *description;
@property (nonatomic) int engine;
@property (nonatomic, retain) NSDictionary *espressoInputShapes;
@property (nonatomic, retain) NSDictionary *espressoInputStrides;
@property (nonatomic, retain) EspressoProfilingNetworkInfo *espressoProfileInfo;
@property (retain) NSObject<OS_dispatch_queue> *espressoQueue;
@property (nonatomic) bool hardwareFallbackDetected;
@property (nonatomic) bool hasBidirectionalLayer;
@property (nonatomic) bool hasOptionalInputSequenceConcat;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSDictionary *imagePreprocessingParameters;
@property (nonatomic, readonly, retain) NSArray *inputLayers;
@property (readonly) MLModelInterface *interface;
@property bool isANEPathForbidden;
@property (nonatomic) bool isEspresoBiasPreprocessingShared;
@property bool isGPUPathForbidden;
@property (readonly) MLModelMetadata *metadata;
@property (nonatomic, retain) MLModelDescription *modelDescription;
@property (nonatomic, retain) NSString *modelFilePath;
@property (nonatomic, readonly) MLVersionInfo *modelVersionInfo;
@property (nonatomic) bool ndArrayInterpretation;
@property (nonatomic) struct { void *x1; int x2; } network;
@property (nonatomic, readonly) unsigned long long numInputs;
@property (nonatomic, readonly) unsigned long long numOutputs;
@property (nonatomic, readonly, retain) NSArray *outputLayers;
@property (nonatomic) void*plan;
@property (nonatomic) int precision;
@property (retain) NSObject<OS_dispatch_queue> *predictionsQueue;
@property (nonatomic, retain) MLProbabilityDictionary *probDict;
@property (nonatomic) int qos;
@property (retain) NSObject<OS_dispatch_semaphore> *submitSemaphore;
@property (readonly) Class superclass;
@property (nonatomic) bool usingCPU;

+ (Class)containerClass;
+ (id)loadModelFromCompiledArchive:(struct _MLModelInputArchiver { struct IArchive { struct shared_ptr<Archiver::_IArchiveImpl> { struct _IArchiveImpl {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_1_1_1; struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, IArchive, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, IArchive>>> { struct __tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, IArchive>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, IArchive>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, IArchive>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, IArchive>, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, IArchive>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> { unsigned long long x_3_4_1; } x_1_3_3; } x_2_2_1; } x_1_1_2; } x1; }*)arg1 modelVersionInfo:(id)arg2 compilerVersionInfo:(id)arg3 configuration:(id)arg4 error:(id*)arg5;
+ (id)loadModelFromSpecification:(struct _MLModelSpecification { struct shared_ptr<CoreML::Specification::Model> { struct Model {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; }*)arg1 configuration:(id)arg2 error:(id*)arg3;
+ (id)neuralNetworkFromContainer:(id)arg1 classScoreVectorName:(id)arg2 classLabels:(id)arg3 error:(id*)arg4;
+ (id)neuralNetworkFromContainer:(id)arg1 configuration:(id)arg2 error:(id*)arg3;
+ (id)neuralNetworkFromContainer:(id)arg1 error:(id*)arg2;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_deallocContextAndPlan;
- (int)_espressoDeviceForConfiguration:(id)arg1 error:(id*)arg2;
- (bool)_espressoOutputShapeForFeatureName:(id)arg1 matchesShapeOfMLMultiArray:(id)arg2;
- (bool)_matchEngineToOptions:(id)arg1 error:(id*)arg2;
- (struct __CVBuffer { }*)_pixelBufferFromEbuf:(struct { void *x1; void *x2; unsigned long long x3[4]; unsigned long long x4[4]; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; int x15; }*)arg1 description:(id)arg2 error:(id*)arg3;
- (bool)_setMultiArrayOutputBacking:(id)arg1 forOutputFeatureName:(id)arg2 toEbuf:(struct { void *x1; void *x2; unsigned long long x3[4]; unsigned long long x4[4]; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; int x15; }*)arg3 error:(id*)arg4;
- (bool)_setupContextAndPlanWithConfiguration:(id)arg1 error:(id*)arg2;
- (bool)_setupContextAndPlanWithConfiguration:(id)arg1 usingCPU:(bool)arg2 error:(id*)arg3;
- (bool)_setupContextAndPlanWithForceCPU:(bool)arg1 error:(id*)arg2;
- (id)addClassifierInformationToOutput:(id)arg1 options:(id)arg2 error:(id*)arg3;
- (id)availableOutputBlobList;
- (bool)bindDynamicOutputBuffers:(const struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>>> { struct __tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)arg1 error:(id*)arg2;
- (bool)bindInputFeatures:(id)arg1 bufferIndex:(unsigned long long)arg2 allocatedImageData:(struct vector<std::__1::shared_ptr<unsigned char>, std::__1::allocator<std::__1::shared_ptr<unsigned char>>> { struct shared_ptr<unsigned char> {} *x1; struct shared_ptr<unsigned char> {} *x2; struct __compressed_pair<std::__1::shared_ptr<unsigned char> *, std::__1::allocator<std::__1::shared_ptr<unsigned char>>> { struct shared_ptr<unsigned char> {} *x_3_1_1; } x3; }*)arg3 error:(id*)arg4;
- (bool)bindInputsAndOutputs:(id)arg1 allocatedImageData:(struct vector<std::__1::shared_ptr<unsigned char>, std::__1::allocator<std::__1::shared_ptr<unsigned char>>> { struct shared_ptr<unsigned char> {} *x1; struct shared_ptr<unsigned char> {} *x2; struct __compressed_pair<std::__1::shared_ptr<unsigned char> *, std::__1::allocator<std::__1::shared_ptr<unsigned char>>> { struct shared_ptr<unsigned char> {} *x_3_1_1; } x3; }*)arg2 bufferIndex:(unsigned long long)arg3 error:(id*)arg4;
- (bool)bindOutputBuffers:(const struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>>> { struct __tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, espresso_buffer_t *>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)arg1 outputBackings:(id)arg2 automaticOutputBackingMode:(id)arg3 error:(id*)arg4;
- (id)blobNameToLastPtrFlags;
- (id)bufferSemaphore;
- (id)classLabels;
- (id)classScoreVectorName;
- (id)classify:(id)arg1 options:(id)arg2 error:(id*)arg3;
- (void)collectParametersFromContainer:(id)arg1 configuration:(id)arg2;
- (id)completeOutputBackings:(id)arg1 automaticOutputBackingMode:(id)arg2 error:(id*)arg3;
- (id)container;
- (void*)context;
- (id)convertPredictionToClassifierResult:(id)arg1 withOptions:(id)arg2 error:(id*)arg3;
- (bool)copyEbuf:(const struct { void *x1; void *x2; unsigned long long x3[4]; unsigned long long x4[4]; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; int x15; }*)arg1 ofPixelType:(unsigned long long)arg2 toPixelBuffer:(struct __CVBuffer { }*)arg3 error:(id*)arg4;
- (void)dealloc;
- (id)defaultOptionalValues;
- (void)dumpTestVectorsToPath:(id)arg1;
- (int)engine;
- (id)espressoInputShapes;
- (id)espressoInputStrides;
- (id)espressoProfileInfo;
- (id)espressoQueue;
- (id)evaluate:(id)arg1 error:(id*)arg2;
- (id)evaluateBatch:(id)arg1 options:(id)arg2 error:(id*)arg3;
- (id)evaluateInputs:(id)arg1 bufferIndex:(unsigned long long)arg2 options:(id)arg3 error:(id*)arg4;
- (id)evaluateInputs:(id)arg1 options:(id)arg2 error:(id*)arg3;
- (bool)executePlan:(void*)arg1 error:(id*)arg2;
- (id)executionSchedule;
- (bool)fillInInitialShapeFromEspressoNet:(id*)arg1;
- (bool)hardwareFallbackDetected;
- (bool)hasBidirectionalLayer;
- (bool)hasOptionalInputSequenceConcat;
- (id)imageFeatureValueFromEbuf:(struct { void *x1; void *x2; unsigned long long x3[4]; unsigned long long x4[4]; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; int x15; }*)arg1 backingCVPixelBuffer:(struct __CVBuffer { }*)arg2 description:(id)arg3 error:(id*)arg4;
- (id)imagePreprocessingParameters;
- (id)initWithContainer:(id)arg1 configuration:(id)arg2 error:(id*)arg3;
- (id)initWithContainer:(id)arg1 error:(id*)arg2;
- (id)inputLayers;
- (bool)isANEPathForbidden;
- (bool)isEspresoBiasPreprocessingShared;
- (bool)isGPUPathForbidden;
- (id)modelFilePath;
- (id)modelVersionInfo;
- (id)multiArrayFeatureValueFromEbuf:(struct { void *x1; void *x2; unsigned long long x3[4]; unsigned long long x4[4]; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; int x15; }*)arg1 backingMultiArray:(id)arg2 description:(id)arg3 outputName:(id)arg4 error:(id*)arg5;
- (bool)ndArrayInterpretation;
- (struct { void *x1; int x2; })network;
- (unsigned long long)numInputs;
- (unsigned long long)numOutputs;
- (unsigned long long)obtainBuffer;
- (id)outputLayers;
- (id)parameterValueForKey:(id)arg1 error:(id*)arg2;
- (void*)plan;
- (void)populateMultiArrayShape:(id*)arg1 strides:(id*)arg2 forEbuf:(struct { void *x1; void *x2; unsigned long long x3[4]; unsigned long long x4[4]; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; int x15; }*)arg3 featureDescription:(id)arg4 ndArrayInterpretation:(bool)arg5;
- (id)populateOutputs:(unsigned long long)arg1 outputBackings:(id)arg2 error:(id*)arg3;
- (int)precision;
- (id)predictionFromFeatures:(id)arg1 options:(id)arg2 error:(id*)arg3;
- (id)predictionsFromBatch:(id)arg1 options:(id)arg2 error:(id*)arg3;
- (id)predictionsQueue;
- (id)probDict;
- (int)qos;
- (bool)rebuildPlan:(id*)arg1;
- (id)regress:(id)arg1 options:(id)arg2 error:(id*)arg3;
- (void)releaseBuffer:(unsigned long long)arg1;
- (bool)resetSizes:(id)arg1 error:(id*)arg2;
- (bool)resetSizesNoAutoRelease:(id)arg1 error:(id*)arg2;
- (bool)resetSizesWithEspressoConfigurations:(id)arg1 error:(id*)arg2;
- (bool)sequenceConcatConsumesOptionalInputNamed:(id)arg1;
- (int)sequenceNamed:(id)arg1;
- (void)setBufferSemaphore:(id)arg1;
- (void)setClassLabels:(id)arg1;
- (void)setClassScoreVectorName:(id)arg1;
- (void)setContainer:(id)arg1;
- (void)setContext:(void*)arg1;
- (void)setDefaultOptionalValues:(id)arg1;
- (void)setEngine:(int)arg1;
- (void)setEspressoInputShapes:(id)arg1;
- (void)setEspressoInputStrides:(id)arg1;
- (void)setEspressoProfileInfo:(id)arg1;
- (void)setEspressoQueue:(id)arg1;
- (void)setHardwareFallbackDetected:(bool)arg1;
- (void)setHasBidirectionalLayer:(bool)arg1;
- (void)setHasOptionalInputSequenceConcat:(bool)arg1;
- (void)setImagePreprocessingParameters:(id)arg1;
- (void)setIsANEPathForbidden:(bool)arg1;
- (void)setIsEspresoBiasPreprocessingShared:(bool)arg1;
- (void)setIsGPUPathForbidden:(bool)arg1;
- (void)setModelFilePath:(id)arg1;
- (void)setNdArrayInterpretation:(bool)arg1;
- (void)setNetwork:(struct { void *x1; int x2; })arg1;
- (void)setPlan:(void*)arg1;
- (void)setPrecision:(int)arg1;
- (void)setPredictionsQueue:(id)arg1;
- (void)setProbDict:(id)arg1;
- (void)setQos:(int)arg1;
- (void)setSubmitSemaphore:(id)arg1;
- (void)setUsingCPU:(bool)arg1;
- (id)sortBatchByShape:(id)arg1 withMap:(id*)arg2 error:(id*)arg3;
- (id)submitSemaphore;
- (bool)tryToSetOutputBacking:(id)arg1 forFeature:(id)arg2 toEbuf:(struct { void *x1; void *x2; unsigned long long x3[4]; unsigned long long x4[4]; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; int x15; }*)arg3 reportPointerFlags:(int*)arg4 error:(id*)arg5;
- (bool)unlockCVPixelBuffers:(id)arg1 error:(id*)arg2;
- (bool)updateDynamicOutputBlobIndicatorCacheAndReturnError:(id*)arg1;
- (bool)usingCPU;
- (bool)usingEspressoConfigurations;
- (id)verifyInputs:(id)arg1 error:(id*)arg2;

@end
