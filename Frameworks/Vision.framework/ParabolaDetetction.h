/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Vision.framework/Vision
 */

@interface ParabolaDetetction : NSObject {
    int  UID_counter;
    struct ForestAlgoParams { 
        float FAFrameRate; 
        int parabolaLength; 
        int minXDistanceFromLastPointOnParabola; 
        int maxXDistanceFromLastPointOnParabola; 
        int minYDistanceFromLastPointOnParabola; 
        int maxYDistanceFromLastPointOnParabola; 
        int maxFramesSkippedToContinueParabolaDetection; 
        int minObjectSize; 
    }  _forestAlgoParams;
    struct map<int, ObservedParabola, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, ObservedParabola>>> { 
        struct __tree<std::__1::__value_type<int, ObservedParabola>, std::__1::__map_value_compare<int, std::__1::__value_type<int, ObservedParabola>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, ObservedParabola>>> { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, ObservedParabola>, void *>>> { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, ObservedParabola>, std::__1::less<int>, true>> { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _observedParabolas;
    struct map<int, InternalObservedParabola, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, InternalObservedParabola>>> { 
        struct __tree<std::__1::__value_type<int, InternalObservedParabola>, std::__1::__map_value_compare<int, std::__1::__value_type<int, InternalObservedParabola>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, InternalObservedParabola>>> { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, InternalObservedParabola>, void *>>> { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, InternalObservedParabola>, std::__1::less<int>, true>> { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  internalParabolas;
    struct InternalParameters { 
        int minRegionSizeX; 
        int minRegionSizeY; 
        float initialYDiffLimit; 
        float startingMinDiffDeviation; 
        float maxDistanceForSolution; 
        int frameWidth; 
        int frameHeight; 
        float xScaleFactor; 
        float yScaleFactor; 
        int runningMinDiffDeviation; 
        float maxFrameSkipScaleFactor; 
        float majorAxisScaler; 
        float minorAxisScalar; 
        float contourSizeUpperBound; 
        float contourSizeLowerBound; 
        float maxRadiusToCompensate; 
        float maxRadiusBasedDeviation; 
        float xConsistencyDeviation; 
        float rejectionScaler; 
    }  internalParams;
    struct ParabolaSearchBuffer { 
        int maxFramesSkippedForDetection; 
        int minRegionSizeX; 
        int minRegionSizeY; 
        struct deque<std::__1::vector<CGPointWithPts, std::__1::allocator<CGPointWithPts>>, std::__1::allocator<std::__1::vector<CGPointWithPts, std::__1::allocator<CGPointWithPts>>>> { 
            struct __split_buffer<std::__1::vector<CGPointWithPts, std::__1::allocator<CGPointWithPts>> *, std::__1::allocator<std::__1::vector<CGPointWithPts, std::__1::allocator<CGPointWithPts>> *>> { 
                struct vector<CGPointWithPts, std::__1::allocator<CGPointWithPts>> {} **__first_; 
                struct vector<CGPointWithPts, std::__1::allocator<CGPointWithPts>> {} **__begin_; 
                struct vector<CGPointWithPts, std::__1::allocator<CGPointWithPts>> {} **__end_; 
                struct __compressed_pair<std::__1::vector<CGPointWithPts, std::__1::allocator<CGPointWithPts>> **, std::__1::allocator<std::__1::vector<CGPointWithPts, std::__1::allocator<CGPointWithPts>> *>> { 
                    struct vector<CGPointWithPts, std::__1::allocator<CGPointWithPts>> {} **__value_; 
                } __end_cap_; 
            } __map_; 
            unsigned long long __start_; 
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::vector<CGPointWithPts, std::__1::allocator<CGPointWithPts>>>> { 
                unsigned long long __value_; 
            } __size_; 
        } contourPointsQ; 
    }  parabolaSearchBuffer;
}

@property struct ForestAlgoParams { float x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; } forestAlgoParams;
@property /* Warning: unhandled struct encoding: '{map<int' */ struct  observedParabolas; /* unknown property attribute:  true>>=Q}}} */

+ (bool)isMinMaxXYOfParabolaChanging:(struct InternalObservedParabola { id x1; struct vector<CGPointWithPts, std::__1::allocator<CGPointWithPts>> { struct CGPointWithPts {} *x_2_1_1; struct CGPointWithPts {} *x_2_1_2; struct __compressed_pair<CGPointWithPts *, std::__1::allocator<CGPointWithPts>> { struct CGPointWithPts {} *x_3_2_1; } x_2_1_3; } x2; float x3; struct vector<CGPointWithPts, std::__1::allocator<CGPointWithPts>> { struct CGPointWithPts {} *x_4_1_1; struct CGPointWithPts {} *x_4_1_2; struct __compressed_pair<CGPointWithPts *, std::__1::allocator<CGPointWithPts>> { struct CGPointWithPts {} *x_3_2_1; } x_4_1_3; } x4; struct vector<double, std::__1::allocator<double>> { double *x_5_1_1; double *x_5_1_2; struct __compressed_pair<double *, std::__1::allocator<double>> { double *x_3_2_1; } x_5_1_3; } x5; struct vector<double, std::__1::allocator<double>> { double *x_6_1_1; double *x_6_1_2; struct __compressed_pair<double *, std::__1::allocator<double>> { double *x_3_2_1; } x_6_1_3; } x6; float x7; float x8; float x9; float x10; struct CGPoint { double x_11_1_1; double x_11_1_2; } x11; }*)arg1 withPoint:(const struct CGPoint { double x1; double x2; }*)arg2;
+ (bool)updateMinMaxXYOfParabola:(struct InternalObservedParabola { id x1; struct vector<CGPointWithPts, std::__1::allocator<CGPointWithPts>> { struct CGPointWithPts {} *x_2_1_1; struct CGPointWithPts {} *x_2_1_2; struct __compressed_pair<CGPointWithPts *, std::__1::allocator<CGPointWithPts>> { struct CGPointWithPts {} *x_3_2_1; } x_2_1_3; } x2; float x3; struct vector<CGPointWithPts, std::__1::allocator<CGPointWithPts>> { struct CGPointWithPts {} *x_4_1_1; struct CGPointWithPts {} *x_4_1_2; struct __compressed_pair<CGPointWithPts *, std::__1::allocator<CGPointWithPts>> { struct CGPointWithPts {} *x_3_2_1; } x_4_1_3; } x4; struct vector<double, std::__1::allocator<double>> { double *x_5_1_1; double *x_5_1_2; struct __compressed_pair<double *, std::__1::allocator<double>> { double *x_3_2_1; } x_5_1_3; } x5; struct vector<double, std::__1::allocator<double>> { double *x_6_1_1; double *x_6_1_2; struct __compressed_pair<double *, std::__1::allocator<double>> { double *x_3_2_1; } x_6_1_3; } x6; float x7; float x8; float x9; float x10; struct CGPoint { double x_11_1_1; double x_11_1_2; } x11; }*)arg1 withPoint:(const struct CGPoint { double x1; double x2; }*)arg2;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)computeEquationCoefficients:(const struct vector<double, std::__1::allocator<double>> { double *x1; double *x2; struct __compressed_pair<double *, std::__1::allocator<double>> { double *x_3_1_1; } x3; }*)arg1 yValues:(const struct vector<double, std::__1::allocator<double>> { double *x1; double *x2; struct __compressed_pair<double *, std::__1::allocator<double>> { double *x_3_1_1; } x3; }*)arg2;
- (void)computeNormalizedEquationCoefficients:(const struct vector<double, std::__1::allocator<double>> { double *x1; double *x2; struct __compressed_pair<double *, std::__1::allocator<double>> { double *x_3_1_1; } x3; }*)arg1 yValues:(const struct vector<double, std::__1::allocator<double>> { double *x1; double *x2; struct __compressed_pair<double *, std::__1::allocator<double>> { double *x_3_1_1; } x3; }*)arg2;
- (struct ForestAlgoParams { float x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; })forestAlgoParams;
- (float)getRsquareOfEquation:(const struct vector<double, std::__1::allocator<double>> { double *x1; double *x2; struct __compressed_pair<double *, std::__1::allocator<double>> { double *x_3_1_1; } x3; }*)arg1 yValues:(const struct vector<double, std::__1::allocator<double>> { double *x1; double *x2; struct __compressed_pair<double *, std::__1::allocator<double>> { double *x_3_1_1; } x3; }*)arg2 equationConstants:(const /* Warning: Unrecognized filer type: '3' using 'void*' */ void**)arg3;
- (id)init;
- (id)initWithConfig:(id)arg1;
- (void)initialParabolaSearch:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (bool)isInitialCurvePossibleWithI:(struct CGPointWithPts { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; float x3; }*)arg1 j:(struct CGPointWithPts { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; float x3; }*)arg2 k:(struct CGPointWithPts { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; float x3; }*)arg3;
- (bool)isValidRadius:(float)arg1 withPrecedingRadius:(float)arg2;
- (struct map<int, ObservedParabola, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, ObservedParabola>>> { struct __tree<std::__1::__value_type<int, ObservedParabola>, std::__1::__map_value_compare<int, std::__1::__value_type<int, ObservedParabola>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, ObservedParabola>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, ObservedParabola>, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, ObservedParabola>, std::__1::less<int>, true>> { unsigned long long x_3_2_1; } x_1_1_3; } x1; })observedParabolas;
- (const struct map<int, ObservedParabola, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, ObservedParabola>>> { struct __tree<std::__1::__value_type<int, ObservedParabola>, std::__1::__map_value_compare<int, std::__1::__value_type<int, ObservedParabola>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, ObservedParabola>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, ObservedParabola>, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, ObservedParabola>, std::__1::less<int>, true>> { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)parabolaExtensionWithInputContours:(const struct vector<CGPointWithRadius, std::__1::allocator<CGPointWithRadius>> { struct CGPointWithRadius {} *x1; struct CGPointWithRadius {} *x2; struct __compressed_pair<CGPointWithRadius *, std::__1::allocator<CGPointWithRadius>> { struct CGPointWithRadius {} *x_3_1_1; } x3; }*)arg1 withPTS:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
- (const struct map<int, ObservedParabola, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, ObservedParabola>>> { struct __tree<std::__1::__value_type<int, ObservedParabola>, std::__1::__map_value_compare<int, std::__1::__value_type<int, ObservedParabola>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, ObservedParabola>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, ObservedParabola>, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, ObservedParabola>, std::__1::less<int>, true>> { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)processContoursForParabolas:(struct vector<CGPointWithRadius, std::__1::allocator<CGPointWithRadius>> { struct CGPointWithRadius {} *x1; struct CGPointWithRadius {} *x2; struct __compressed_pair<CGPointWithRadius *, std::__1::allocator<CGPointWithRadius>> { struct CGPointWithRadius {} *x_3_1_1; } x3; }*)arg1 withPTS:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 objectMinimumPixelSize:(unsigned long long)arg3 bufferWidth:(unsigned long long)arg4 bufferHeight:(unsigned long long)arg5;
- (void)purgeCaches;
- (void)setForestAlgoParams:(struct ForestAlgoParams { float x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; })arg1;
- (void)setObservedParabolas:(struct map<int, ObservedParabola, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, ObservedParabola>>> { struct __tree<std::__1::__value_type<int, ObservedParabola>, std::__1::__map_value_compare<int, std::__1::__value_type<int, ObservedParabola>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, ObservedParabola>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, ObservedParabola>, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, ObservedParabola>, std::__1::less<int>, true>> { unsigned long long x_3_2_1; } x_1_1_3; } x1; })arg1;
- (void)updateForestParamsWithBufferWidth:(int)arg1 bufferHeight:(int)arg2;
- (void)updateInternalParamswithXfactor:(float)arg1 yFactor:(float)arg2;

@end
