/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TextInput.framework/TextInput
 */

@interface TIZephyrCandidate : TIKeyboardCandidateSingle {
    unsigned long long  _ageForConnectionsMetrics;
    int  _confidence;
    bool  _continuousPathConversion;
    int  _dynamicPenaltyCount;
    int  _dynamicUsageCount;
    double  _excessPathRatio;
    NSString * _fromBundleId;
    double  _geometryScore;
    bool  _isFromPhraseDictionary;
    bool  _isFromTextChecker;
    bool  _isSecureContentCandidate;
    NSString * _label;
    NSString * _lexiconLocale;
    _ICPredictedItem * _proactivePredictedItem;
    TIProactiveTrigger * _proactiveTrigger;
    NSString * _responseKitCategory;
    bool  _shouldAccept;
    bool  _shouldInsertSpaceAfterSelection;
    unsigned int  _sourceMask;
    unsigned int  _usageTrackingMask;
    unsigned long long  _wordOriginFeedbackID;
    double  _wordScore;
}

@property (nonatomic) unsigned long long ageForConnectionsMetrics;
@property (getter=confidence, nonatomic) int confidence;
@property (getter=isContinuousPathConversion, nonatomic) bool continuousPathConversion;
@property (nonatomic) int dynamicPenaltyCount;
@property (nonatomic) int dynamicUsageCount;
@property (nonatomic) double excessPathRatio;
@property (nonatomic, copy) NSString *fromBundleId;
@property (nonatomic) double geometryScore;
@property (nonatomic) bool isFromPhraseDictionary;
@property (nonatomic) bool isFromTextChecker;
@property (nonatomic, copy) NSString *label;
@property (nonatomic) NSString *lexiconLocale;
@property (nonatomic, copy) _ICPredictedItem *proactivePredictedItem;
@property (getter=shouldAccept, nonatomic) bool shouldAccept;
@property (getter=shouldInsertSpaceAfterSelection, nonatomic) bool shouldInsertSpaceAfterSelection;
@property (nonatomic) double wordScore;

+ (bool)supportsSecureCoding;
+ (int)type;

- (void).cxx_destruct;
- (unsigned long long)ageForConnectionsMetrics;
- (id)candidateByReplacingWithCandidate:(id)arg1 input:(id)arg2 label:(id)arg3;
- (int)confidence;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (int)dynamicPenaltyCount;
- (int)dynamicUsageCount;
- (void)encodeWithCandidateResultSetCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (double)excessPathRatio;
- (id)fromBundleId;
- (double)geometryScore;
- (id)initWithCandidate:(id)arg1 forInput:(id)arg2 wordOriginFeedbackID:(unsigned long long)arg3;
- (id)initWithCandidate:(id)arg1 forInput:(id)arg2 wordOriginFeedbackID:(unsigned long long)arg3 usageTrackingMask:(unsigned int)arg4 sourceMask:(unsigned int)arg5;
- (id)initWithCandidate:(id)arg1 forInput:(id)arg2 wordOriginFeedbackID:(unsigned long long)arg3 usageTrackingMask:(unsigned int)arg4 sourceMask:(unsigned int)arg5 secureContentCandidate:(bool)arg6 proactiveTrigger:(id)arg7 proactivePredictedItem:(id)arg8;
- (id)initWithCandidate:(id)arg1 forInput:(id)arg2 wordOriginFeedbackID:(unsigned long long)arg3 usageTrackingMask:(unsigned int)arg4 sourceMask:(unsigned int)arg5 secureContentCandidate:(bool)arg6 proactiveTrigger:(id)arg7 proactivePredictedItem:(id)arg8 responseKitCategory:(id)arg9;
- (id)initWithCandidate:(id)arg1 responseKitCategory:(id)arg2;
- (id)initWithCandidateResultSetCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (bool)isAutocorrection;
- (bool)isContinuousPathConversion;
- (bool)isFromPhraseDictionary;
- (bool)isFromTextChecker;
- (bool)isSecureContentCandidate;
- (id)label;
- (id)lexiconLocale;
- (id)proactivePredictedItem;
- (id)proactiveTrigger;
- (id)responseKitCategory;
- (void)setAgeForConnectionsMetrics:(unsigned long long)arg1;
- (void)setConfidence:(int)arg1;
- (void)setContinuousPathConversion:(bool)arg1;
- (void)setDynamicPenaltyCount:(int)arg1;
- (void)setDynamicUsageCount:(int)arg1;
- (void)setExcessPathRatio:(double)arg1;
- (void)setFromBundleId:(id)arg1;
- (void)setGeometryScore:(double)arg1;
- (void)setIsFromPhraseDictionary:(bool)arg1;
- (void)setIsFromTextChecker:(bool)arg1;
- (void)setLabel:(id)arg1;
- (void)setLexiconLocale:(id)arg1;
- (void)setProactivePredictedItem:(id)arg1;
- (void)setShouldAccept:(bool)arg1;
- (void)setShouldInsertSpaceAfterSelection:(bool)arg1;
- (void)setWordScore:(double)arg1;
- (bool)shouldAccept;
- (bool)shouldInsertSpaceAfterSelection;
- (unsigned int)sourceMask;
- (unsigned int)usageTrackingMask;
- (unsigned long long)wordOriginFeedbackID;
- (double)wordScore;

@end
