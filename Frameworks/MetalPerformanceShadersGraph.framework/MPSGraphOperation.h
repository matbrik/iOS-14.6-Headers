/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MetalPerformanceShadersGraph.framework/MetalPerformanceShadersGraph
 */

@interface MPSGraphOperation : NSObject <NSCopying> {
    NSMutableArray * _controlDependencies;
    MPSGraph * _graph;
    NSArray * _inputTensors;
    NSString * _name;
    NSArray * _outputTensors;
    bool  _stopGradient;
}

@property (nonatomic, readonly) NSArray *controlDependencies;
@property (nonatomic, readonly) MPSGraph *graph;
@property (nonatomic, readonly) NSArray *inputTensors;
@property (nonatomic, readonly) NSString *name;
@property (nonatomic, readonly) NSArray *outputTensors;
@property (nonatomic) bool stopGradient;

- (void).cxx_destruct;
- (id)controlDependencies;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)graph;
- (id)init;
- (id)initInternal;
- (id)initWithGraph:(id)arg1 inputTensors:(id)arg2 controlDependencies:(id)arg3 name:(id)arg4;
- (id)inputTensors;
- (struct Value { struct PointerIntPair<void *, 2, mlir::Value::Kind, mlir::Value::ImplTypeTraits, llvm::PointerIntPairInfo<void *, 2, mlir::Value::ImplTypeTraits>> { long long x_1_1_1; } x1; })makeMLIROpWithBuilder:(struct OpBuilder { struct MLIRContext {} *x1; struct Block {} *x2; struct ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation, false, false, void>, false, false> { struct ilist_node_impl<llvm::ilist_detail::node_options<mlir::Operation, false, false, void>> {} *x_3_1_1; } x3; struct Listener {} *x4; }*)arg1 symbolTable:(struct MPSSymbolTable { struct StringMap<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, llvm::MallocAllocator> { struct StringMapEntryBase {} **x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; struct MallocAllocator { } x_1_1_6; } x1; }*)arg2 inputValues:(struct vector<mlir::Value, std::__1::allocator<mlir::Value>> { struct Value {} *x1; struct Value {} *x2; struct __compressed_pair<mlir::Value *, std::__1::allocator<mlir::Value>> { struct Value {} *x_3_1_1; } x3; }*)arg3 opInitialization:(bool)arg4 name:(id)arg5;
- (id)name;
- (id)outputTensors;
- (id)partialDerivativeForInputTensor:(id)arg1 incomingGradient:(id)arg2 inputIndex:(unsigned long long)arg3 name:(id)arg4;
- (void)setStopGradient:(bool)arg1;
- (bool)stopGradient;

@end
