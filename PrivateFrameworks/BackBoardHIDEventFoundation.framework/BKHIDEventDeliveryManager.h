/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/BackBoardHIDEventFoundation.framework/BackBoardHIDEventFoundation
 */

@interface BKHIDEventDeliveryManager : NSObject <BKHIDEventClientDelegate> {
    BKSHIDEventAuthenticationKeyRing * _authenticationKeyRing;
    BKSHIDEventAuthenticationOriginator * _authenticationOriginator;
    BSMutableIntegerMap * _clientsByPID;
    NSSet * _deferringResolutions;
    BSMutableIntegerMap * _deferringRulesByPID;
    NSMutableArray * _deliveryRoots;
    NSMutableDictionary * _destinationCacheBySender;
    NSMutableArray * _keyCommandDeliveryRoots;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    BKSHIDEventDisplay * _mainDisplay;
    bool  _observeClientDeath;
    <BKHIDEventDeliveryResolutionObserver> * _resolutionObserver;
}

@property (nonatomic, readonly) BKSHIDEventAuthenticationKeyRing *authenticationKeyRing;
@property (nonatomic, readonly) BKSHIDEventAuthenticationOriginator *authenticationOriginator;
@property (nonatomic, retain) BSMutableIntegerMap *clientsByPID;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) NSSet *deferringResolutions;
@property (nonatomic, retain) BSMutableIntegerMap *deferringRulesByPID;
@property (nonatomic, retain) NSMutableArray *deliveryRoots;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSMutableDictionary *destinationCacheBySender;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSMutableArray *keyCommandDeliveryRoots;
@property (nonatomic, retain) BKSHIDEventDisplay *mainDisplay;
@property (nonatomic) bool observeClientDeath;
@property (nonatomic, retain) <BKHIDEventDeliveryResolutionObserver> *resolutionObserver;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)_destinationFromTarget:(id)arg1 display:(id)arg2 environment:(id)arg3;
- (id)_lock_allRootResolutions;
- (id)_lock_bundleIdentifierForPID:(int)arg1;
- (id)_lock_canonicalDisplayForEventSender:(id)arg1;
- (id)_lock_clientWithPID:(int)arg1 createIfNeeded:(bool)arg2;
- (id)_lock_destinationsForKeyCommand:(id)arg1 sender:(id)arg2;
- (id)_lock_dispatchingRuleInDeliveryRoot:(id)arg1 matchingDescriptor:(id)arg2 sender:(id)arg3;
- (void)_lock_notifyObserversOfResolutionUpdates:(id /* block */)arg1;
- (id)_lock_resolveDeferringChainForPID:(int)arg1 display:(id)arg2 environment:(id)arg3 targetOrder:(out id*)arg4;
- (id)_lock_selectNextDeferringRuleForPID:(int)arg1 display:(id)arg2 environment:(id)arg3 token:(id)arg4 incomplete:(bool*)arg5 ignoreRulesWithTargets:(id)arg6;
- (void)_lock_setDeferringRules:(id)arg1 forClientWithPID:(int)arg2;
- (void)_lock_setDispatchingRuleSets:(id)arg1 forClientWithPID:(int)arg2;
- (void)_lock_setKeyCommandDispatchingRules:(id)arg1 forClientWithPID:(int)arg2;
- (void)_lock_setKeyCommandsRegistrations:(id)arg1 forClientWithPID:(int)arg2;
- (long long)_registration:(id)arg1 containsMatchForKeyCommand:(id)arg2;
- (id)authenticationKeyRing;
- (id)authenticationOriginator;
- (void)clientDied:(id)arg1;
- (id)clientsByPID;
- (void)dealloc;
- (id)deferringResolutions;
- (id)deferringRulesByPID;
- (id)deliveryRoots;
- (id)destinationCacheBySender;
- (id)destinationsForEvent:(struct __IOHIDEvent { }*)arg1 sender:(id)arg2;
- (id)destinationsForKeyCommand:(id)arg1 sender:(id)arg2;
- (id)destinationsStartingFromPID:(int)arg1 deferringPredicate:(id)arg2;
- (id)init;
- (id)initWithObserverService:(id)arg1;
- (id)keyCommandDeliveryRoots;
- (id)mainDisplay;
- (bool)observeClientDeath;
- (id)resolutionObserver;
- (void)setClientsByPID:(id)arg1;
- (void)setDeferringResolutions:(id)arg1;
- (void)setDeferringRules:(id)arg1 forClientWithPID:(int)arg2;
- (void)setDeferringRulesByPID:(id)arg1;
- (void)setDeliveryRoots:(id)arg1;
- (void)setDestinationCacheBySender:(id)arg1;
- (void)setDispatchingRuleSets:(id)arg1 forClientWithPID:(int)arg2;
- (void)setKeyCommandDeliveryRoots:(id)arg1;
- (void)setKeyCommandDispatchingRules:(id)arg1 forClientWithPID:(int)arg2;
- (void)setKeyCommandsRegistrations:(id)arg1 forClientWithPID:(int)arg2;
- (void)setMainDisplay:(id)arg1;
- (void)setObserveClientDeath:(bool)arg1;
- (void)setResolutionObserver:(id)arg1;

@end
