/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
 */

@interface CHLexiconCorrectionStep : CHPostprocessingStep {
    int  _autoCapitalizationMode;
    NSCharacterSet * _consumableStrokesCharSet;
    const struct _LXLexicon { } * _customLexicon;
    const struct _LXLexicon { } * _customPhraseLexicon;
    NSCharacterSet * _fullWidthPunctuationThatExpectsUppercaseAfter;
    NSLocale * _locale;
    const struct _LXLexicon { } * _phraseLexicon;
    NSCharacterSet * _punctuationThatExpectsUppercaseAfter;
    CHRecognizer * _recognizer;
    bool  _shouldAutoCapitalize;
    bool  _shouldAutoCorrect;
    const struct _LXLexicon { } * _staticLexicon;
    NSDictionary * _textReplacements;
}

@property (nonatomic, readonly) int autoCapitalizationMode;
@property (nonatomic, retain) NSCharacterSet *consumableStrokesCharSet;
@property (nonatomic) const struct _LXLexicon { }*customLexicon;
@property (nonatomic) const struct _LXLexicon { }*customPhraseLexicon;
@property (nonatomic, retain) NSCharacterSet *fullWidthPunctuationThatExpectsUppercaseAfter;
@property (nonatomic) NSLocale *locale;
@property (nonatomic) const struct _LXLexicon { }*phraseLexicon;
@property (nonatomic, retain) NSCharacterSet *punctuationThatExpectsUppercaseAfter;
@property (nonatomic) CHRecognizer *recognizer;
@property (nonatomic) bool shouldAutoCapitalize;
@property (nonatomic) bool shouldAutoCorrect;
@property (nonatomic) const struct _LXLexicon { }*staticLexicon;
@property (nonatomic, retain) NSDictionary *textReplacements;

- (id)applyLexiconCorrectionOnToken:(id)arg1 hasEmptyContext:(bool)arg2 history:(id)arg3 historyEndsAlphabetic:(bool)arg4 historyEndsWithLineBreak:(bool)arg5 prevToken:(id)arg6 shouldCapitalizeGivenHistory:(bool)arg7 tokenIndex:(long long)arg8 textReplacements:(id)arg9 isSingleIsolatedCharacter:(bool)arg10 contextBeforeToken:(id)arg11;
- (id)applyLexiconCorrections:(id)arg1 shouldCapitalizeWord:(bool)arg2 shouldSkipEntryCorrection:(bool)arg3 outBestTokenIndex:(long long*)arg4 bestLexiconTokenScore:(double*)arg5 textReplacements:(id)arg6 contextBeforeToken:(id)arg7;
- (int)autoCapitalizationMode;
- (id)consumableStrokesCharSet;
- (const struct _LXLexicon { }*)customLexicon;
- (const struct _LXLexicon { }*)customPhraseLexicon;
- (void)dealloc;
- (id)fullWidthPunctuationThatExpectsUppercaseAfter;
- (id)getSpellCorrectedToken:(id)arg1 contextBeforeToken:(id)arg2;
- (id)initWithAutoCapitalizationMode:(int)arg1 shouldAutoCorrect:(bool)arg2 locale:(id)arg3 staticLexicon:(struct _LXLexicon { }*)arg4 customLexicon:(struct _LXLexicon { }*)arg5 phraseLexicon:(struct _LXLexicon { }*)arg6 customPhraseLexicon:(struct _LXLexicon { }*)arg7 recognizer:(id)arg8 textReplacements:(id)arg9;
- (id)locale;
- (const struct _LXLexicon { }*)phraseLexicon;
- (id)process:(id)arg1;
- (id)punctuationThatExpectsUppercaseAfter;
- (id)recognizer;
- (void)setConsumableStrokesCharSet:(id)arg1;
- (void)setCustomLexicon:(const struct _LXLexicon { }*)arg1;
- (void)setCustomPhraseLexicon:(const struct _LXLexicon { }*)arg1;
- (void)setFullWidthPunctuationThatExpectsUppercaseAfter:(id)arg1;
- (void)setLocale:(id)arg1;
- (void)setPhraseLexicon:(const struct _LXLexicon { }*)arg1;
- (void)setPunctuationThatExpectsUppercaseAfter:(id)arg1;
- (void)setRecognizer:(id)arg1;
- (void)setShouldAutoCapitalize:(bool)arg1;
- (void)setShouldAutoCorrect:(bool)arg1;
- (void)setStaticLexicon:(const struct _LXLexicon { }*)arg1;
- (void)setTextReplacements:(id)arg1;
- (bool)shouldAutoCapitalize;
- (bool)shouldAutoCorrect;
- (const struct _LXLexicon { }*)staticLexicon;
- (id)textReplacements;

@end
