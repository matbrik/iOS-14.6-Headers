/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/EmbeddedAcousticRecognition.framework/EmbeddedAcousticRecognition
 */

@interface _EARSpeechRecognitionActiveConfiguration : NSObject <NSCopying> {
    NSSet * _bluetoothDeviceIdFilter;
    NSSet * _deviceIdFilter;
    NSSet * _farFieldFilter;
    NSSet * _samplingRateFilter;
    NSSet * _taskTypeFilter;
}

@property (nonatomic, copy) NSSet *bluetoothDeviceIdFilter;
@property (nonatomic, copy) NSSet *deviceIdFilter;
@property (nonatomic, copy) NSSet *farFieldFilter;
@property (nonatomic, copy) NSSet *samplingRateFilter;
@property (nonatomic, copy) NSSet *taskTypeFilter;

+ (id)activeConfigurationForEverything;
+ (id)activeConfigurationForNothing;

- (void).cxx_destruct;
- (id)_initWithActiveConfiguration:(const struct SpeechRecognizerActiveConfiguration { struct optional<std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int>>> { union { BOOL x_1_2_1; struct set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int>> { struct __tree<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_4_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned int, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_6_1; } x_2_5_1; } x_1_4_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned int>> { unsigned long long x_3_5_1; } x_1_4_3; } x_2_3_1; } x_1_2_2; } x_1_1_1; bool x_1_1_2; } x1; struct optional<std::__1::set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>> { union { BOOL x_1_2_1; struct set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> { struct __tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_4_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_6_1; } x_2_5_1; } x_1_4_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> { unsigned long long x_3_5_1; } x_1_4_3; } x_2_3_1; } x_1_2_2; } x_2_1_1; } x2; }*)arg1;
- (id)bluetoothDeviceIdFilter;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)deviceIdFilter;
- (id)farFieldFilter;
- (id)samplingRateFilter;
- (void)setBluetoothDeviceIdFilter:(id)arg1;
- (void)setDeviceIdFilter:(id)arg1;
- (void)setFarFieldFilter:(id)arg1;
- (void)setSamplingRateFilter:(id)arg1;
- (void)setTaskTypeFilter:(id)arg1;
- (struct SpeechRecognizerActiveConfiguration { struct optional<std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int>>> { union { BOOL x_1_2_1; struct set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int>> { struct __tree<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_4_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned int, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_6_1; } x_2_5_1; } x_1_4_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned int>> { unsigned long long x_3_5_1; } x_1_4_3; } x_2_3_1; } x_1_2_2; } x_1_1_1; bool x_1_1_2; } x1; struct optional<std::__1::set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>> { union { BOOL x_1_2_1; struct set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> { struct __tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_4_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_6_1; } x_2_5_1; } x_1_4_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> { unsigned long long x_3_5_1; } x_1_4_3; } x_2_3_1; } x_1_2_2; } x_2_1_1; } x2; })speechRecognizerActiveConfiguration;
- (id)taskTypeFilter;

@end
