/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Pegasus.framework/Pegasus
 */

@interface PGPictureInPictureRemoteObject : NSObject <PGPictureInPictureRemoteObjectInterface, PGPictureInPictureViewControllerDelegate> {
    <PGPictureInPictureAnalyticsDelegate> * _analyticsDelegate;
    NSUUID * _analyticsSourceUUID;
    BKSProcessAssertion * _cancelPictureInPictureFinishTaskAssertion;
    NSXPCConnection * _connection;
    long long  _controlsStyle;
    long long  _currentState;
    <PGPictureInPictureRemoteObjectDelegate> * _delegate;
    struct { 
        unsigned int pictureInPictureRemoteObject_shouldAcceptSetupRequest : 1; 
        unsigned int pictureInPictureRemoteObject_shouldCancelActivePictureInPictureOnStart : 1; 
        unsigned int pictureInPictureRemoteObject_shouldUpdateCancellationPolicyOnStart : 1; 
        unsigned int pictureInPictureRemoteObject_didCreatePictureInPictureViewController : 1; 
        unsigned int pictureInPictureRemoteObject_willShowPictureInPictureViewController : 1; 
        unsigned int pictureInPictureRemoteObject_didShowPictureInPictureViewController : 1; 
        unsigned int pictureInPictureRemoteObject_willHidePictureInPictureViewController : 1; 
        unsigned int pictureInPictureRemoteObject_didHidePictureInPictureViewController : 1; 
        unsigned int pictureInPictureRemoteObject_willDestroyPictureInPictureViewController : 1; 
        unsigned int pictureInPictureRemoteObject_didRequestPictureInPictureStopForViewController_sourceSceneSessionIdentifier_animated : 1; 
    }  _delegateRespondsTo;
    NSUUID * _finishTaskInvalidationUUID;
    bool  _hasBegunTwoStateStop;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _initialLayerFrame;
    PGInterruptionAssistant * _interruptionAssistant;
    BKSProcessAssertion * _interruptionBeganFinishTaskAssertion;
    bool  _isPictureInPicturePossible;
    PGPictureInPictureApplication * _pictureInPictureApplication;
    bool  _pictureInPictureShouldStartWhenEnteringBackground;
    PGPictureInPictureViewController * _pictureInPictureViewController;
    struct CGSize { 
        double width; 
        double height; 
    }  _preferredContentSize;
    BKSProcessAssertion * _processAssertion;
    NSObject<OS_dispatch_queue> * _queue;
    unsigned long long  _resourcesUsageReductionReasons;
    bool  _shouldNoteStartedAutomaticallyForAnalytics;
    bool  _shouldShowAlternateActionButtonImage;
    bool  _shouldShowLoadingIndicator;
    NSString * _sourceSceneSessionPersistentIdentifier;
    bool  _stashed;
    <BSInvalidatable> * _stateCaptureInvalidatable;
    unsigned long long  _transitioningState;
    NSTimer * _twoStagedStopInvalidationTimer;
}

@property (nonatomic) <PGPictureInPictureAnalyticsDelegate> *analyticsDelegate;
@property (nonatomic, readonly) bool canCancelPictureInPicture;
@property (nonatomic, readonly) bool canEndTwoStageStopPictureInPicture;
@property (nonatomic, readonly) bool canStopPictureInPicture;
@property (nonatomic, readonly) NSXPCConnection *connection;
@property (nonatomic, readonly) long long currentState;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PGPictureInPictureRemoteObjectDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } initialLayerFrame;
@property (nonatomic, readonly) bool isStartingStoppingOrCancellingPictureInPicture;
@property (nonatomic, readonly) PGPictureInPictureApplication *pictureInPictureApplication;
@property (getter=isPictureInPicturePossible, nonatomic) bool pictureInPicturePossible;
@property (nonatomic, readonly) PGPictureInPictureViewController *pictureInPictureViewController;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } preferredContentSize;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, readonly) bool shouldStartPictureInPictureEnteringBackground;
@property (nonatomic, readonly) NSString *sourceSceneSessionPersistentIdentifier;
@property (readonly) Class superclass;
@property (nonatomic, readonly) unsigned long long transitioningState;

- (void).cxx_destruct;
- (id)_finishTaskAssertionForProcessIdentifier:(int)arg1;
- (void)_invalidateInterruptionBeganFinishTaskAssertion;
- (id)_invalidationTimerWithTimeout:(double)arg1;
- (id)_invalidationTimerWithTimeout:(double)arg1 block:(id /* block */)arg2;
- (bool)_isUnderLock;
- (id)_processAssertionForProcessIdentifier:(int)arg1;
- (void)_setCurrentState:(long long)arg1;
- (void)_startPreventingCancelAndRestoreUserActions;
- (void)_stopPreventingCancelAndRestoreUserActions;
- (void)_tearDownAndNotifyClientAboutCancellation:(bool)arg1;
- (void)_updatePreferredContentSize:(struct CGSize { double x1; double x2; })arg1 withCompletionHandler:(id /* block */)arg2;
- (id)analyticsDelegate;
- (void)beginTwoStageStopPictureInPictureByRestoringUserInterfaceWithCompletionHandler:(id /* block */)arg1;
- (bool)canCancelPictureInPicture;
- (bool)canEndTwoStageStopPictureInPicture;
- (bool)canStopPictureInPicture;
- (void)cancel;
- (oneway void)checkActivePictureInPictureCancellationPolicyWithCompletion:(id /* block */)arg1;
- (oneway void)cleanupWithCompletionHandler:(id /* block */)arg1;
- (id)connection;
- (long long)currentState;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (void)endTwoStageStopPictureInPictureWithCompletionBlock:(id /* block */)arg1;
- (id)init;
- (id)initWithConnection:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })initialLayerFrame;
- (oneway void)initializePictureInPictureWithControlsStyle:(long long)arg1 preferredContentSize:(struct CGSize { double x1; double x2; })arg2 completionHandler:(id /* block */)arg3;
- (void)invalidate;
- (bool)isPictureInPicturePossible;
- (bool)isStartingStoppingOrCancellingPictureInPicture;
- (bool)matchesSceneSessionIdentifier:(id)arg1;
- (id)pictureInPictureApplication;
- (void)pictureInPictureInterruptionBeganWithReason:(long long)arg1;
- (void)pictureInPictureInterruptionEndedWithReason:(long long)arg1;
- (id)pictureInPictureViewController;
- (void)pictureInPictureViewController:(id)arg1 didReceiveCommand:(id)arg2;
- (void)pictureInPictureViewController:(id)arg1 didTransitionToStashed:(bool)arg2 shouldBeginOrEndInterruption:(bool)arg3;
- (void)pictureInPictureViewController:(id)arg1 updateHostedWindowSize:(struct CGSize { double x1; double x2; })arg2 animationType:(long long)arg3 initialSpringVelocity:(double)arg4;
- (void)pictureInPictureViewControllerDidRequestCancel:(id)arg1;
- (void)pictureInPictureViewControllerDidRequestStop:(id)arg1;
- (void)pictureInPictureViewControllerHostedWindowSizeChangeBegan:(id)arg1;
- (void)pictureInPictureViewControllerHostedWindowSizeChangeEnded:(id)arg1;
- (id)pictureInPictureViewControllerSourceSceneSessionPersistentIdentifier:(id)arg1;
- (struct CGSize { double x1; double x2; })preferredContentSize;
- (id)queue;
- (void)resume;
- (oneway void)rotateContentContainer:(long long)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)setAnalyticsDelegate:(id)arg1;
- (void)setCurrentResourcesUsageReductionReasons:(unsigned long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setPictureInPicturePossible:(bool)arg1;
- (oneway void)setPictureInPictureShouldStartWhenEnteringBackground:(bool)arg1 completionHandler:(id /* block */)arg2;
- (oneway void)setupStartAnimated:(bool)arg1 hostedWindowHostingHandle:(id)arg2 sceneSessionPersistentIdentifier:(id)arg3 preferredContentSize:(struct CGSize { double x1; double x2; })arg4 initialInterfaceOrientation:(long long)arg5 initialLayerFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg6 playbackState:(id)arg7 completionHandler:(id /* block */)arg8;
- (oneway void)setupStopAnimated:(bool)arg1 needsApplicationActivation:(bool)arg2 completionHandler:(id /* block */)arg3;
- (bool)shouldStartPictureInPictureEnteringBackground;
- (id)sourceSceneSessionPersistentIdentifier;
- (oneway void)startPictureInPictureAnimated:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)startPictureInPictureEnteringBackgroundAnimated:(bool)arg1 withCompletionHandler:(id /* block */)arg2;
- (oneway void)stopPictureInPictureAndRestoreUserInterface;
- (void)stopPictureInPictureAnimated:(bool)arg1 withCompletionHandler:(id /* block */)arg2;
- (oneway void)stopPictureInPictureAnimated:(bool)arg1 withFinalInterfaceOrientation:(long long)arg2 finalLayerFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 completionHandler:(id /* block */)arg4;
- (void)suspend;
- (unsigned long long)transitioningState;
- (oneway void)updateInitialLayerFrameForInteractiveTransitionAnimationUponBackgrounding:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withCompletionHandler:(id /* block */)arg2;
- (oneway void)updatePlaybackStateWithDiff:(id)arg1;
- (oneway void)updatePreferredContentSize:(struct CGSize { double x1; double x2; })arg1 withCompletionHandler:(id /* block */)arg2;
- (oneway void)updateSourceSceneSessionPersistentIdentifierForInteractiveTransitionAnimationUponBackgrounding:(id)arg1 withCompletionHandler:(id /* block */)arg2;

@end
