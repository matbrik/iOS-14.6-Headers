/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI
 */

@interface HMIGreedyClustering : HMFObject <HMFLogging> {
    struct shared_ptr<homeai::clustering::GreedyClusterer> { 
        struct GreedyClusterer {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _greedyClusterer;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (bool)addFaceObservations:(id)arg1 toFaceDescriptorBuffer:(struct ImageDescriptorBufferFloat32 { int (**x1)(); struct vector<long long, std::__1::allocator<long long>> { long long *x_2_1_1; long long *x_2_1_2; struct __compressed_pair<long long *, std::__1::allocator<long long>> { long long *x_3_2_1; } x_2_1_3; } x2; struct map<long long, int, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, int>>> { struct __tree<std::__1::__value_type<long long, int>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, int>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, int>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, int>, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, int>, std::__1::less<long long>, true>> { unsigned long long x_3_3_1; } x_1_2_3; } x_3_1_1; } x3; }*)arg2 error:(id*)arg3;
+ (id)centermostFaceprintInCluster:(id)arg1 faceObservations:(id)arg2;
+ (float)faceDistanceFromDescriptor:(id)arg1 toDescriptor:(id)arg2;
+ (id)logCategory;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)convertToClusters:(struct vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> { struct pair<long long, long long> {} *x1; struct pair<long long, long long> {} *x2; struct __compressed_pair<std::__1::pair<long long, long long> *, std::__1::allocator<std::__1::pair<long long, long long>>> { struct pair<long long, long long> {} *x_3_1_1; } x3; }*)arg1;
- (id)getClustersWithFaces:(id)arg1 error:(id*)arg2;
- (id)initWithError:(id*)arg1;
- (id)initWithFaceThreshold:(id)arg1 singleLinkThreshold:(id)arg2 percentConnectionsThreshold:(id)arg3 faceprintRevision:(long long)arg4 error:(id*)arg5;

@end
