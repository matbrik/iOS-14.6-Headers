/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
 */

@interface CHStrokeFastGroupingResult : CHStrokeGroupingResult {
    struct vector<CHFastGroupingCluster, std::__1::allocator<CHFastGroupingCluster>> { 
        struct CHFastGroupingCluster {} *__begin_; 
        struct CHFastGroupingCluster {} *__end_; 
        struct __compressed_pair<CHFastGroupingCluster *, std::__1::allocator<CHFastGroupingCluster>> { 
            struct CHFastGroupingCluster {} *__value_; 
        } __end_cap_; 
    }  _fastGroupingClusters;
}

@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<CHFastGroupingCluster' */ struct  fastGroupingClusters; /* unknown property attribute:  std::__1::allocator<CHFastGroupingCluster>>=^{CHFastGroupingCluster}}} */

+ (id)_strokeGroupFromFastGroupingCluster:(const struct CHFastGroupingCluster { struct map<unsigned long, CGPoint, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, CGPoint>>> { struct __tree<std::__1::__value_type<unsigned long, CGPoint>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, CGPoint>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, CGPoint>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, CGPoint>, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, CGPoint>, std::__1::less<unsigned long>, true>> { unsigned long long x_3_3_1; } x_1_2_3; } x_1_1_1; } x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 strokeProvider:(id)arg2 strategyIdentifier:(id)arg3;
+ (id)_strokeGroupFromSortedStrokeIdentifiers:(id)arg1 strokeProvider:(id)arg2 strategyIdentifier:(id)arg3;
+ (id)_strokeGroupsFromFastGroupingClusters:(const struct vector<CHFastGroupingCluster, std::__1::allocator<CHFastGroupingCluster>> { struct CHFastGroupingCluster {} *x1; struct CHFastGroupingCluster {} *x2; struct __compressed_pair<CHFastGroupingCluster *, std::__1::allocator<CHFastGroupingCluster>> { struct CHFastGroupingCluster {} *x_3_1_1; } x3; }*)arg1 clusteredStrokes:(id)arg2 strokeProvider:(id)arg3 strategyIdentifier:(id)arg4 clutterFilter:(id)arg5;

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct vector<CHFastGroupingCluster, std::__1::allocator<CHFastGroupingCluster>> { struct CHFastGroupingCluster {} *x1; struct CHFastGroupingCluster {} *x2; struct __compressed_pair<CHFastGroupingCluster *, std::__1::allocator<CHFastGroupingCluster>> { struct CHFastGroupingCluster {} *x_3_1_1; } x3; })fastGroupingClusters;
- (id)initWithFastGroupingClusters:(const struct vector<CHFastGroupingCluster, std::__1::allocator<CHFastGroupingCluster>> { struct CHFastGroupingCluster {} *x1; struct CHFastGroupingCluster {} *x2; struct __compressed_pair<CHFastGroupingCluster *, std::__1::allocator<CHFastGroupingCluster>> { struct CHFastGroupingCluster {} *x_3_1_1; } x3; }*)arg1 clusteredStrokes:(id)arg2 strokeProvider:(id)arg3 strategyIdentifier:(id)arg4 clutterFilter:(id)arg5;

@end
