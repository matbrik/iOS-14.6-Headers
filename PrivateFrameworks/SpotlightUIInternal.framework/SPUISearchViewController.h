/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SpotlightUIInternal.framework/SpotlightUIInternal
 */

@interface SPUISearchViewController : UIViewController <SFFeedbackListener, SPUIResultsViewDelegate, SPUISearchHeaderDelegate, SearchUIFirstTimeExperienceDelegate, SearchUIResultsViewDelegate, UIGestureRecognizerDelegate> {
    NSMutableSet * _allHeaderViews;
    bool  _clearQueryOnDismissal;
    <SPUISearchViewControllerDelegate> * _delegate;
    bool  _expandPlatterOnAppear;
    unsigned long long  _feedbackBackgroundTaskIdentifier;
    SPUISearchFirstTimeViewController * _firstTimeExperienceViewController;
    bool  _internetOverrideForPPT;
    bool  _lastQueryWasAuthenticated;
    _UILegibilitySettings * _legibilitySettings;
    SPUILockScreenFooterView * _lockScreenFooterView;
    unsigned long long  _presentationMode;
    unsigned long long  _presentationSource;
    SPUIResultsViewController * _proactiveResultViewController;
    unsigned long long  _queryIdAtInvoke;
    SPUISearchHeader * _searchHeader;
    SPUIResultsViewController * _searchResultViewController;
    <SPUISearchViewControllerSizingDelegate> * _sizingDelegate;
    UIView * _tapToRadarView;
    SPUITestingHelper * _testingHelper;
    double  _timeAtDismissal;
    NSTimer * _windowExpansionTimer;
}

@property (retain) NSMutableSet *allHeaderViews;
@property bool clearQueryOnDismissal;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <SPUISearchViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double distanceToTopOfAppIcons;
@property bool expandPlatterOnAppear;
@property unsigned long long feedbackBackgroundTaskIdentifier;
@property (retain) SPUISearchFirstTimeViewController *firstTimeExperienceViewController;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) SPUISearchHeader *headerView;
@property bool internetOverrideForPPT;
@property bool lastQueryWasAuthenticated;
@property (nonatomic, retain) _UILegibilitySettings *legibilitySettings;
@property (retain) SPUILockScreenFooterView *lockScreenFooterView;
@property (retain) SPUINavigationController *navigationController;
@property unsigned long long presentationMode;
@property (readonly) unsigned long long presentationSource;
@property (retain) SPUIResultsViewController *proactiveResultViewController;
@property unsigned long long queryIdAtInvoke;
@property (retain) SPUISearchHeader *searchHeader;
@property (retain) SPUIResultsViewController *searchResultViewController;
@property (nonatomic) bool shouldShowKeyboardInputBars;
@property <SPUISearchViewControllerSizingDelegate> *sizingDelegate;
@property (readonly) Class superclass;
@property (retain) UIView *tapToRadarView;
@property (retain) SPUITestingHelper *testingHelper;
@property double timeAtDismissal;
@property (retain) NSTimer *windowExpansionTimer;

+ (void)_updateHeaderView:(id)arg1 fromText:(id)arg2 fromToken:(id)arg3;
+ (bool)displayTapToRadar;
+ (bool)isFeedbackSelector:(SEL)arg1;
+ (bool)shouldShowAsTypedSuggestion;

- (void).cxx_destruct;
- (bool)_canShowWhileLocked;
- (void)activateFirstTimeExperienceViewAnimate:(bool)arg1;
- (void)activateFirstTimeExperienceViewIfNecessary;
- (void)activateViewController:(id)arg1 animate:(bool)arg2;
- (id)activeViewController;
- (id)allHeaderViews;
- (bool)allowInternet;
- (void)animateChunkyEnabled:(bool)arg1;
- (void)cancelButtonPressed;
- (void)checkClearTimer;
- (bool)clearQueryOnDismissal;
- (void)clearSearchResults;
- (void)clearTimerExpired;
- (double)contentHeight;
- (id)contentScrollView;
- (id)createAdditionalHeaderView;
- (id)currentQuery;
- (bool)currentQueryIdMatchesResultInGeneralModel;
- (void)dealloc;
- (id)delegate;
- (void)dictationButtonPressed;
- (void)didBeginEditing;
- (void)didBeginScrollingResults;
- (void)didChangeExpansionStateForSection:(id)arg1 expanded:(bool)arg2;
- (void)didEngageResult:(id)arg1;
- (void)didScrollPastBottomOfContent;
- (void)didTapInEmptyRegion;
- (void)didUpdateContentScrolledOffScreenStatus:(bool)arg1 animated:(bool)arg2;
- (void)didUpdateKeyboardFocusToResult:(id)arg1 cardSection:(id)arg2;
- (double)distanceToTopOfAppIcons;
- (void)dragInitiated;
- (void)enableChunky:(bool)arg1;
- (void)endBackgroundTaskIfNeeded;
- (bool)expandPlatterOnAppear;
- (void)expandWindowIfNeeded;
- (unsigned long long)feedbackBackgroundTaskIdentifier;
- (id)firstResultIgnoringSuggestionsIfNeeded;
- (void)firstTimeExperienceContinueButtonPressed;
- (id)firstTimeExperienceViewController;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (void)getUserActivityForResult:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)hasContentInSearchField;
- (id)headerView;
- (id)init;
- (bool)internetOverrideForPPT;
- (void)invalidateWindowExpansionTimer;
- (bool)lastQueryWasAuthenticated;
- (void)launchSiriWithUtteranceText:(id)arg1 source:(long long)arg2;
- (id)legibilitySettings;
- (id)lockScreenFooterView;
- (bool)optOutOfGoButton;
- (void)performReturnKeyPressAndExpandWidowIfNeeded;
- (void)performTestSearchWithQuery:(id)arg1 event:(unsigned long long)arg2 queryKind:(unsigned long long)arg3;
- (void)performWebSearch;
- (unsigned long long)presentationMode;
- (unsigned long long)presentationSource;
- (bool)presentationSupportsChunky;
- (id)proactiveResultViewController;
- (id)proactiveResultsTestingObject;
- (void)purgeMemory;
- (void)queryContextDidChange:(id)arg1 fromSearchHeader:(id)arg2 allowZKW:(bool)arg3;
- (unsigned long long)queryIdAtInvoke;
- (void)removeCompletionAndHighlightAsTyped:(bool)arg1;
- (bool)respondsToSelector:(SEL)arg1;
- (void)resultsDidBecomeVisible:(id)arg1;
- (void)resultsViewController:(id)arg1 didChangeContentSize:(struct CGSize { double x1; double x2; })arg2 animated:(bool)arg3;
- (void)returnKeyPressed;
- (bool)runTest:(id)arg1 options:(id)arg2;
- (void)scheduleWindowExpansionWithInterval:(double)arg1;
- (id)searchHeader;
- (id)searchResultViewController;
- (id)searchResultsTestingObject;
- (void)searchThroughPunchoutForResult:(id)arg1 forQuery:(id)arg2;
- (void)searchThroughPunchoutForResult:(id)arg1 resultTitle:(id)arg2 forQuery:(id)arg3;
- (void)searchViewDidDismissWithReason:(unsigned long long)arg1;
- (void)searchViewDidPresentFromSource:(unsigned long long)arg1;
- (void)searchViewDidUpdatePresentationProgress:(double)arg1;
- (void)searchViewWillDismissWithReason:(unsigned long long)arg1;
- (void)searchViewWillPresentFromSource:(unsigned long long)arg1;
- (bool)sectionShouldBeExpanded:(id)arg1;
- (void)setAllHeaderViews:(id)arg1;
- (void)setClearQueryOnDismissal:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setExpandPlatterOnAppear:(bool)arg1;
- (void)setFeedbackBackgroundTaskIdentifier:(unsigned long long)arg1;
- (void)setFirstTimeExperienceViewController:(id)arg1;
- (void)setInternetOverrideForPPT:(bool)arg1;
- (void)setInternetOverrideToDisable:(bool)arg1;
- (void)setLastQueryWasAuthenticated:(bool)arg1;
- (void)setLegibilitySettings:(id)arg1;
- (void)setLockScreenFooterView:(id)arg1;
- (void)setPresentationMode:(unsigned long long)arg1;
- (void)setProactiveResultViewController:(id)arg1;
- (void)setQueryIdAtInvoke:(unsigned long long)arg1;
- (void)setSearchHeader:(id)arg1;
- (void)setSearchResultViewController:(id)arg1;
- (void)setShouldShowKeyboardInputBars:(bool)arg1;
- (void)setSizingDelegate:(id)arg1;
- (void)setTapToRadarView:(id)arg1;
- (void)setTestingHelper:(id)arg1;
- (void)setTimeAtDismissal:(double)arg1;
- (void)setWindowExpansionTimer:(id)arg1;
- (bool)shouldShowKeyboardInputBars;
- (void)showVerticalScrollIndicators:(bool)arg1;
- (id)sizingDelegate;
- (void)spotlightDidBackground;
- (void)tapToRadarPressed;
- (id)tapToRadarView;
- (id)testingHelper;
- (double)timeAtDismissal;
- (void)updateFooterView;
- (void)updateHeaderViewsWithBlock:(id /* block */)arg1;
- (void)updatePlatterMode;
- (void)updateResponderChainIfNeeded;
- (id)userActivityFromIntent:(id)arg1;
- (id)viewControllerForPresenting;
- (void)viewWillAppear:(bool)arg1;
- (void)willUpdateFromResultsWithHighlightedResult:(id)arg1;
- (id)windowExpansionTimer;

@end
