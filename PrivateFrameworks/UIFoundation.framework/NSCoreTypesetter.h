/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation
 */

@interface NSCoreTypesetter : NSTypesetter {
    NSDictionary * __extraLineFragmentAttributes;
    bool  _allowsFontSubstitutionAffectingVerticalMetrics;
    id /* block */  _laidOutLineFragment;
    long long  _layoutOrientation;
    bool  _limitsLayoutForSuspiciousContents;
    bool  _usesDefaultHyphenation;
    id /* block */  _validateLineBreakIndex;
    bool  _wantsExtraLineFragment;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  characterRange;
    <NSCoreTypesetterDelegate> * delegate;
    struct CGSize { 
        double width; 
        double height; 
    }  textContainerSize;
}

@property (copy) NSDictionary *_extraLineFragmentAttributes;
@property bool allowsFontSubstitutionAffectingVerticalMetrics;
@property struct _NSRange { unsigned long long x1; unsigned long long x2; } characterRange;
@property <NSCoreTypesetterDelegate> *delegate;
@property (copy) id /* block */ laidOutLineFragment;
@property long long layoutOrientation;
@property bool limitsLayoutForSuspiciousContents;
@property struct CGSize { double x1; double x2; } textContainerSize;
@property bool usesDefaultHyphenation;
@property (copy) id /* block */ validateLineBreakIndex;
@property bool wantsExtraLineFragment;

+ (void)_lineMetricsForAttributes:(id)arg1 typesetterBehavior:(long long)arg2 usesFontLeading:(bool)arg3 applySpacings:(bool)arg4 usesSystemFontLeading:(bool)arg5 usesNegativeFontLeading:(bool)arg6 lineHeight:(double*)arg7 baselineOffset:(double*)arg8 spacing:(double*)arg9 applicationFrameworkContext:(long long)arg10;
+ (void)_maximumAscentAndDescentForRuns:(struct __CFArray { }*)arg1 ascender:(double*)arg2 descender:(double*)arg3;

- (void).cxx_destruct;
- (int)_NSFastDrawString:(id)arg1 length:(unsigned long long)arg2 attributes:(id)arg3 paragraphStyle:(id)arg4 typesetterBehavior:(long long)arg5 lineBreakMode:(long long)arg6 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg7 padding:(double)arg8 graphicsContext:(id)arg9 baselineRendering:(bool)arg10 usesFontLeading:(bool)arg11 usesScreenFont:(bool)arg12 scrollable:(bool)arg13 syncAlignment:(bool)arg14 mirrored:(bool)arg15 boundingRectPointer:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg16 baselineOffsetPointer:(double*)arg17 drawingContext:(id)arg18;
- (id)_extraLineFragmentAttributes;
- (struct { double x1; double x2; double x3; })_getLineMetricsForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 attributes:(id)arg2 applySpacing:(bool)arg3 usesSystemFontLeading:(bool)arg4 usesNegativeFontLeading:(bool)arg5;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_stringDrawingCoreTextEngineWithOriginalString:(id)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 padding:(double)arg3 graphicsContext:(id)arg4 forceClipping:(bool)arg5 attributes:(id)arg6 stringDrawingOptions:(long long)arg7 drawingContext:(id)arg8 stringDrawingInterface:(struct { unsigned char x1; long long x2; bool x3; }*)arg9;
- (bool)allowsFontSubstitutionAffectingVerticalMetrics;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })characterRange;
- (void)dealloc;
- (id)delegate;
- (id)init;
- (id /* block */)laidOutLineFragment;
- (void)layout;
- (long long)layoutOrientation;
- (bool)limitsLayoutForSuspiciousContents;
- (void)setAllowsFontSubstitutionAffectingVerticalMetrics:(bool)arg1;
- (void)setCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setLaidOutLineFragment:(id /* block */)arg1;
- (void)setLayoutOrientation:(long long)arg1;
- (void)setLimitsLayoutForSuspiciousContents:(bool)arg1;
- (void)setTextContainerSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setUsesDefaultHyphenation:(bool)arg1;
- (void)setValidateLineBreakIndex:(id /* block */)arg1;
- (void)setWantsExtraLineFragment:(bool)arg1;
- (void)set_extraLineFragmentAttributes:(id)arg1;
- (id)softHyphen;
- (struct CGSize { double x1; double x2; })textContainerSize;
- (bool)usesDefaultHyphenation;
- (id /* block */)validateLineBreakIndex;
- (bool)wantsExtraLineFragment;

@end
