/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface _UIDatePickerCalendarView : UIView <_UIDatePickerCalendarDateViewDelegate, _UIDatePickerCalendarHeaderViewDelegate, _UIDatePickerCalendarMonthYearSelectorDelegate, _UIDatePickerCalendarTimeViewDelegate, _UIDatePickerViewComponent> {
    UIStackView * _contentView;
    _UIDatePickerDataModel * _data;
    UIDatePicker * _datePicker;
    _UIDatePickerDateRange * _dateRange;
    _UIDatePickerCalendarDateView * _dateView;
    struct { 
        unsigned int needsUpdateDate : 1; 
        unsigned int isEnabled : 1; 
    }  _flags;
    _UIDatePickerCalendarHeaderView * _headerView;
    struct CGSize { 
        double width; 
        double height; 
    }  _lastSize;
    NSLayoutConstraint * _maximumWidthConstraint;
    NSLayoutConstraint * _minimumWidthConstraint;
    _UIDatePickerCalendarMonthYearSelector * _monthYearSelector;
    unsigned long long  _stateUpdatesInFlight;
    _UIDatePickerCalendarTimeView * _timeView;
    long long  _viewState;
}

@property (getter=_allowsZeroCountDownDuration, setter=_setAllowsZeroCountDownDuration:, nonatomic) bool allowsZeroCountDownDuration;
@property (getter=_allowsZeroTimeInterval, setter=_setAllowsZeroTimeInterval:, nonatomic) bool allowsZeroTimeInterval;
@property (nonatomic, readonly) double contentWidth;
@property (nonatomic, retain) _UIDatePickerDataModel *data;
@property (nonatomic) UIDatePicker *datePicker;
@property (nonatomic, readonly) long long datePickerStyle;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (getter=_highlightColor, setter=_setHighlightColor:, nonatomic, retain) UIColor *highlightColor;
@property (getter=_isTimeIntervalMode, nonatomic, readonly) bool isTimeIntervalMode;
@property (getter=_magnifierLineColor, setter=_setMagnifierLineColor:, nonatomic, retain) UIColor *magnifierLineColor;
@property (readonly) Class superclass;
@property (getter=_textColor, setter=_setTextColor:, nonatomic, retain) UIColor *textColor;
@property (getter=_textShadowColor, setter=_setTextShadowColor:, nonatomic, retain) UIColor *textShadowColor;
@property (nonatomic) double timeInterval;

- (void).cxx_destruct;
- (bool)_allowsZeroCountDownDuration;
- (bool)_allowsZeroTimeInterval;
- (void)_destroyMonthYearSelector;
- (void)_headerViewWantsToMoveToMonth:(id)arg1;
- (bool)_isTimeIntervalMode;
- (void)_reload;
- (void)_reloadDateRange;
- (void)_reloadDateView;
- (void)_reloadHeaderView;
- (void)_reloadMonthYearSelector;
- (void)_reloadTimeView;
- (void)_setAllowsZeroCountDownDuration:(bool)arg1;
- (void)_setAllowsZeroTimeInterval:(bool)arg1;
- (void)_setEnabled:(bool)arg1;
- (void)_setHidesLabels:(bool)arg1;
- (void)_setNeedsUpdateDate;
- (void)_setupMonthYearSelector;
- (bool)_shouldUpdateDataForComponents:(id)arg1 date:(id)arg2;
- (bool)_shouldUpdateDateViewForSelectedDay:(id)arg1;
- (bool)_shouldUpdateDateViewForVisibleMonth:(id)arg1;
- (bool)_shouldUpdateHeaderViewForSelectedDay:(id)arg1;
- (bool)_shouldUpdateHeaderViewForVisibleMonth:(id)arg1;
- (bool)_shouldUpdateMonthYearSelectorForSelectedDay:(id)arg1;
- (bool)_shouldUpdateTimeViewForSelectedTime:(id)arg1;
- (struct CGSize { double x1; double x2; })_sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)_updateContentSizeLimitations;
- (void)_updateCustomFonts;
- (void)_updateDataForComponents:(id)arg1;
- (void)_updateDate;
- (void)_updateDateIfNeeded;
- (void)_updateDateViewForSelectedDay:(id)arg1 animated:(bool)arg2;
- (void)_updateDateViewForVisibleMonth:(id)arg1 animated:(bool)arg2;
- (void)_updateEnabledStyling;
- (void)_updateHeaderViewForSelectedDay:(id)arg1;
- (void)_updateHeaderViewForVisibleMonth:(id)arg1;
- (void)_updateModuleVisibility;
- (void)_updateMonthYearSelectorForSelectedDay:(id)arg1 animated:(bool)arg2;
- (void)_updateSelectedDay:(id)arg1 animated:(bool)arg2 notify:(bool)arg3;
- (void)_updateSelectedDay:(id)arg1 time:(id)arg2 animated:(bool)arg3 notify:(bool)arg4;
- (void)_updateSelectedDayToDayInMonth:(id)arg1 animated:(bool)arg2 notify:(bool)arg3;
- (void)_updateSelectedTime:(id)arg1 notify:(bool)arg2;
- (void)_updateTimeViewForSelectedTime:(id)arg1 animated:(bool)arg2;
- (void)_updateViewState:(long long)arg1 animated:(bool)arg2;
- (void)_updateVisibleMonth:(id)arg1 animated:(bool)arg2;
- (void)_workaround66574039_datePickerDidUpdateLayoutMargins;
- (id)data;
- (id)datePicker;
- (long long)datePickerStyle;
- (void)dateView:(id)arg1 didSelectDate:(id)arg2;
- (void)dateView:(id)arg1 didShowMonth:(id)arg2;
- (struct CGSize { double x1; double x2; })defaultSize;
- (void)didChangeCalendar;
- (void)didChangeCustomFontDescriptor;
- (void)didChangeDateFrom:(id)arg1 animated:(bool)arg2;
- (void)didChangeLocale;
- (void)didChangeMaximumDate;
- (void)didChangeMinimumDate;
- (void)didChangeMinuteInterval;
- (void)didChangeMode;
- (void)didChangeTimeZone;
- (void)didChangeToday;
- (void)didReset;
- (bool)hasDefaultSize;
- (void)headerViewDidSelect:(id)arg1;
- (void)headerViewDidStepBackward:(id)arg1;
- (void)headerViewDidStepForward:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (void)layoutMarginsDidChange;
- (void)layoutSubviews;
- (void)monthYearSelector:(id)arg1 didSelectMonth:(id)arg2;
- (id)primaryFirstResponder;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setData:(id)arg1;
- (void)setDatePicker:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)timeView:(id)arg1 didSelectTime:(id)arg2;
- (void)timeViewDidBeginEditing:(id)arg1;
- (void)timeViewDidEndEditing:(id)arg1;
- (void)timeViewWillBecomeFirstResponder:(id)arg1;
- (bool)usesAutoLayout;

@end
