/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/WallpaperKit.framework/WallpaperKit
 */

@interface WKWallpaperBundle : NSObject <NAIdentifiable, WKWallpaperRepresenting> {
    NSURL * __bundleURL;
    NSMutableDictionary * __darkAppearanceWallpapers;
    NSMutableDictionary * __defaultAppearanceWallpapers;
    bool  _appearanceAware;
    bool  _distinctWallpapersForLocations;
    bool  _dynamicWallpaperBundle;
    NSString * _family;
    long long  _identifier;
    NSString * _name;
    NSURL * _thumbnailImageURL;
    long long  _version;
}

@property (nonatomic, retain) NSURL *_bundleURL;
@property (nonatomic, retain) NSMutableDictionary *_darkAppearanceWallpapers;
@property (nonatomic, retain) NSMutableDictionary *_defaultAppearanceWallpapers;
@property (getter=isAppearanceAware, nonatomic, readonly) bool appearanceAware;
@property (nonatomic, readonly) unsigned long long contentSource;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=hasDistinctWallpapersForLocations, nonatomic, readonly) bool distinctWallpapersForLocations;
@property (getter=isDynamicWallpaperBundle, nonatomic, readonly) bool dynamicWallpaperBundle;
@property (nonatomic, readonly, copy) NSString *family;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) long long identifier;
@property (nonatomic, readonly, copy) NSString *identifierString;
@property (nonatomic, readonly, copy) NSString *name;
@property (readonly) Class superclass;
@property (nonatomic, readonly, copy) NSURL *thumbnailImageURL;
@property (nonatomic, readonly) long long version;

+ (id)createTemporaryWallpaperBundleWithImages:(id)arg1 videoAssetURLs:(id)arg2 wallpaperOptions:(id)arg3 error:(id*)arg4;
+ (id)na_identity;
+ (bool)shouldLoadWallpaperBundleAtURL:(id)arg1;

- (void).cxx_destruct;
- (id)_bundleURL;
- (id)_darkAppearanceWallpapers;
- (id)_defaultAppearanceWallpapers;
- (id)_liveWallpaperWithMetadataDictionary:(id)arg1 wallpaperAppearance:(id)arg2;
- (void)_loadBundle;
- (void)_loadDynamicWallpaper:(id)arg1;
- (void)_processAssetDictionary:(id)arg1 forLocation:(id)arg2;
- (id)_processCommonFileBackedWallpaperMetadataWithDictionary:(id)arg1 wallpaperAppearance:(id)arg2;
- (void)_raiseInvalidMetadataExceptionForMetadataKeypath:(id)arg1;
- (id)_stillWallpaperWithMetadataDictionary:(id)arg1 wallpaperAppearance:(id)arg2;
- (id)_stripeWallpaperWithMetadataDictionary:(id)arg1 wallpaperAppearance:(id)arg2;
- (unsigned long long)contentSource;
- (id)family;
- (id)fileBasedWallpaperForLocation:(id)arg1;
- (id)fileBasedWallpaperForLocation:(id)arg1 andAppearance:(id)arg2;
- (bool)hasDistinctWallpapersForLocations;
- (unsigned long long)hash;
- (long long)identifier;
- (id)identifierString;
- (id)initWithDynamicDictionary:(id)arg1 identifier:(long long)arg2;
- (id)initWithURL:(id)arg1;
- (bool)isAppearanceAware;
- (bool)isDynamicWallpaperBundle;
- (bool)isEqual:(id)arg1;
- (id)name;
- (void)set_bundleURL:(id)arg1;
- (void)set_darkAppearanceWallpapers:(id)arg1;
- (void)set_defaultAppearanceWallpapers:(id)arg1;
- (id)thumbnailImageURL;
- (id)valueBasedWallpaperForLocation:(id)arg1;
- (id)valueBasedWallpaperForLocation:(id)arg1 andAppearance:(id)arg2;
- (long long)version;
- (unsigned long long)wallpaperBackingTypeForLocation:(id)arg1;

@end
