/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/WorkflowEditor.framework/WorkflowEditor
 */

@interface _CKComponentMemoizerImpl : NSObject {
    _CKComponentMemoizerImpl * _next;
    struct unordered_multimap<CKMemoizationKey, CKComponent *, std::__1::hash<CKMemoizationKey>, std::__1::equal_to<CKMemoizationKey>, std::__1::allocator<std::__1::pair<const CKMemoizationKey, CKComponent *>>> { 
        struct __hash_table<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true>, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>>> { 
            struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> *>>> { 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> *>>> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> {} **__value_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>>> { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> {} *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  componentCache_;
    struct unordered_map<CKLayoutMemoizationKey, CKComponentLayout, CKLayoutMemoizationKey::Hash, CKLayoutMemoizationKey::Equals, std::__1::allocator<std::__1::pair<const CKLayoutMemoizationKey, CKComponentLayout>>> { 
        struct __hash_table<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true>, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true>, std::__1::allocator<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>>> { 
            struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> *>>> { 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> *>>> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> {} **__value_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>>> { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> {} *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  layoutCache_;
}

+ (id)currentMemoizer;
+ (void)setCurrentMemoizer:(id)arg1;

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct CKComponentLayout { id x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; struct shared_ptr<const std::__1::vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild>>> { struct vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild>> {} *x_3_1_1; struct __shared_weak_count {} *x_3_1_2; } x3; id x4; })cachedLayout:(id)arg1 thatFits:(struct CKSizeRange { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 restrictedToSize:(struct CKComponentSize { struct CKRelativeDimension { int x_1_1_1; double x_1_1_2; } x1; struct CKRelativeDimension { int x_2_1_1; double x_2_1_2; } x2; struct CKRelativeDimension { int x_3_1_1; double x_3_1_2; } x3; struct CKRelativeDimension { int x_4_1_1; double x_4_1_2; } x4; struct CKRelativeDimension { int x_5_1_1; double x_5_1_2; } x5; struct CKRelativeDimension { int x_6_1_1; double x_6_1_2; } x6; })arg3 parentSize:(struct CGSize { double x1; double x2; })arg4 block:(id /* block */)arg5;
- (id)dequeueComponentForKey:(struct CKMemoizationKey { unsigned long long x1; struct shared_ptr<const void> { void *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; int (*x3)(); })arg1;
- (void)enqueueComponent:(id)arg1 forKey:(struct CKMemoizationKey { unsigned long long x1; struct shared_ptr<const void> { void *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; int (*x3)(); })arg2;
- (id)next;

@end
