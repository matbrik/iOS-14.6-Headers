/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SampleAnalysis.framework/SampleAnalysis
 */

@interface SATask : NSObject <SASerializable> {
    unsigned long long  _adamID;
    bool  _allowsIdleExit;
    bool  _alreadyAttemptedToGetLoadInfoFromLiveProcess;
    bool  _alreadyGatheredDataFromLiveProcess;
    NSString * _appType;
    struct _CSArchitecture { 
        int cpu_type; 
        int cpu_subtype; 
    }  _architecture;
    bool  _assumeBinaryLoadInfosContainsMainBinary;
    NSArray * _binaryLoadInfos;
    NSString * _bundleBuildVersion;
    NSString * _bundleName;
    NSString * _bundleProductBuildVersion;
    NSString * _bundleProjectName;
    NSString * _bundleSourceVersion;
    NSString * _cohortID;
    NSString * _commerceAppID;
    NSString * _commerceExternalID;
    NSMutableDictionary * _dispatchQueues;
    SATimestamp * _execTimestamp;
    SATimestamp * _exitTimestamp;
    bool  _isBeta;
    bool  _isTranslocated;
    bool  _isUnresponsive;
    SABinary * _mainBinary;
    NSString * _mainBinaryPath;
    SAThread * _mainThread;
    NSString * _name;
    bool  _noSharedCache;
    int  _pid;
    SATimestamp * _pidStartTimestamp;
    int  _ppid;
    NSMutableSet * _rootFrames;
    int  _rpid;
    SASharedCache * _sharedCache;
    NSMutableArray * _taskStates;
    NSMutableDictionary * _threads;
    double  _timeOfLastResponse;
    unsigned int  _uid;
    unsigned long long  _uniquePid;
    bool  _usesSuddenTermination;
    NSString * _vendorID;
}

@property (readonly) unsigned long long adamID;
@property (readonly) bool allowsIdleExit;
@property (readonly) NSString *appType;
@property (readonly) NSArray *binaryLoadInfos;
@property (readonly) NSString *bundleBuildVersion;
@property (readonly) NSString *bundleIdentifier;
@property (readonly) NSString *bundleName;
@property (readonly) NSString *bundleProductBuildVersion;
@property (readonly) NSString *bundleProjectName;
@property (readonly) NSString *bundleShortVersion;
@property (readonly) NSString *bundleSourceVersion;
@property (readonly) NSString *bundleVersion;
@property (readonly) NSString *cohortID;
@property (readonly) NSString *commerceAppID;
@property (readonly) NSString *commerceExternalID;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) NSDictionary *dispatchQueues;
@property (readonly) SATimestamp *execTimestamp;
@property (readonly) SATimestamp *exitTimestamp;
@property (readonly) unsigned long long hash;
@property (readonly) bool isBeta;
@property (readonly) bool isTranslocated;
@property (readonly) bool isUnresponsive;
@property (readonly) SABinary *mainBinary;
@property (readonly) SABinaryLoadInfo *mainBinaryLoadInfo;
@property (copy) NSString *mainBinaryPath;
@property (readonly) SAThread *mainThread;
@property (readonly, copy) NSString *name;
@property (readonly) int pid;
@property (readonly) int ppid;
@property (readonly) int rpid;
@property (readonly) SASharedCache *sharedCache;
@property (readonly) Class superclass;
@property (readonly) NSArray *taskStates;
@property (readonly) NSDictionary *threads;
@property (readonly) double timeOfLastResponse;
@property (readonly) unsigned int uid;
@property (readonly) unsigned long long uniquePid;
@property (readonly) bool usesSuddenTermination;
@property (readonly) NSString *vendorID;

+ (id)classDictionaryKey;
+ (id)newInstanceWithoutReferencesFromSerializedBuffer:(const void*)arg1 bufferLength:(unsigned long long)arg2;

- (void).cxx_destruct;
- (unsigned long long)adamID;
- (bool)addSelfToBuffer:(struct { unsigned char x1; unsigned char x2; int x3; int x4; int x5; unsigned int x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; double x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned long long x18; unsigned long long x19; unsigned long long x20; struct _CSArchitecture { int x_21_1_1; int x_21_1_2; } x21; union { unsigned short x_22_1_1; struct { unsigned int x_2_2_1 : 1; unsigned int x_2_2_2 : 1; unsigned int x_2_2_3 : 1; unsigned int x_2_2_4 : 1; unsigned int x_2_2_5 : 1; unsigned int x_2_2_6 : 1; } x_22_1_2; } x22; }*)arg1 bufferLength:(unsigned long long)arg2 withCompletedSerializationDictionary:(id)arg3;
- (void)addSelfToSerializationDictionary:(id)arg1;
- (bool)allowsIdleExit;
- (id)appType;
- (id)architectureString;
- (id)binaryLoadInfos;
- (id)bundleBuildVersion;
- (id)bundleIdentifier;
- (id)bundleName;
- (id)bundleProductBuildVersion;
- (id)bundleProjectName;
- (id)bundleShortVersion;
- (id)bundleSourceVersion;
- (id)bundleVersion;
- (id)cohortID;
- (id)commerceAppID;
- (id)commerceExternalID;
- (void)cpuTimeNs:(unsigned long long*)arg1 cpuInstructions:(unsigned long long*)arg2 cpuCycles:(unsigned long long*)arg3 betweenStartTime:(id)arg4 endTime:(id)arg5;
- (void)dealloc;
- (id)debugDescription;
- (id)dispatchQueues;
- (id)endTimestamp;
- (void)enumerateTaskStatesBetweenStartTime:(id)arg1 endTime:(id)arg2 reverseOrder:(bool)arg3 withSampleIndex:(bool)arg4 block:(id /* block */)arg5;
- (id)execTimestamp;
- (id)exitTimestamp;
- (id)firstTaskStateOnOrAfterTime:(id)arg1 withSampleIndex:(bool)arg2;
- (unsigned long long)hash;
- (unsigned long long)indexOfFirstTaskStateOnOrAfterTime:(id)arg1 withSampleIndex:(bool)arg2;
- (unsigned long long)indexOfLastTaskStateOnOrBeforeTime:(id)arg1 withSampleIndex:(bool)arg2;
- (id)initWithKCDataDeltaTask:(const struct task_delta_snapshot_v2 { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; }*)arg1 loadInfos:(const struct dyld_uuid_info_64 { unsigned long long x1; unsigned char x2[16]; }*)arg2 numLoadInfos:(unsigned int)arg3 textExecLoadInfos:(const struct dyld_uuid_info_64 { unsigned long long x1; unsigned char x2[16]; }*)arg4 numTextExecLoadInfos:(unsigned int)arg5 pid:(int)arg6 sharedCache:(id)arg7;
- (id)initWithKCDataTask:(const struct task_snapshot_v2 { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; int x15; BOOL x16[32]; }*)arg1 loadInfos:(const struct dyld_uuid_info_64 { unsigned long long x1; unsigned char x2[16]; }*)arg2 numLoadInfos:(unsigned int)arg3 textExecLoadInfos:(const struct dyld_uuid_info_64 { unsigned long long x1; unsigned char x2[16]; }*)arg4 numTextExecLoadInfos:(unsigned int)arg5 architecture:(struct _CSArchitecture { int x1; int x2; })arg6 sharedCache:(id)arg7;
- (id)initWithPid:(int)arg1 andUniquePid:(unsigned long long)arg2 andName:(id)arg3 sharedCache:(id)arg4;
- (id)initWithStackshotTaskV1:(const struct task_snapshot { unsigned int x1; int x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned char x6[16]; unsigned long long x7; unsigned int x8; int x9; int x10; int x11; int x12; int x13; unsigned int x14; unsigned long long x15; unsigned long long x16; BOOL x17[17]; unsigned int x18; unsigned int x19; unsigned int x20; unsigned long long x21; unsigned long long x22; unsigned long long x23; unsigned long long x24; unsigned long long x25[4]; unsigned long long x26[4]; unsigned long long x27; unsigned long long x28; unsigned long long x29; unsigned long long x30; unsigned long long x31; unsigned long long x32; unsigned long long x33; unsigned long long x34; unsigned int x35; }*)arg1 loadInfos:(const struct dyld_uuid_info_64 { unsigned long long x1; unsigned char x2[16]; }*)arg2 numLoadInfos:(unsigned int)arg3 sharedCache:(id)arg4;
- (bool)isBeta;
- (bool)isEqual:(id)arg1;
- (bool)isTranslocated;
- (bool)isUnresponsive;
- (id)lastTaskStateOnOrBeforeTime:(id)arg1 withSampleIndex:(bool)arg2;
- (id)mainBinary;
- (id)mainBinaryLoadInfo;
- (id)mainBinaryPath;
- (id)mainThread;
- (id)name;
- (int)pid;
- (void)populateReferencesUsingBuffer:(const void*)arg1 bufferLength:(unsigned long long)arg2 andDeserializationDictionary:(id)arg3 andDataBufferDictionary:(id)arg4;
- (int)ppid;
- (int)rpid;
- (unsigned long long)sampleCountInTimestampRangeStart:(id)arg1 end:(id)arg2;
- (void)setMainBinaryPath:(id)arg1;
- (id)sharedCache;
- (unsigned long long)sizeInBytesForSerializedVersion;
- (id)startTimestamp;
- (id)taskStates;
- (id)threads;
- (double)timeOfLastResponse;
- (unsigned int)uid;
- (unsigned long long)uniquePid;
- (bool)usesSuddenTermination;
- (id)vendorID;

@end
