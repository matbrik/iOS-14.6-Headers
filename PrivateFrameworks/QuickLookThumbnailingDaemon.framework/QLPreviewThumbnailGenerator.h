/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/QuickLookThumbnailingDaemon.framework/QuickLookThumbnailingDaemon
 */

@interface QLPreviewThumbnailGenerator : NSObject {
    bool  _addDecorations;
    unsigned long long  _badgeType;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _contentRect;
    NSDictionary * _externalThumbnailGeneratorData;
    int  _flavor;
    NSObject<OS_dispatch_queue> * _generationQueue;
    int  _interpolationQuality;
    QLThumbnailItem * _item;
    NSData * _jpegRepresentation;
    double  _minSize;
    bool  _resultHasIconModeApplied;
    bool  _resultIsLowQuality;
    unsigned long long  _sandboxExtension;
    double  _scale;
    struct CGSize { 
        double width; 
        double height; 
    }  _size;
    int  _status;
    QLPlatformImage * _thumbnailImage;
    bool  _wantsBaseline;
    bool  _wantsJPEGRepresentationInstead;
    bool  _wantsLowQuality;
    QLThumbnailMetadata * generatedProperties;
}

@property bool addDecorations;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentRect;
@property (retain) NSDictionary *externalThumbnailGeneratorData;
@property int flavor;
@property (retain) QLThumbnailMetadata *generatedProperties;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *generationQueue;
@property int interpolationQuality;
@property (retain) QLThumbnailItem *item;
@property (readonly) NSData *jpegRepresentation;
@property double minSize;
@property bool resultHasIconModeApplied;
@property bool resultIsLowQuality;
@property unsigned long long sandboxExtension;
@property double scale;
@property int status;
@property (retain) QLPlatformImage *thumbnailImage;
@property bool wantsBaseline;
@property bool wantsJPEGRepresentationInstead;
@property bool wantsLowQuality;

+ (id)_textDocumentTypeFromUTI:(id)arg1;
+ (bool)canGenerateThumbnailForURL:(id)arg1;
+ (double)cornerRadiusForSize:(struct CGSize { double x1; double x2; })arg1;
+ (id)generateIconDataFromThumbnailData:(id)arg1 inputFormat:(id)arg2 outputFormat:(id*)arg3 outputContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4 desiredSize:(struct CGSize { double x1; double x2; })arg5 desiredScale:(double)arg6 desiredFlavor:(int)arg7 wantsLowQuality:(bool)arg8 iconVariant:(long long)arg9;
+ (id)generatorForThumbnailItem:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 minSize:(double)arg3 scale:(double)arg4;
+ (id)generatorForThumbnailItem:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 scale:(double)arg3;
+ (id)generatorForURL:(id)arg1 maxSize:(struct CGSize { double x1; double x2; })arg2 minSize:(double)arg3 scale:(double)arg4 lowQuality:(bool)arg5 decorations:(bool)arg6 wantsBaseline:(bool)arg7;
+ (id)generatorForURL:(id)arg1 maxSize:(struct CGSize { double x1; double x2; })arg2 scale:(double)arg3 lowQuality:(bool)arg4 decorations:(bool)arg5 wantsBaseline:(bool)arg6;
+ (id)mutableAttributedStringForThumbnailWithData:(id)arg1 uti:(id)arg2 encoding:(unsigned int)arg3 documentAttributes:(id*)arg4;
+ (id)mutableAttributedStringForThumbnailWithURL:(id)arg1 documentAttributes:(id*)arg2;
+ (id)readingOptionsFromUTI:(id)arg1 encoding:(unsigned int)arg2;

- (void).cxx_destruct;
- (struct CGContext { }*)_beginContext;
- (struct CGContext { }*)_beginContextWithSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGContext { }*)_beginContextWithSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2;
- (struct CGImage { }*)_createThumbnailForIWorkFile;
- (struct CGImage { }*)_createThumbnailForImage;
- (struct CGImage { }*)_createThumbnailForImageSource:(struct CGImageSource { }*)arg1 contentTypeIdentifier:(id)arg2;
- (struct CGImage { }*)_createThumbnailForLivePhoto;
- (struct CGImage { }*)_createThumbnailForMovie;
- (struct CGImage { }*)_createThumbnailForPDF;
- (struct CGImage { }*)_createThumbnailForText;
- (struct CGImage { }*)_drawRTFThumbnailFromAttributedString:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 context:(struct CGContext { }*)arg3;
- (struct CGImage { }*)_drawTextThumbnailFromAttributedString:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 context:(struct CGContext { }*)arg3;
- (void)_generateThumbnailFromThirdPartyExtensionAndReplyWith:(id /* block */)arg1;
- (void)_generateThumbnailWithWillStartBlock:(id /* block */)arg1 completionHandler:(id /* block */)arg2;
- (double)_minimumDimensionForPDFPage:(struct CGPDFPage { }*)arg1 requestThumbnailSize:(struct CGSize { double x1; double x2; })arg2 scale:(double)arg3;
- (struct CGSize { double x1; double x2; })_pixelSize;
- (void)_replyWithImage:(id)arg1 error:(id)arg2 completionHandler:(id /* block */)arg3;
- (bool)addDecorations;
- (void)cancel;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentRect;
- (id)externalThumbnailGeneratorData;
- (int)flavor;
- (void)generateWithCompletionBlock:(id /* block */)arg1;
- (void)generateWithWillStartBlock:(id /* block */)arg1 completionBlock:(id /* block */)arg2;
- (id)generatedProperties;
- (id)generationQueue;
- (id)initWithThumbnailItem:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 minSize:(double)arg3 scale:(double)arg4 decorations:(bool)arg5;
- (id)initWithThumbnailItem:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 minSize:(double)arg3 scale:(double)arg4 lowQuality:(bool)arg5 wantsBaseline:(bool)arg6 decorations:(bool)arg7 badgeType:(unsigned long long)arg8 interpolationQuality:(int)arg9;
- (id)initWithThumbnailItem:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 minSize:(double)arg3 scale:(double)arg4 lowQuality:(bool)arg5 wantsBaseline:(bool)arg6 decorations:(bool)arg7 badgeType:(unsigned long long)arg8 interpolationQuality:(int)arg9 externalThumbnailGeneratorData:(id)arg10;
- (int)interpolationQuality;
- (id)item;
- (id)jpegRepresentation;
- (double)minSize;
- (bool)resultHasIconModeApplied;
- (bool)resultIsLowQuality;
- (unsigned long long)sandboxExtension;
- (double)scale;
- (void)setAddDecorations:(bool)arg1;
- (void)setContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setExternalThumbnailGeneratorData:(id)arg1;
- (void)setFlavor:(int)arg1;
- (void)setGeneratedProperties:(id)arg1;
- (void)setGenerationQueue:(id)arg1;
- (void)setInterpolationQuality:(int)arg1;
- (void)setItem:(id)arg1;
- (void)setMinSize:(double)arg1;
- (void)setResultHasIconModeApplied:(bool)arg1;
- (void)setResultIsLowQuality:(bool)arg1;
- (void)setSandboxExtension:(unsigned long long)arg1;
- (void)setScale:(double)arg1;
- (void)setStatus:(int)arg1;
- (void)setThumbnailImage:(id)arg1;
- (void)setWantsBaseline:(bool)arg1;
- (void)setWantsJPEGRepresentationInstead:(bool)arg1;
- (void)setWantsLowQuality:(bool)arg1;
- (int)status;
- (id)thumbnailImage;
- (bool)wantsBaseline;
- (bool)wantsJPEGRepresentationInstead;
- (bool)wantsLowQuality;

@end
