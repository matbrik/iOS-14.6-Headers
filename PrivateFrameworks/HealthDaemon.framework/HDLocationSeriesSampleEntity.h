/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
 */

@interface HDLocationSeriesSampleEntity : HDSeriesSampleEntity <HDSeriesEntity>

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (bool)_deleteHFDSeriesIfFoundForPersistentID:(id)arg1 database:(id)arg2 error:(id*)arg3;
+ (bool)_insertCodableSeriesDataFromObject:(id)arg1 persistentID:(id)arg2 database:(id)arg3 error:(id*)arg4;
+ (id)_routeSampleWithID:(id)arg1 canBeUnfrozen:(bool)arg2 profile:(id)arg3 error:(id*)arg4;
+ (bool)_updateFrozenEntityToMatchReplacedUnfrozenEntity:(id)arg1 unfrozenSeriesUUID:(id)arg2 unfrozenSeriesHFDKey:(long long)arg3 database:(id)arg4 error:(id*)arg5;
+ (bool)addCodableObject:(id)arg1 toCollection:(id)arg2;
+ (id)codableObjectsFromObjectCollection:(id)arg1;
+ (id)createTableSQL;
+ (id)entityEncoderForProfile:(id)arg1 transaction:(id)arg2 purpose:(long long)arg3 encodingOptions:(id)arg4 authorizationFilter:(id /* block */)arg5;
+ (bool)enumerateLocationDataInDatabase:(id)arg1 HFDKey:(id)arg2 error:(id*)arg3 handler:(id /* block */)arg4;
+ (id)hasSeriesDataForHFDKey:(id)arg1 transaction:(id)arg2 error:(id*)arg3;
+ (id)insertDataObject:(id)arg1 withProvenance:(id)arg2 inDatabase:(id)arg3 persistentID:(id)arg4 error:(id*)arg5;
+ (bool)insertLocationData:(id)arg1 seriesIdentifier:(id)arg2 profile:(id)arg3 error:(id*)arg4;
+ (bool)isBackedByTable;
+ (bool)isConcreteEntity;
+ (id)mergeDataObject:(id)arg1 provenance:(id)arg2 profile:(id)arg3 transaction:(id)arg4 error:(id*)arg5 insertHandler:(id /* block */)arg6;
+ (bool)migrateDataFromDataStore:(const struct DataStore { struct BlockAccessFile { struct TransactionalFile { struct shared_ptr<health::VirtualFilesystem> { struct VirtualFilesystem {} *x_1_3_1; struct __shared_weak_count {} *x_1_3_2; } x_1_2_1; struct WriteAheadLog { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_5_1; BOOL x_1_5_2[56]; } x_1_4_1; } x_2_3_1; struct condition_variable { struct _opaque_pthread_cond_t { long long x_1_5_1; BOOL x_1_5_2[40]; } x_2_4_1; } x_2_3_2; struct shared_ptr<health::VirtualFilesystem> { struct VirtualFilesystem {} *x_3_4_1; struct __shared_weak_count {} *x_3_4_2; } x_2_3_3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_8_1; unsigned long long x_1_8_2; unsigned long long x_1_8_3; } x_1_7_1; struct __short { BOOL x_2_8_1[23]; struct { unsigned char x_2_9_1; } x_2_8_2; } x_1_7_2; struct __raw { unsigned long long x_3_8_1[3]; } x_1_7_3; } x_1_6_1; } x_1_5_1; } x_4_4_1; } x_2_3_4; struct shared_ptr<health::VirtualFile> { struct VirtualFile {} *x_5_4_1; struct __shared_weak_count {} *x_5_4_2; } x_2_3_5; } x_1_2_2; } x_1_1_1; } x1; }*)arg1 to:(struct DataStore { struct BlockAccessFile { struct TransactionalFile { struct shared_ptr<health::VirtualFilesystem> { struct VirtualFilesystem {} *x_1_3_1; struct __shared_weak_count {} *x_1_3_2; } x_1_2_1; struct WriteAheadLog { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_5_1; BOOL x_1_5_2[56]; } x_1_4_1; } x_2_3_1; struct condition_variable { struct _opaque_pthread_cond_t { long long x_1_5_1; BOOL x_1_5_2[40]; } x_2_4_1; } x_2_3_2; struct shared_ptr<health::VirtualFilesystem> { struct VirtualFilesystem {} *x_3_4_1; struct __shared_weak_count {} *x_3_4_2; } x_2_3_3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_8_1; unsigned long long x_1_8_2; unsigned long long x_1_8_3; } x_1_7_1; struct __short { BOOL x_2_8_1[23]; struct { unsigned char x_2_9_1; } x_2_8_2; } x_1_7_2; struct __raw { unsigned long long x_3_8_1[3]; } x_1_7_3; } x_1_6_1; } x_1_5_1; } x_4_4_1; } x_2_3_4; struct shared_ptr<health::VirtualFile> { struct VirtualFile {} *x_5_4_1; struct __shared_weak_count {} *x_5_4_2; } x_2_3_5; } x_1_2_2; } x_1_1_1; } x1; }*)arg2 transaction:(id)arg3 recoveryAnalytics:(id)arg4 error:(id*)arg5;
+ (bool)participatesInInsertion;
+ (bool)performPostJournalMergeCleanupWithTransaction:(id)arg1 profile:(id)arg2 error:(id*)arg3;
+ (bool)supportsObjectMerging;

- (id)_frozenUUIDForUnfrozenSeriesSample:(id)arg1 HFDKey:(long long)arg2 frozenStartTime:(double)arg3 frozenEndTime:(double)arg4 frozenCount:(long long)arg5 profile:(id)arg6 transaction:(id)arg7 error:(id*)arg8;
- (id)dateIntervalForSeriesInDatabase:(id)arg1 error:(id*)arg2;
- (bool)deleteFromDatabase:(id)arg1 error:(id*)arg2;
- (bool)enumerateLocationDataFromTimestamp:(double)arg1 toTimestamp:(double)arg2 database:(id)arg3 error:(id*)arg4 handler:(id /* block */)arg5;
- (bool)enumerateLocationDataInDatabase:(id)arg1 error:(id*)arg2 handler:(id /* block */)arg3;
- (id)freezeWithTransaction:(id)arg1 profile:(id)arg2 error:(id*)arg3;
- (bool)insertLocationData:(id)arg1 database:(id)arg2 error:(id*)arg3;
- (id)sampleCountForSeriesInDatabase:(id)arg1 error:(id*)arg2;
- (void)willDeleteFromDatabase:(id)arg1;

@end
