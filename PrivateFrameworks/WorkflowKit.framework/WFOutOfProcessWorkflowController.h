/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/WorkflowKit.framework/WorkflowKit
 */

@interface WFOutOfProcessWorkflowController : NSObject <WFOutOfProcessWorkflowControllerHost, WFTimerHandler> {
    WFActionUserInterfaceListener * _actionInterfaceListener;
    WFDialogAttribution * _currentDialogAttribution;
    NSString * _currentWorkflowName;
    <WFOutOfProcessWorkflowControllerDelegate> * _delegate;
    long long  _environment;
    NSExtension * _extension;
    NSUUID * _extensionRequestIdentifier;
    bool  _isPersonalAutomation;
    long long  _presentationMode;
    WFWorkflowRunningContext * _runningContext;
    long long  _state;
    WFTimer * _timer;
    <WFUserInterfaceHost> * _userInterfaceHost;
    WFWorkflowReference * _workflowReference;
}

@property (nonatomic, retain) WFActionUserInterfaceListener *actionInterfaceListener;
@property (nonatomic, copy) WFDialogAttribution *currentDialogAttribution;
@property (nonatomic, copy) NSString *currentWorkflowName;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <WFOutOfProcessWorkflowControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) long long environment;
@property (nonatomic, retain) NSExtension *extension;
@property (nonatomic, retain) NSUUID *extensionRequestIdentifier;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isPersonalAutomation;
@property (nonatomic) long long presentationMode;
@property (getter=isRunning, nonatomic, readonly) bool running;
@property (nonatomic, readonly, copy) WFWorkflowRunningContext *runningContext;
@property (nonatomic) long long state;
@property (readonly) Class superclass;
@property (nonatomic, retain) WFTimer *timer;
@property (nonatomic, retain) <WFUserInterfaceHost> *userInterfaceHost;
@property (nonatomic, retain) WFWorkflowReference *workflowReference;

- (void).cxx_destruct;
- (id)actionInterfaceListener;
- (void)createSleepWorkflow:(id)arg1 completion:(id /* block */)arg2;
- (id)currentDialogAttribution;
- (id)currentWorkflowName;
- (void)dealloc;
- (id)delegate;
- (long long)environment;
- (id)extension;
- (id)extensionContext;
- (id)extensionInterface;
- (id)extensionRequestIdentifier;
- (void)findExtensionInterface:(id /* block */)arg1 error:(out id*)arg2;
- (void)handleIncomingFileForRemoteExecutionWithURL:(id)arg1 withIdentifier:(id)arg2;
- (void)handleXPCConnectionInterruption;
- (id)initWithEnvironment:(long long)arg1 runningContext:(id)arg2 presentationMode:(long long)arg3;
- (bool)isPersonalAutomation;
- (bool)isRunning;
- (void)pauseWorkflowAndWriteStateToDisk;
- (void)populateSleepWorkflowsFromWorkflowReferences:(id)arg1 completion:(id /* block */)arg2;
- (long long)presentationMode;
- (void)reportFinishToDelegateWithError:(id)arg1 cancelled:(bool)arg2 reference:(id)arg3 dialogAttribution:(id)arg4;
- (void)reset;
- (bool)resumeRunningWithError:(out id*)arg1;
- (bool)runActionWithRunRequestData:(id)arg1 error:(out id*)arg2;
- (bool)runWorkflowWithRequest:(id)arg1 error:(out id*)arg2;
- (id)runningContext;
- (void)setActionInterfaceListener:(id)arg1;
- (void)setCurrentDialogAttribution:(id)arg1;
- (void)setCurrentWorkflowName:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setExtension:(id)arg1;
- (void)setExtensionRequestIdentifier:(id)arg1;
- (void)setIsPersonalAutomation:(bool)arg1;
- (void)setPresentationMode:(long long)arg1;
- (void)setState:(long long)arg1;
- (void)setTimer:(id)arg1;
- (void)setUserInterfaceHost:(id)arg1;
- (void)setWorkflowReference:(id)arg1;
- (long long)state;
- (void)stop;
- (void)stopExtension;
- (id)timer;
- (void)timerDidFire:(id)arg1;
- (bool)timerShouldStart:(id)arg1;
- (id)userInterfaceHost;
- (void)workflowDidFinishRunningWithError:(id)arg1 cancelled:(bool)arg2 reference:(id)arg3;
- (void)workflowDidStartFromWorkflowReference:(id)arg1 attribution:(id)arg2;
- (id)workflowReference;

@end
