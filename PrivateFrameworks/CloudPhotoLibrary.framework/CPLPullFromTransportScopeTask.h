/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/CloudPhotoLibrary
 */

@interface CPLPullFromTransportScopeTask : CPLEngineScopedTask {
    Class  _currentQueryClass;
    CPLScopeChange * _currentScopeChange;
    bool  _didNotifySchedulerPullQueueIsFullOnce;
    <CPLEngineTransportDownloadBatchTask> * _downloadTask;
    <CPLEngineTransportGetCurrentSyncAnchorTask> * _fetchInitialSyncAnchorTask;
    bool  _hasCachedTotalAssetCountForScope;
    bool  _hasFetchedInitialSyncAnchor;
    bool  _ignoreNewBatches;
    CPLScopeChange * _initialScopeChange;
    NSData * _initialSyncAnchor;
    bool  _needsToNotifySchedulerPullQueueIsFull;
    NSObject<OS_dispatch_queue> * _notifyQueue;
    <CPLEngineTransportQueryTask> * _queryTask;
    NSObject<OS_dispatch_queue> * _queue;
    unsigned long long  _rewindFeatureVersion;
    NSData * _rewindSyncAnchor;
    bool  _shouldStoreInitialSyncAnchor;
    long long  _taskItem;
    unsigned long long  _totalAssetCountForScope;
    CPLEngineTransport * _transport;
    <CPLEngineTransportGroup> * _transportGroup;
    bool  _useCourtesyMingling;
    CPLFeatureVersionHistory * _versionHistory;
}

- (void).cxx_destruct;
- (void)_cancelAllTasks;
- (void)_checkServerFeatureVersionWithCompletionHandler:(id /* block */)arg1;
- (void)_extractAndMingleAssetsIfPossibleFromBatch:(id)arg1 inTransaction:(id)arg2;
- (void)_extractAndMinglePersonsIfPossibleFromBatch:(id)arg1 inTransaction:(id)arg2;
- (void)_fetchInitialSyncAnchor;
- (void)_handleNewBatchFromChanges:(id)arg1 newSyncAnchor:(id)arg2 inTransaction:(id)arg3;
- (void)_handleNewBatchFromChanges:(id)arg1 updatedFlags:(id)arg2 newSyncAnchor:(id)arg3;
- (void)_handleNewBatchFromQuery:(id)arg1 newCursor:(id)arg2 inTransaction:(id)arg3;
- (void)_handleNewBatchFromQuery:(id)arg1 queryClass:(Class)arg2 newCursor:(id)arg3;
- (void)_launch;
- (void)_launchFetchChangesFromSyncAnchor:(id)arg1;
- (void)_launchNextQueryTask;
- (void)_launchPullTasksAndDisableQueries:(bool)arg1;
- (void)_launchQueryForClass:(Class)arg1 cursor:(id)arg2;
- (void)_notifySchedulerPullQueueIsFull;
- (void)_notifySchedulerPullQueueIsFullNowIfNecessary;
- (void)_reallyNotifySchedulerPullQueueIsFull;
- (void)_storeInitialSyncAnchorIfNecessaryInTransaction:(id)arg1;
- (unsigned long long)_totalAssetCountForScope;
- (void)_updateLastFeatureVersionAndRelaunchFetchChangesFromSyncAnchor:(id)arg1;
- (void)cancel;
- (bool)checkScopeIsValidInTransaction:(id)arg1;
- (id)initWithEngineLibrary:(id)arg1 session:(id)arg2 clientCacheIdentifier:(id)arg3 scope:(id)arg4 transportScope:(id)arg5;
- (void)launch;
- (void)taskDidFinishWithError:(id)arg1;
- (id)taskIdentifier;

@end
