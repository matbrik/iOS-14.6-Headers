/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoordinationCore.framework/CoordinationCore
 */

@interface COMeshController : NSObject <COMeshNodeDelegate, COMeshNodeStateTrackerDelegate> {
    NSOrderedSet * _addOns;
    COBallot * _ballot;
    NSDictionary * _commandHandlers;
    NSObject<OS_dispatch_queue> * _dispatchQueue;
    unsigned long long  _electionEnd;
    unsigned long long  _electionPrevious;
    unsigned long long  _electionStart;
    unsigned long long  _generation;
    NSString * _label;
    COConstituent * _leader;
    COMeshLocalNode * _listener;
    COConstituent * _me;
    NSString * _meshName;
    NSDictionary * _notificationHandlers;
    bool  _pendingPing;
    NSArray * _queuedCommands;
    id /* block */  _recorder;
    NSDictionary * _requestHandlers;
    NSArray * _sentCommands;
    unsigned long long  _state;
    NSDictionary * _trackers;
}

@property (nonatomic, copy) NSOrderedSet *addOns;
@property (nonatomic, copy) COBallot *ballot;
@property (nonatomic, copy) NSDictionary *commandHandlers;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (nonatomic) unsigned long long electionEnd;
@property (nonatomic) unsigned long long electionPrevious;
@property (nonatomic) unsigned long long electionStart;
@property (nonatomic) unsigned long long generation;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) NSString *label;
@property (nonatomic, retain) COConstituent *leader;
@property (nonatomic, retain) COMeshLocalNode *listener;
@property (nonatomic, readonly) COConstituent *me;
@property (nonatomic, copy) NSString *meshName;
@property (nonatomic, readonly, copy) NSArray *nodes;
@property (nonatomic, copy) NSDictionary *notificationHandlers;
@property (getter=hasPendingPing, nonatomic) bool pendingPing;
@property (nonatomic, copy) NSArray *queuedCommands;
@property (nonatomic, copy) id /* block */ recorder;
@property (nonatomic, copy) NSDictionary *requestHandlers;
@property (nonatomic, copy) NSArray *sentCommands;
@property (nonatomic, readonly) unsigned long long state;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSDictionary *trackers;

- (void).cxx_destruct;
- (id)_acceptResponseWithBallot:(id)arg1 generation:(unsigned long long)arg2;
- (id)_ballotResponseWithBallot:(id)arg1 generation:(unsigned long long)arg2;
- (id)_currentBallotMergedWithBallot:(id)arg1;
- (id)_electionRequestWithBallot:(id)arg1 generation:(unsigned long long)arg2;
- (void)_enqueueCommand:(id)arg1;
- (void)_handleAcceptResponse:(id)arg1 onNode:(id)arg2;
- (void)_handleBallotResponse:(id)arg1 onNode:(id)arg2;
- (void)_handleElectionRequest:(id)arg1 onNode:(id)arg2 responseCallBack:(id /* block */)arg3;
- (void)_handleVoteRequest:(id)arg1 onNode:(id)arg2 responseCallBack:(id /* block */)arg3;
- (bool)_isCurrentElectionVariant:(long long)arg1;
- (bool)_isElectionComplete;
- (void)_performElectionGeneration:(unsigned long long)arg1 source:(id)arg2;
- (void)_performInvalidationOfNode:(id)arg1 error:(id)arg2 eventProvider:(id /* block */)arg3;
- (void)_pingLeader;
- (void)_processQueuedCommands;
- (void)_removeSentCommand:(id)arg1 fromNode:(id)arg2 withResponse:(id)arg3 error:(id)arg4;
- (void)_transitionToPostElection;
- (id)_voteRequestWithBallot:(id)arg1 generation:(unsigned long long)arg2;
- (bool)addAddOn:(id)arg1;
- (id)addOns;
- (id)ballot;
- (void)broadcastRequest:(id)arg1 sentRequestCallback:(id /* block */)arg2;
- (void)broadcastRequest:(id)arg1 sentRequestCallback:(id /* block */)arg2 recipientsCallback:(id /* block */)arg3;
- (id)commandHandlers;
- (void)degisterHandlerForRequestClass:(Class)arg1;
- (void)deregisterHandlerForCommandClass:(Class)arg1;
- (void)deregisterHandlerForNotificationClass:(Class)arg1;
- (id)description;
- (void)didActivateNode:(id)arg1;
- (void)didAddNode:(id)arg1;
- (void)didInvalidateNode:(id)arg1;
- (void)didRemoveNode:(id)arg1;
- (void)didTransitionToState:(unsigned long long)arg1;
- (id)dispatchQueue;
- (unsigned long long)electionEnd;
- (unsigned long long)electionPrevious;
- (unsigned long long)electionStart;
- (unsigned long long)generation;
- (bool)hasPendingPing;
- (id)init;
- (id)initWithConstituentType:(unsigned long long)arg1;
- (id)label;
- (id)leader;
- (id)listener;
- (id)me;
- (id)meshName;
- (void)node:(id)arg1 didReceiveCommand:(id)arg2;
- (void)node:(id)arg1 didReceiveError:(id)arg2 forCommand:(id)arg3;
- (void)node:(id)arg1 didReceiveRequest:(id)arg2 responseCallBack:(id /* block */)arg3;
- (void)node:(id)arg1 didReceiveResponse:(id)arg2 toRequest:(id)arg3;
- (void)node:(id)arg1 didSendCommand:(id)arg2;
- (void)nodeBecameAvailable:(id)arg1;
- (id)nodeForConstituent:(id)arg1;
- (id)nodes;
- (id)notificationHandlers;
- (id)queuedCommands;
- (id /* block */)recorder;
- (void)registerHandler:(id /* block */)arg1 forCommandClass:(Class)arg2;
- (void)registerHandler:(id /* block */)arg1 forNotificationClass:(Class)arg2;
- (void)registerHandler:(id /* block */)arg1 forRequestClass:(Class)arg2;
- (bool)removeAddOn:(id)arg1;
- (id)requestHandlers;
- (void)sendCommand:(id)arg1 sentCommandCallback:(id /* block */)arg2;
- (void)sendNotification:(id)arg1;
- (void)sendRequest:(id)arg1 sentRequestCallback:(id /* block */)arg2;
- (id)sentCommands;
- (void)setAddOns:(id)arg1;
- (void)setBallot:(id)arg1;
- (void)setCommandHandlers:(id)arg1;
- (void)setDispatchQueue:(id)arg1;
- (void)setElectionEnd:(unsigned long long)arg1;
- (void)setElectionPrevious:(unsigned long long)arg1;
- (void)setElectionStart:(unsigned long long)arg1;
- (void)setGeneration:(unsigned long long)arg1;
- (void)setLabel:(id)arg1;
- (void)setLeader:(id)arg1;
- (void)setListener:(id)arg1;
- (void)setMeshName:(id)arg1;
- (void)setNotificationHandlers:(id)arg1;
- (void)setPendingPing:(bool)arg1;
- (void)setQueuedCommands:(id)arg1;
- (void)setRecorder:(id /* block */)arg1;
- (void)setRequestHandlers:(id)arg1;
- (void)setSentCommands:(id)arg1;
- (void)setTrackers:(id)arg1;
- (void)start;
- (unsigned long long)state;
- (void)stop;
- (id)trackers;
- (void)willActivateNode:(id)arg1;
- (void)willInvalidateNode:(id)arg1 error:(id)arg2;
- (void)willTransitionToState:(unsigned long long)arg1;

@end
