/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CMCapture.framework/CMCapture
 */

@interface BWFigCaptureDeviceVendor : NSObject {
    NSObject<OS_os_transaction> * _activeForClientAssertion;
    NSMutableDictionary * _afDriverShortStatisticsByPortType;
    NSDictionary * _cameraPoseMatricesByPortType;
    NSMutableArray * _controlledStreams;
    BWFigCaptureDevice * _device;
    BWFigCaptureDeviceClient * _deviceClient;
    double  _deviceCloseTimeoutSeconds;
    NSObject<OS_dispatch_source> * _deviceCloseTimer;
    int (* _deviceCreateFunction;
    NSObject<OS_dispatch_queue> * _deviceQueue;
    int  _deviceUsageCount;
    NSObject<OS_dispatch_queue> * _notificationQueue;
    NSMutableSet * _portTypesToCheckForAFDriverShortStatistics;
    NSMutableSet * _portTypesToCheckForToFAFEstimator;
    NSMutableArray * _registeredDeviceClients;
    NSMutableArray * _streamsControlledByOtherClients;
    NSMutableDictionary * _tofAFEstimatorResultsByPortType;
    NSMutableArray * _victimizedDeviceClients;
}

@property (readonly) int activeDeviceClientPriority;

+ (void)initialize;
+ (id)sharedCaptureDeviceVendor;
+ (bool)videoCaptureDeviceFirmwareIsLoaded;

- (id)_copyStreamWithPosition:(int)arg1 deviceType:(int)arg2 forDevice:(id)arg3 requestControl:(bool)arg4 error:(int*)arg5;
- (id)_copyStreamsWithPositions:(id)arg1 deviceTypes:(id)arg2 forDevice:(id)arg3 requestControl:(bool)arg4 error:(int*)arg5;
- (int)_createDevice:(const char *)arg1 clientPID:(int)arg2;
- (void)_deviceAvailabilityChangedForClient:(id)arg1 available:(bool)arg2 postNotification:(bool)arg3 reason:(int)arg4;
- (void)_dumpInventory;
- (void)_handleDeviceNoLongerAvailable:(struct OpaqueFigCaptureDevice { }*)arg1;
- (void)_handleDeviceUnrecoverableError:(int)arg1 fromDevice:(struct OpaqueFigCaptureDevice { }*)arg2;
- (void)_handleErrorForGlobalDevice;
- (void)_handleStreamControlTakenByAnotherClientNotification:(struct OpaqueFigCaptureStream { }*)arg1;
- (void)_handleStreamFrameReceiveTimeoutNotification:(struct OpaqueFigCaptureStream { }*)arg1;
- (void)_handleStreamRelinquishedByAnotherClientNotification:(struct OpaqueFigCaptureStream { }*)arg1;
- (void)_invalidateAndReleaseDevice;
- (void)_logAFDriverShortStatisticsToCoreAnalytics;
- (void)_logToFAFEstimatorResultsToCoreAnalytics;
- (id)_moveDeviceClientToVictimizedList;
- (void)_performBlockOnDeviceQueue:(id /* block */)arg1;
- (void)_performBlockOnDeviceQueueSynchronously:(id /* block */)arg1;
- (id)_popLatestVictimizedDeviceClient;
- (void)_registerForDeviceNotifications:(id)arg1;
- (void)_registerForStreamNotifications:(id)arg1;
- (id)_registeredDeviceClientWithID:(int)arg1;
- (void)_relinquishControlOfStreams;
- (void)_removeDeviceClient;
- (void)_removeVictimizedDeviceClientWithClientID:(int)arg1;
- (int)_requestControlOfStreams:(id)arg1 device:(id)arg2;
- (void)_resetDeviceCloseTimer;
- (void)_setupDeviceCloseTimer;
- (void)_unregisterForDeviceNotifications:(id)arg1;
- (void)_unregisterFromStreamNotifications:(id)arg1;
- (void)_updateAFDriverShortStatisticsForStream:(id)arg1;
- (void)_updateTofAFEstimatorResultsForStream:(id)arg1;
- (int)activeDeviceClientPriority;
- (bool)activeDeviceEquals:(id)arg1;
- (id)cameraPoseMatrixForStreamWithPosition:(int)arg1 deviceType:(int)arg2;
- (id)copyDeviceForClient:(int)arg1 error:(int*)arg2;
- (id)copyStreamForFlashlightWithPosition:(int)arg1 deviceType:(int)arg2 forDevice:(id)arg3;
- (id)copyStreamWithPosition:(int)arg1 deviceType:(int)arg2 forDevice:(id)arg3 error:(int*)arg4;
- (id)copyStreamsWithPositions:(id)arg1 deviceTypes:(id)arg2 forDevice:(id)arg3 error:(int*)arg4;
- (id)copyStreamsWithUniqueIDs:(id)arg1 forDevice:(id)arg2 error:(int*)arg3;
- (void)dealloc;
- (id)initWithDeviceCreateFunction:(int (*)arg1;
- (void)invalidateVideoDevice:(id)arg1 forPID:(int)arg2;
- (void)prewarmDefaultVideoDeviceForPID:(int)arg1 completionHandler:(id /* block */)arg2;
- (int)registerClientWithPID:(int)arg1 clientDescription:(id)arg2 clientPriority:(int)arg3 canStealFromClientsWithSamePriority:(bool)arg4 deviceSharingWithOtherClientsAllowed:(bool)arg5 deviceAvailabilityChangedHandler:(id /* block */)arg6;
- (void)resumeSystemPressuredDevice;
- (void)shutDownSystemPressuredDevice:(id)arg1;
- (bool)streamsInUseForDevice:(id)arg1;
- (float)structuredLightProjectorStandbyTemperatureWithError:(int*)arg1;
- (void)takeBackDevice:(id)arg1 forClient:(int)arg2 informClientWhenDeviceAvailableAgain:(bool)arg3;
- (void)takeBackStreams:(id)arg1 device:(id)arg2;
- (void)unregisterCallbacksForClient:(int)arg1;

@end
