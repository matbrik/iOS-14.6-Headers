/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Sleep.framework/Sleep
 */

@interface HKSPSleepStore : NSObject <HKSPXPCConnectionProviderDelegate> {
    HKSPAnalyticsManager * _analyticsManager;
    <NAScheduler> * _callbackScheduler;
    HKSPXPCConnectionProvider * _connectionProvider;
    id /* block */  _currentDateProvider;
    NSString * _identifier;
    HKSPObserverSet * _observers;
    <HKSPExecutor> * _reconnectExecutor;
    HKSleepHealthStore * _sleepHealthStore;
    HKSPSleepStoreCache * _sleepStoreCache;
    HKSPSleepStoreExportedObject * _sleepStoreExportedObject;
    <HKSPSyncAnchor> * _syncAnchor;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _syncLock;
}

@property (nonatomic, readonly) HKSPAnalyticsManager *analyticsManager;
@property (nonatomic, readonly) <NAScheduler> *callbackScheduler;
@property (nonatomic, readonly) HKSPXPCConnectionProvider *connectionProvider;
@property (nonatomic, readonly, copy) id /* block */ currentDateProvider;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) HKHealthStore *healthStore;
@property (nonatomic, readonly, copy) NSString *identifier;
@property (nonatomic, readonly) HKSPObserverSet *observers;
@property (nonatomic, readonly) <HKSPExecutor> *reconnectExecutor;
@property (nonatomic, readonly) HKSleepHealthStore *sleepHealthStore;
@property (nonatomic, readonly) HKSPSleepStoreCache *sleepStoreCache;
@property (nonatomic, readonly) HKSPSleepStoreExportedObject *sleepStoreExportedObject;
@property (readonly) Class superclass;
@property (nonatomic, readonly, copy) <HKSPSyncAnchor> *syncAnchor;
@property (nonatomic, readonly) struct os_unfair_lock_s { unsigned int x1; } syncLock;

// Image: /System/Library/PrivateFrameworks/Sleep.framework/Sleep

+ (id)_updatedHistoricalSleepGoalForSleepSchedule:(id)arg1 options:(unsigned long long)arg2 date:(id)arg3;
+ (id)_updatedHistoricalSleepSchedulesFromSleepSchedule:(id)arg1 options:(unsigned long long)arg2 date:(id)arg3;

- (void).cxx_destruct;
- (void)_checkInWithCurrentSyncAnchor;
- (id)_confirmAwakeOnServer;
- (id)_delayBedtimeForTimeIntervalOnServer:(double)arg1;
- (id)_dismissGoodMorningOnServer;
- (id)_dismissSleepLockOnServer;
- (id)_getSleepEventRecordDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepEventRecordFromServerDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepModeDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepModeFromServerDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepScheduleDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepScheduleFromServerDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepScheduleStateFromServerDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepScheduleStateOnDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepSettingsDoSync:(bool)arg1 notify:(bool)arg2;
- (id)_getSleepSettingsFromServerDoSync:(bool)arg1 notify:(bool)arg2;
- (void)_notifyObserversForChangedSleepEventRecord:(id)arg1;
- (void)_notifyObserversForChangedSleepMode:(long long)arg1;
- (void)_notifyObserversForChangedSleepSchedule:(id)arg1;
- (void)_notifyObserversForChangedSleepScheduleState:(unsigned long long)arg1;
- (void)_notifyObserversForChangedSleepSettings:(id)arg1;
- (void)_notifyObserversForSleepEvent:(id)arg1;
- (id)_publishNotificationOnServerWithIdentifier:(id)arg1 userInfo:(id)arg2;
- (id)_publishWakeUpResultsNotificationOnServer;
- (id)_saveCurrentSleepEventRecordOnServer:(id)arg1 options:(unsigned long long)arg2;
- (id)_saveCurrentSleepScheduleOnServer:(id)arg1 options:(unsigned long long)arg2;
- (id)_saveCurrentSleepSettingsOnServer:(id)arg1 options:(unsigned long long)arg2;
- (id)_sendScheduleChangedAnalytics;
- (id)_setLockScreenOverrideStateOnServerWithState:(long long)arg1 userInfo:(id)arg2;
- (id)_setSleepModeOnServer:(long long)arg1;
- (id)_skipBedtimeOnServer;
- (id)_skipWindDownOnServer;
- (id)_sleepAlarmWasDismissedOnDateOnServer:(id)arg1;
- (id)_sleepAlarmWasModifiedOnServer;
- (id)_sleepAlarmWasSnoozedUntilDateOnServer:(id)arg1;
- (void)_withLock:(id /* block */)arg1;
- (id)_writeHistoricalSchedule:(id)arg1 options:(unsigned long long)arg2;
- (void)addObserver:(id)arg1;
- (id)analyticsManager;
- (id)callbackScheduler;
- (void)confirmAwakeWithCompletion:(id /* block */)arg1;
- (void)connect;
- (id)connectionProvider;
- (id /* block */)currentDateProvider;
- (id)currentSleepEventRecordFuture;
- (void)currentSleepEventRecordWithCompletion:(id /* block */)arg1;
- (id)currentSleepEventRecordWithError:(id*)arg1;
- (id)currentSleepScheduleFuture;
- (id)currentSleepScheduleStateFuture;
- (void)currentSleepScheduleStateWithCompletion:(id /* block */)arg1;
- (unsigned long long)currentSleepScheduleStateWithError:(id*)arg1;
- (void)currentSleepScheduleWithCompletion:(id /* block */)arg1;
- (id)currentSleepScheduleWithError:(id*)arg1;
- (id)currentSleepSettingsFuture;
- (void)currentSleepSettingsWithCompletion:(id /* block */)arg1;
- (id)currentSleepSettingsWithError:(id*)arg1;
- (void)dealloc;
- (void)delayBedtimeForTimeInterval:(double)arg1 completion:(id /* block */)arg2;
- (id)description;
- (void)dismissGoodMorningWithCompletion:(id /* block */)arg1;
- (void)dismissSleepLockWithCompletion:(id /* block */)arg1;
- (id)healthStore;
- (id)identifier;
- (id)init;
- (id)initWithConnectionProviderProvider:(id /* block */)arg1 identifier:(id)arg2 healthStore:(id)arg3;
- (id)initWithConnectionProviderProvider:(id /* block */)arg1 identifier:(id)arg2 healthStore:(id)arg3 analyticsManager:(id)arg4 executorProvider:(id /* block */)arg5 callbackScheduler:(id)arg6 currentDateProvider:(id /* block */)arg7;
- (id)initWithHealthStore:(id)arg1;
- (id)initWithIdentifier:(id)arg1;
- (id)initWithIdentifier:(id)arg1 healthStore:(id)arg2;
- (void)nextEventDueAfterDate:(id)arg1 completion:(id /* block */)arg2;
- (id)nextEventDueAfterDate:(id)arg1 error:(id*)arg2;
- (id)nextEventDueAfterDateFuture:(id)arg1;
- (void)nextEventWithIdentifier:(id)arg1 dueAfterDate:(id)arg2 completion:(id /* block */)arg3;
- (id)nextEventWithIdentifier:(id)arg1 dueAfterDate:(id)arg2 error:(id*)arg3;
- (id)nextEventWithIdentifierFuture:(id)arg1 dueAfterDate:(id)arg2;
- (id)observers;
- (void)publishNotificationWithIdentifier:(id)arg1 userInfo:(id)arg2 completion:(id /* block */)arg3;
- (void)publishWakeUpResultsNotificationWithCompletion:(id /* block */)arg1;
- (void)reconnect;
- (id)reconnectExecutor;
- (void)removeObserver:(id)arg1;
- (id)saveCurrentSleepEventRecord:(id)arg1;
- (void)saveCurrentSleepEventRecord:(id)arg1 completion:(id /* block */)arg2;
- (id)saveCurrentSleepEventRecord:(id)arg1 options:(unsigned long long)arg2;
- (void)saveCurrentSleepEventRecord:(id)arg1 options:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (id)saveCurrentSleepSchedule:(id)arg1;
- (void)saveCurrentSleepSchedule:(id)arg1 completion:(id /* block */)arg2;
- (id)saveCurrentSleepSchedule:(id)arg1 options:(unsigned long long)arg2;
- (void)saveCurrentSleepSchedule:(id)arg1 options:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (id)saveCurrentSleepSettings:(id)arg1;
- (void)saveCurrentSleepSettings:(id)arg1 completion:(id /* block */)arg2;
- (id)saveCurrentSleepSettings:(id)arg1 options:(unsigned long long)arg2;
- (void)saveCurrentSleepSettings:(id)arg1 options:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (void)setLockScreenOverrideState:(long long)arg1 userInfo:(id)arg2 completion:(id /* block */)arg3;
- (void)setSleepCoachingOnboardingCompletedVersion:(long long)arg1 completion:(id /* block */)arg2;
- (void)setSleepModeOn:(bool)arg1 completion:(id /* block */)arg2;
- (void)setSleepTrackingOnboardingCompletedVersion:(long long)arg1 completion:(id /* block */)arg2;
- (void)setSleepWindDownShortcutsOnboardingCompletedVersion:(long long)arg1 completion:(id /* block */)arg2;
- (void)setUpcomingWakeUpAlarmEnabled:(bool)arg1 date:(id)arg2 completion:(id /* block */)arg3;
- (void)setWakeUpAlarmEnabled:(bool)arg1 resolvedOccurrence:(id)arg2 date:(id)arg3 completion:(id /* block */)arg4;
- (void)skipBedtimeWithCompletion:(id /* block */)arg1;
- (void)skipUpcomingWakeUpAlarmForDate:(id)arg1 completion:(id /* block */)arg2;
- (void)skipWindDownWithCompletion:(id /* block */)arg1;
- (void)sleepAlarmWasDismissedOnDate:(id)arg1 completion:(id /* block */)arg2;
- (void)sleepAlarmWasModified:(id)arg1 completion:(id /* block */)arg2;
- (void)sleepAlarmWasModifiedWithCompletion:(id /* block */)arg1;
- (void)sleepAlarmWasSnoozedUntilDate:(id)arg1 completion:(id /* block */)arg2;
- (id)sleepHealthStore;
- (id)sleepModeFuture;
- (id)sleepModeOnFuture;
- (void)sleepModeOnWithCompletion:(id /* block */)arg1;
- (bool)sleepModeOnWithError:(id*)arg1;
- (void)sleepModeWithCompletion:(id /* block */)arg1;
- (long long)sleepModeWithError:(id*)arg1;
- (id)sleepScheduleModelFuture;
- (void)sleepScheduleModelWithCompletion:(id /* block */)arg1;
- (id)sleepScheduleModelWithError:(id*)arg1;
- (id)sleepStoreCache;
- (id)sleepStoreExportedObject;
- (id)syncAnchor;
- (struct os_unfair_lock_s { unsigned int x1; })syncLock;
- (id)upcomingResolvedScheduleOccurrenceAfterDate:(id)arg1 alarmStatus:(long long*)arg2 error:(id*)arg3;
- (id)upcomingResolvedScheduleOccurrenceAfterDate:(id)arg1 error:(id*)arg2;
- (id)upcomingScheduleOccurrenceAfterDate:(id)arg1 alarmStatus:(long long*)arg2 error:(id*)arg3;
- (void)upcomingScheduleOccurrenceAfterDate:(id)arg1 completion:(id /* block */)arg2;
- (id)upcomingScheduleOccurrenceAfterDate:(id)arg1 error:(id*)arg2;
- (id)upcomingScheduleOccurrenceAfterDateFuture:(id)arg1;
- (void)updateSyncAnchor:(id)arg1;

// Image: /System/Library/PrivateFrameworks/MobileTimerUI.framework/MobileTimerUI

+ (id)mt_getDetailedAlarmTitleForDate:(id)arg1 calendar:(id)arg2 onlyAppliesOnce:(bool)arg3;

- (id)mt_sleepMetaDataForUpcomingAlarmInCalendar:(id)arg1 error:(id*)arg2;

@end
