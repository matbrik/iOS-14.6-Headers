/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HomeKitDaemon.framework/HomeKitDaemon
 */

@interface HMDAccessoryFirmwareUpdateProfile : NSObject <HMFLogging> {
    HMDHAPAccessory * _accessory;
    bool  _readinessNotificationEnabled;
    HMDService * _service;
    HMFSoftwareVersion * _stagedFirmwareVersion;
    unsigned long long  _stagingNotReadyReasons;
    bool  _statusNotificationEnabled;
    unsigned long long  _updateDuration;
    unsigned long long  _updateNotReadyReasons;
    long long  _updateState;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property (readonly) HMDHAPAccessory *accessory;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) NSNotificationCenter *notificationCenter;
@property (getter=isReadinessNotificationEnabled, nonatomic) bool readinessNotificationEnabled;
@property (getter=isReadyForStaging, nonatomic, readonly) bool readyForStaging;
@property (getter=isReadyToApplyUpdate, nonatomic, readonly) bool readyToApplyUpdate;
@property (readonly) HMDService *service;
@property (nonatomic, retain) HMFSoftwareVersion *stagedFirmwareVersion;
@property (nonatomic) unsigned long long stagingNotReadyReasons;
@property (getter=isStatusNotificationEnabled, nonatomic) bool statusNotificationEnabled;
@property (readonly) Class superclass;
@property (nonatomic) unsigned long long updateDuration;
@property (nonatomic) unsigned long long updateNotReadyReasons;
@property (nonatomic) long long updateState;
@property (readonly) NSObject<OS_dispatch_queue> *workQueue;

+ (id)logCategory;

- (void).cxx_destruct;
- (void)__handleAccessoryConnected;
- (void)__handleFirmwareUpdateReadinessUpdate:(id)arg1;
- (void)__handleFirmwareUpdateStatusUpdate:(id)arg1;
- (void)__handleFirmwareVersionUpdate:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)__handleStagedFirmwareVersionUpdate:(id)arg1;
- (void)_enableReadinessNotification:(bool)arg1 readAfterEnable:(bool)arg2;
- (void)_handleCharacteristicChanges:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)_registerForNotifications;
- (void)_updateFirmwareStagingNotReadyReasons:(unsigned long long)arg1;
- (void)_updateFirmwareUpdateDuration:(unsigned long long)arg1;
- (void)_updateFirmwareUpdateNotReadyReasons:(unsigned long long)arg1;
- (void)_updateFirmwareUpdateState:(long long)arg1;
- (void)_updateStagedFirmwareVersion:(id)arg1;
- (id)accessory;
- (void)configure;
- (void)dealloc;
- (id)description;
- (id)firmwareVersionCharacterstic;
- (void)handleAccessoryConnected:(id)arg1;
- (void)handleCharacteristicValuesChanged:(id)arg1;
- (id)initWithAccessory:(id)arg1 service:(id)arg2 workQueue:(id)arg3;
- (bool)isEqual:(id)arg1;
- (bool)isReadinessNotificationEnabled;
- (bool)isReadyForStaging;
- (bool)isReadyToApplyUpdate;
- (bool)isStatusNotificationEnabled;
- (void)monitorReadiness:(bool)arg1;
- (void)monitorStatus:(bool)arg1;
- (id)notificationCenter;
- (void)readAndProcessCharacteristics:(id)arg1 withCompletion:(id /* block */)arg2;
- (id)readinessCharacteristic;
- (id)service;
- (void)setReadinessNotificationEnabled:(bool)arg1;
- (void)setStagedFirmwareVersion:(id)arg1;
- (void)setStagingNotReadyReasons:(unsigned long long)arg1;
- (void)setStatusNotificationEnabled:(bool)arg1;
- (void)setUpdateDuration:(unsigned long long)arg1;
- (void)setUpdateNotReadyReasons:(unsigned long long)arg1;
- (void)setUpdateState:(long long)arg1;
- (id)stagedFirmwareVersion;
- (unsigned long long)stagingNotReadyReasons;
- (id)statusCharacteristics;
- (unsigned long long)updateDuration;
- (unsigned long long)updateNotReadyReasons;
- (void)updateProfileWithCompletion:(id /* block */)arg1;
- (long long)updateState;
- (id)workQueue;

@end
