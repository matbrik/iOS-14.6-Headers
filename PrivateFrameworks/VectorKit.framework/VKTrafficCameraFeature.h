/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKTrafficCameraFeature : VKTrafficFeature {
    bool  _isAboveSpeedThreshold;
    unsigned int  _speedLimit;
    NSString * _speedLimitText;
    unsigned int  _speedThreshold;
    long long  _type;
}

@property (nonatomic) bool isAboveSpeedThreshold;
@property (nonatomic, readonly) NSString *speedLimitText;
@property (nonatomic, readonly) unsigned int speedThreshold;
@property (nonatomic, readonly) long long type;

+ (id)stringForTrafficCameraType:(long long)arg1;

- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)initWithTrafficCamera:(id)arg1 onRoute:(id)arg2;
- (id)initWithTrafficCameraType:(long long)arg1 uniqueIdentifier:(id)arg2 routeOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg3 onRoute:(id)arg4;
- (bool)isAboveSpeedThreshold;
- (bool)isSpeedLimitCamera;
- (void)populateDebugNode:(struct DebugTreeNode { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_2_1_1; } x2; }*)arg1;
- (void)setIsAboveSpeedThreshold:(bool)arg1;
- (id)speedLimitText;
- (unsigned int)speedThreshold;
- (long long)type;

@end
