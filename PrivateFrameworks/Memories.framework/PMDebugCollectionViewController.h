/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Memories.framework/Memories
 */

@interface PMDebugCollectionViewController : UICollectionViewController <PMDebugCollectionViewControllerProtocol> {
    UIAlertController * _alertController;
    long long  _allAssetCount;
    PHAssetCollection * _assetCollection;
    MiroAutoEditController * _autoEditController;
    MiroBlueprint * _blueprint;
    struct Buckets { 
        long long shortCount; 
        long long mediumCount; 
        long long longCount; 
        double shortDuration; 
        double mediumDuration; 
        double longDuration; 
        int defaultBucketIsNotShort; 
    }  _buckets;
    bool  _cancelled;
    PHFetchResult * _curatedAssets;
    unsigned long long  _currentSortType;
    double  _duration;
    NSDictionary * _freezeRanges;
    bool  _hackReuseCell;
    bool  _isSaveMode;
    NSURL * _localPersistentFile;
    MiroMemory * _memory;
    long long  _pickedItemCount;
    MiroPickList * _picklist;
    VEKProduction * _production;
    UIProgressView * _progressView;
    NSArray * _prohibitedDataExportLocations;
    Project * _project;
    NSMutableDictionary * _projectMoodNamedTransitions;
    VEKResult * _result;
    UIBarButtonItem * _sortBarButton;
    NSArray * _sortTitles;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _sourceRect;
    UIView * _sourceView;
    bool  _syncPreview;
    UIView * _textContainerView;
    bool  _textOnly;
}

@property (nonatomic, retain) UIAlertController *alertController;
@property (nonatomic) long long allAssetCount;
@property (nonatomic, retain) PHAssetCollection *assetCollection;
@property (nonatomic, retain) MiroAutoEditController *autoEditController;
@property (nonatomic, retain) MiroBlueprint *blueprint;
@property (nonatomic) struct Buckets { long long x1; long long x2; long long x3; double x4; double x5; double x6; int x7; } buckets;
@property bool cancelled;
@property (nonatomic, retain) PHFetchResult *curatedAssets;
@property (nonatomic) unsigned long long currentSortType;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) double duration;
@property (nonatomic, retain) NSDictionary *freezeRanges;
@property (nonatomic) bool hackReuseCell;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isSaveMode;
@property (nonatomic, retain) NSURL *localPersistentFile;
@property (nonatomic, retain) MiroMemory *memory;
@property (nonatomic) long long pickedItemCount;
@property (nonatomic, retain) MiroPickList *picklist;
@property (nonatomic, retain) VEKProduction *production;
@property (nonatomic, retain) UIProgressView *progressView;
@property (nonatomic, retain) Project *project;
@property (nonatomic, retain) NSMutableDictionary *projectMoodNamedTransitions;
@property (nonatomic, retain) VEKResult *result;
@property (nonatomic) UIBarButtonItem *sortBarButton;
@property (nonatomic, retain) NSArray *sortTitles;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } sourceRect;
@property (nonatomic, retain) UIView *sourceView;
@property (readonly) Class superclass;
@property bool syncPreview;
@property (nonatomic, retain) UIView *textContainerView;
@property (nonatomic) bool textOnly;

- (void).cxx_destruct;
- (void)_exportFramingDecisions;
- (id)_framingTestingCSV;
- (unsigned long long)_getCurrentCountOfItems;
- (id)alertController;
- (long long)allAssetCount;
- (id)allAssets;
- (id)allAssetsAsArray;
- (id)assetCollection;
- (id)autoEditController;
- (id)blueprint;
- (void)bringUpActions:(id)arg1;
- (void)bringUpSortOptions:(id)arg1;
- (struct Buckets { long long x1; long long x2; long long x3; double x4; double x5; double x6; int x7; })buckets;
- (bool)cancelled;
- (void)closeMemoryTransition:(id)arg1;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didSelectItemAtIndexPath:(id)arg2;
- (struct CGSize { double x1; double x2; })collectionView:(id)arg1 layout:(id)arg2 sizeForItemAtIndexPath:(id)arg3;
- (long long)collectionView:(id)arg1 numberOfItemsInSection:(long long)arg2;
- (void)createDebugGraphics;
- (id)createDebugPageWithInfoWithStartingIndex:(unsigned long long)arg1 andEndingIndex:(unsigned long long)arg2;
- (id)createKBFramingToAssetMapWithAspect:(id)arg1;
- (id)createKBPlaybackSizeToAssetMap;
- (id)curatedAssets;
- (unsigned long long)currentSortType;
- (void)didReceiveMemoryWarning;
- (void)done:(id)arg1;
- (void)drawImageInContext:(id)arg1 andFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)drawSeperatingBorderInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withColor:(id)arg2;
- (double)duration;
- (void)fixPopoverForViewController:(id)arg1 withSender:(id)arg2;
- (id)freezeRanges;
- (bool)hackReuseCell;
- (void)image:(id)arg1 didFinishSavingWithError:(id)arg2 contextInfo:(void*)arg3;
- (bool)isSaveMode;
- (id)localPersistentFile;
- (id)logFeaturedPeopleInMemory;
- (id)makeEnhancedStringFromPlainOne:(id)arg1;
- (id)makeEnhancedStringFromPlainOne:(id)arg1 size:(int)arg2;
- (id)memory;
- (long long)numberOfSectionsInCollectionView:(id)arg1;
- (unsigned long long)numberRowsWithCurrentCount;
- (void)pickInfoAndAsset:(id*)arg1 asset:(id*)arg2 fromIndexPath:(id*)arg3;
- (long long)pickedItemCount;
- (id)picklist;
- (void)presentAirDropControllerWithDebugString:(id)arg1;
- (void)presentAirdropControllerWithDebugImage:(id)arg1;
- (void)presentAirdropControllerWithDebugImageArray:(id)arg1;
- (void)presentModelImageViewWithImage:(id)arg1;
- (id)prettyTransitionNameFromID:(id)arg1 fromBlueprint:(id)arg2;
- (void)processSaliencyAO;
- (id)production;
- (id)progressView;
- (id)project;
- (id)projectMoodNamedTransitions;
- (id)renderBoundingBoxToImage:(id)arg1;
- (id)renderBoundingBoxToImage:(id)arg1 metadataRects:(id)arg2 normalized:(bool)arg3;
- (void)renderKBRects;
- (id)replaceEmojiWithPrintName:(id)arg1;
- (id)requestedSongString;
- (void)resetMemoryToCleanState:(id)arg1;
- (id)result;
- (void)saveDebugPanelForMemory:(id)arg1;
- (void)setAlertController:(id)arg1;
- (void)setAllAssetCount:(long long)arg1;
- (void)setAssetCollection:(id)arg1;
- (void)setAutoEditController:(id)arg1;
- (void)setBlueprint:(id)arg1;
- (void)setBuckets:(struct Buckets { long long x1; long long x2; long long x3; double x4; double x5; double x6; int x7; })arg1;
- (void)setCancelled:(bool)arg1;
- (void)setCuratedAssets:(id)arg1;
- (void)setCurrentSortType:(unsigned long long)arg1;
- (void)setDuration:(double)arg1;
- (void)setFreezeRanges:(id)arg1;
- (void)setHackReuseCell:(bool)arg1;
- (void)setIsSaveMode:(bool)arg1;
- (void)setLocalPersistentFile:(id)arg1;
- (void)setMemory:(id)arg1;
- (void)setPickedItemCount:(long long)arg1;
- (void)setPicklist:(id)arg1;
- (void)setProduction:(id)arg1;
- (void)setProgressView:(id)arg1;
- (void)setProject:(id)arg1;
- (void)setProjectMoodNamedTransitions:(id)arg1;
- (void)setResult:(id)arg1;
- (void)setSortBarButton:(id)arg1;
- (void)setSortTitles:(id)arg1;
- (void)setSourceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSourceView:(id)arg1;
- (void)setSyncPreview:(bool)arg1;
- (void)setTextContainerView:(id)arg1;
- (void)setTextOnly:(bool)arg1;
- (void)showMemoryTransitions;
- (void)showProject;
- (void)showScoreLog;
- (void)showTextVersion;
- (void)showTextViewWith:(id)arg1;
- (id)sortBarButton;
- (id)sortTitles;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })sourceRect;
- (id)sourceView;
- (bool)syncPreview;
- (id)textContainerView;
- (bool)textOnly;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;
- (void)writeTextToImageContextWithSize:(struct CGSize { double x1; double x2; })arg1;
- (void)writeTextToImageContextWithSize:(struct CGSize { double x1; double x2; })arg1 andCell:(id)arg2 andLocation:(struct CGPoint { double x1; double x2; })arg3;

@end
