/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SpringBoard.framework/SpringBoard
 */

@interface SBPIPContentViewLayoutSettings : NSObject {
    unsigned long long  _currentPosition;
    double  _currentSize;
    double  _defaultSize;
    bool  _defaultToMinimumPreferredContentSize;
    double  _maximumSize;
    double  _maximumSizePreference;
    double  _maximumSizeSpanForPreferredSizeTuning;
    double  _minimumSize;
    double  _minimumSizePreference;
    double  _minimumSizeSpanBetweenPreferredSizes;
    bool  _sizeChanged;
}

@property (nonatomic) unsigned long long currentPosition;
@property (nonatomic) double currentSize;
@property (nonatomic) double defaultSize;
@property (nonatomic) bool defaultToMinimumPreferredContentSize;
@property (nonatomic) double maximumSize;
@property (nonatomic) double maximumSizePreference;
@property (nonatomic) double maximumSizeSpanForPreferredSizeTuning;
@property (nonatomic) double minimumSize;
@property (nonatomic) double minimumSizePreference;
@property (nonatomic) double minimumSizeSpanBetweenPreferredSizes;
@property (getter=hasSizeChanged, nonatomic, readonly) bool sizeChanged;

+ (double)_contentViewPaddingWhileStashed:(bool)arg1;
+ (struct CGSize { double x1; double x2; })_contentViewSizeForAspectRatio:(struct CGSize { double x1; double x2; })arg1 currentSize:(double)arg2;
+ (double)_defaultSize;
+ (struct CGSize { double x1; double x2; })_maximumContentViewSizeForAspectRatio:(struct CGSize { double x1; double x2; })arg1 maximumReferenceSize:(double)arg2;
+ (double)_maximumSize;
+ (struct CGSize { double x1; double x2; })_minimumContentViewSizeForAspectRatio:(struct CGSize { double x1; double x2; })arg1 minimumReferenceSize:(double)arg2;
+ (double)_minimumSize;
+ (id)_sharedInstance;
+ (double)contentViewPadding;
+ (double)contentViewPaddingWhileStashed;
+ (unsigned long long)currentContentViewPosition;
+ (struct CGSize { double x1; double x2; })currentContentViewSizeForAspectRatio:(struct CGSize { double x1; double x2; })arg1;
+ (struct CGSize { double x1; double x2; })defaultContentViewSizeForAspectRatio:(struct CGSize { double x1; double x2; })arg1;
+ (struct CGSize { double x1; double x2; })maximumPossibleContentViewSizeForAspectRatio:(struct CGSize { double x1; double x2; })arg1;
+ (struct CGSize { double x1; double x2; })maximumPreferredContentViewSizeForAspectRatio:(struct CGSize { double x1; double x2; })arg1;
+ (struct CGSize { double x1; double x2; })minimumPossibleContentViewSizeForAspectRatio:(struct CGSize { double x1; double x2; })arg1;
+ (struct CGSize { double x1; double x2; })minimumPreferredContentViewSizeForAspectRatio:(struct CGSize { double x1; double x2; })arg1;
+ (struct CGSize { double x1; double x2; })minimumStashTabSize;
+ (void)setContentViewPosition:(unsigned long long)arg1;
+ (void)setContentViewSize:(struct CGSize { double x1; double x2; })arg1;
+ (void)setMaximumSizeSpanForPreferredSizeTuning:(double)arg1;
+ (void)setMinimumSizeSpanBetweenPreferredSizes:(double)arg1;
+ (void)setShouldDefaultToMinimumPreferredContentSize:(bool)arg1;

- (unsigned long long)currentPosition;
- (double)currentSize;
- (double)defaultSize;
- (bool)defaultToMinimumPreferredContentSize;
- (bool)hasSizeChanged;
- (id)init;
- (double)maximumSize;
- (double)maximumSizePreference;
- (double)maximumSizeSpanForPreferredSizeTuning;
- (double)minimumSize;
- (double)minimumSizePreference;
- (double)minimumSizeSpanBetweenPreferredSizes;
- (unsigned long long)position;
- (void)setCurrentPosition:(unsigned long long)arg1;
- (void)setCurrentSize:(double)arg1;
- (void)setDefaultSize:(double)arg1;
- (void)setDefaultToMinimumPreferredContentSize:(bool)arg1;
- (void)setMaximumSize:(double)arg1;
- (void)setMaximumSizePreference:(double)arg1;
- (void)setMaximumSizeSpanForPreferredSizeTuning:(double)arg1;
- (void)setMinimumSize:(double)arg1;
- (void)setMinimumSizePreference:(double)arg1;
- (void)setMinimumSizeSpanBetweenPreferredSizes:(double)arg1;
- (void)setPosition:(unsigned long long)arg1;
- (void)setSize:(double)arg1;
- (double)size;

@end
