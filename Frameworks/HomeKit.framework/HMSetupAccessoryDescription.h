/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/HomeKit.framework/HomeKit
 */

@interface HMSetupAccessoryDescription : NSObject <HMFObject, NSCopying, NSSecureCoding> {
    HMAccessory * _accessoryBeingReplaced;
    HMSetupAccessoryBrowsingRequest * _accessoryBrowsingRequest;
    NSString * _accessoryName;
    NSString * _accessoryServerIdentifier;
    NSUUID * _accessoryUUID;
    bool  _addAndSetupAccessories;
    NSUUID * _addRequestIdentifier;
    NSString * _appIdentifier;
    NSString * _bundleID;
    NSError * _cancellationReason;
    HMAccessoryCategory * _category;
    unsigned long long  _certificationStatus;
    bool  _entitledForHomeKitSPI;
    bool  _entitledForThirdPartySetupAccessoryPayload;
    NSString * _homeName;
    NSUUID * _homeUUID;
    NSURL * _installationGuideURL;
    bool  _isTrustedOrigin;
    bool  _legacyAPI;
    NSString * _manufacturerName;
    NSString * _marketingName;
    HMAccessoryOwnershipToken * _ownershipToken;
    HMSetupAccessoryPayload * _setupAccessoryPayload;
    NSString * _setupCode;
    NSString * _storeID;
    NSString * _suggestedRoomName;
    bool  _userConsentedForReplace;
}

@property (nonatomic) HMAccessory *accessoryBeingReplaced;
@property (nonatomic, retain) HMSetupAccessoryBrowsingRequest *accessoryBrowsingRequest;
@property (nonatomic, copy) NSString *accessoryName;
@property (nonatomic, copy) NSString *accessoryServerIdentifier;
@property (nonatomic, copy) NSUUID *accessoryUUID;
@property (nonatomic) bool addAndSetupAccessories;
@property (nonatomic, copy) NSUUID *addRequestIdentifier;
@property (nonatomic, copy) NSString *appIdentifier;
@property (nonatomic, readonly, copy) NSArray *attributeDescriptions;
@property (nonatomic, copy) NSString *bundleID;
@property (nonatomic, retain) NSError *cancellationReason;
@property (nonatomic, retain) HMAccessoryCategory *category;
@property (nonatomic) unsigned long long certificationStatus;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=isEntitledForHomeKitSPI, nonatomic) bool entitledForHomeKitSPI;
@property (getter=isEntitledForThirdPartySetupAccessoryPayload, nonatomic) bool entitledForThirdPartySetupAccessoryPayload;
@property (nonatomic, readonly) bool hasAddRequest;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSURL *hf_installationGuideURL;
@property (nonatomic, readonly) bool hf_isKeyedToASpecificAccessory;
@property (nonatomic, readonly) NSString *hf_marketingName;
@property (nonatomic, readonly) HMAccessoryOwnershipToken *hf_ownershipToken;
@property (nonatomic, readonly, copy) NSString *homeName;
@property (nonatomic, readonly, copy) NSUUID *homeUUID;
@property (nonatomic, copy) NSURL *installationGuideURL;
@property (nonatomic) bool isTrustedOrigin;
@property (nonatomic) bool legacyAPI;
@property (nonatomic, copy) NSString *manufacturerName;
@property (nonatomic, copy) NSString *marketingName;
@property (nonatomic, copy) HMAccessoryOwnershipToken *ownershipToken;
@property (getter=isPaired, nonatomic, readonly) bool paired;
@property (readonly, copy) NSString *privateDescription;
@property (readonly, copy) NSString *propertyDescription;
@property (nonatomic, retain) HMSetupAccessoryPayload *setupAccessoryPayload;
@property (nonatomic, copy) NSString *setupCode;
@property (nonatomic, readonly, copy) NSString *setupID;
@property (readonly, copy) NSString *shortDescription;
@property (nonatomic, copy) NSString *storeID;
@property (nonatomic, copy) NSString *suggestedRoomName;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsBTLE;
@property (nonatomic, readonly) bool supportsIP;
@property (nonatomic, readonly) bool supportsWAC;
@property (nonatomic) bool userConsentedForReplace;

// Image: /System/Library/Frameworks/HomeKit.framework/HomeKit

+ (id)shortDescription;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)accessoryBeingReplaced;
- (id)accessoryBrowsingRequest;
- (id)accessoryName;
- (id)accessoryServerIdentifier;
- (id)accessoryUUID;
- (bool)addAndSetupAccessories;
- (id)addRequestIdentifier;
- (id)appIdentifier;
- (id)attributeDescriptions;
- (id)bundleID;
- (id)cancellationReason;
- (id)category;
- (unsigned long long)certificationStatus;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (bool)hasAddRequest;
- (unsigned long long)hash;
- (id)homeName;
- (id)homeUUID;
- (id)initToSetupAccessoriesWithSetupAccessoryPayload:(id)arg1 appID:(id)arg2 homeName:(id)arg3 homeUUID:(id)arg4 trustedOrigin:(bool)arg5 ownershipToken:(id)arg6;
- (id)initToSetupAccessoriesWithSetupAccessoryPayload:(id)arg1 appID:(id)arg2 homeName:(id)arg3 homeUUID:(id)arg4 trustedOrigin:(bool)arg5 ownershipToken:(id)arg6 marketingName:(id)arg7 installationGuideURL:(id)arg8;
- (id)initWithAccessoryUUID:(id)arg1 accessoryName:(id)arg2 appID:(id)arg3 homeName:(id)arg4 homeUUID:(id)arg5 trustedOrigin:(bool)arg6;
- (id)initWithAddRequest:(id)arg1 setupAccessoryPayload:(id)arg2 appID:(id)arg3 ownershipToken:(id)arg4;
- (id)initWithBrowsingRequest:(id)arg1 appID:(id)arg2 legacyAPI:(bool)arg3 homeName:(id)arg4 homeUUID:(id)arg5 trustedOrigin:(bool)arg6;
- (id)initWithCoder:(id)arg1;
- (id)installationGuideURL;
- (bool)isEntitledForHomeKitSPI;
- (bool)isEntitledForThirdPartySetupAccessoryPayload;
- (bool)isEqual:(id)arg1;
- (bool)isPaired;
- (bool)isTrustedOrigin;
- (bool)legacyAPI;
- (id)manufacturerName;
- (id)marketingName;
- (id)ownershipToken;
- (id)privateDescription;
- (void)setAccessoryBeingReplaced:(id)arg1;
- (void)setAccessoryBrowsingRequest:(id)arg1;
- (void)setAccessoryName:(id)arg1;
- (void)setAccessoryServerIdentifier:(id)arg1;
- (void)setAccessoryUUID:(id)arg1;
- (void)setAddAndSetupAccessories:(bool)arg1;
- (void)setAddRequestIdentifier:(id)arg1;
- (void)setAppIdentifier:(id)arg1;
- (void)setBundleID:(id)arg1;
- (void)setCancellationReason:(id)arg1;
- (void)setCategory:(id)arg1;
- (void)setCertificationStatus:(unsigned long long)arg1;
- (void)setEntitledForHomeKitSPI:(bool)arg1;
- (void)setEntitledForThirdPartySetupAccessoryPayload:(bool)arg1;
- (void)setInstallationGuideURL:(id)arg1;
- (void)setIsTrustedOrigin:(bool)arg1;
- (void)setLegacyAPI:(bool)arg1;
- (void)setManufacturerName:(id)arg1;
- (void)setMarketingName:(id)arg1;
- (void)setOwnershipToken:(id)arg1;
- (void)setSetupAccessoryPayload:(id)arg1;
- (void)setSetupCode:(id)arg1;
- (void)setStoreID:(id)arg1;
- (void)setSuggestedRoomName:(id)arg1;
- (void)setUserConsentedForReplace:(bool)arg1;
- (id)setupAccessoryPayload;
- (id)setupCode;
- (id)setupID;
- (id)shortDescription;
- (id)storeID;
- (id)suggestedRoomName;
- (bool)supportsBTLE;
- (bool)supportsIP;
- (bool)supportsWAC;
- (void)updateAccessoryCategory:(id)arg1;
- (void)updateAppIdentifier:(id)arg1;
- (void)updateOwnershipToken:(id)arg1;
- (void)updateWithAccessory:(id)arg1;
- (void)updateWithMarketingName:(id)arg1 installationGuideURL:(id)arg2;
- (void)updateWithSetupAccessoryPayload:(id)arg1;
- (bool)userConsentedForReplace;

// Image: /System/Library/PrivateFrameworks/Home.framework/Home

- (id)hf_home;
- (id)hf_installationGuideURL;
- (bool)hf_isKeyedToASpecificAccessory;
- (bool)hf_isLogitechCircleViewDoorbell;
- (id)hf_marketingName;
- (id)hf_ownershipToken;
- (id)hf_populateSetupMetadata;
- (void)hf_updateWithDiscoveredAccessory:(id)arg1;

// Image: /System/Library/PrivateFrameworks/HomeKitDaemon.framework/HomeKitDaemon

- (id)debugDescription;
- (bool)matchesAccessoryServer:(id)arg1;
- (bool)matchesSetupID:(id)arg1 serverIdentifier:(id)arg2;

@end
