/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/EmbeddedAcousticRecognition.framework/EmbeddedAcousticRecognition
 */

@interface _EARResultContext : NSObject {
    bool  _anyResults;
    struct shared_ptr<EARContinuousListeningResultHelper> { 
        struct EARContinuousListeningResultHelper {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _continuousListeningResultHelper;
    unsigned long long  _countOfIsFinalFalseAlreadyWritten;
    struct vector<double, std::__1::allocator<double>> { 
        double *__begin_; 
        double *__end_; 
        struct __compressed_pair<double *, std::__1::allocator<double>> { 
            double *__value_; 
        } __end_cap_; 
    }  _loggableConcatCosts;
    struct vector<std::__1::vector<quasar::Token, std::__1::allocator<quasar::Token>>, std::__1::allocator<std::__1::vector<quasar::Token, std::__1::allocator<quasar::Token>>>> { 
        struct vector<quasar::Token, std::__1::allocator<quasar::Token>> {} *__begin_; 
        struct vector<quasar::Token, std::__1::allocator<quasar::Token>> {} *__end_; 
        struct __compressed_pair<std::__1::vector<quasar::Token, std::__1::allocator<quasar::Token>> *, std::__1::allocator<std::__1::vector<quasar::Token, std::__1::allocator<quasar::Token>>>> { 
            struct vector<quasar::Token, std::__1::allocator<quasar::Token>> {} *__value_; 
        } __end_cap_; 
    }  _loggableConcatResult;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { 
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { 
            struct __rep { 
                union { 
                    struct __long { 
                        char *__data_; 
                        unsigned long long __size_; 
                        unsigned long long __cap_; 
                    } __l; 
                    struct __short { 
                        BOOL __data_[23]; 
                        struct { 
                            unsigned char __size_; 
                        } ; 
                    } __s; 
                    struct __raw { 
                        unsigned long long __words[3]; 
                    } __r; 
                } ; 
            } __value_; 
        } __r_; 
    }  _prevBestRecogText;
    _EARSpeechRecognitionResultPackage * _prevPackage;
}

@property (nonatomic) bool anyResults;
@property (nonatomic) struct shared_ptr<EARContinuousListeningResultHelper> { struct EARContinuousListeningResultHelper {} *x1; struct __shared_weak_count {} *x2; } continuousListeningResultHelper;
@property (nonatomic) unsigned long long countOfIsFinalFalseAlreadyWritten;
@property (nonatomic) /* Warning: unhandled struct encoding: '{vector<double' */ struct  loggableConcatCosts; /* unknown property attribute:  std::__1::allocator<double>>=^d}} */
@property (nonatomic) /* Warning: unhandled struct encoding: '{vector<std::__1::vector<quasar::Token' */ struct  loggableConcatResult; /* unknown property attribute:  std::__1::allocator<quasar::Token>>}}} */
@property (nonatomic) /* Warning: unhandled struct encoding: '{basic_string<char' */ struct  prevBestRecogText; /* unknown property attribute:  std::__1::allocator<char>>={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}} */
@property (nonatomic, retain) _EARSpeechRecognitionResultPackage *prevPackage;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)anyResults;
- (struct shared_ptr<EARContinuousListeningResultHelper> { struct EARContinuousListeningResultHelper {} *x1; struct __shared_weak_count {} *x2; })continuousListeningResultHelper;
- (unsigned long long)countOfIsFinalFalseAlreadyWritten;
- (id)description;
- (void)incrementCountOfIsFinalFalseAlreadyWritten;
- (struct vector<double, std::__1::allocator<double>> { double *x1; double *x2; struct __compressed_pair<double *, std::__1::allocator<double>> { double *x_3_1_1; } x3; })loggableConcatCosts;
- (struct vector<std::__1::vector<quasar::Token, std::__1::allocator<quasar::Token>>, std::__1::allocator<std::__1::vector<quasar::Token, std::__1::allocator<quasar::Token>>>> { struct vector<quasar::Token, std::__1::allocator<quasar::Token>> {} *x1; struct vector<quasar::Token, std::__1::allocator<quasar::Token>> {} *x2; struct __compressed_pair<std::__1::vector<quasar::Token, std::__1::allocator<quasar::Token>> *, std::__1::allocator<std::__1::vector<quasar::Token, std::__1::allocator<quasar::Token>>>> { struct vector<quasar::Token, std::__1::allocator<quasar::Token>> {} *x_3_1_1; } x3; })loggableConcatResult;
- (struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_4_1; unsigned long long x_1_4_2; unsigned long long x_1_4_3; } x_1_3_1; struct __short { BOOL x_2_4_1[23]; struct { unsigned char x_2_5_1; } x_2_4_2; } x_1_3_2; struct __raw { unsigned long long x_3_4_1[3]; } x_1_3_3; } x_1_2_1; } x_1_1_1; } x1; })prevBestRecogText;
- (id)prevPackage;
- (void)setAnyResults:(bool)arg1;
- (void)setContinuousListeningResultHelper:(struct shared_ptr<EARContinuousListeningResultHelper> { struct EARContinuousListeningResultHelper {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (void)setCountOfIsFinalFalseAlreadyWritten:(unsigned long long)arg1;
- (void)setLoggableConcatCosts:(struct vector<double, std::__1::allocator<double>> { double *x1; double *x2; struct __compressed_pair<double *, std::__1::allocator<double>> { double *x_3_1_1; } x3; })arg1;
- (void)setLoggableConcatResult:(struct vector<std::__1::vector<quasar::Token, std::__1::allocator<quasar::Token>>, std::__1::allocator<std::__1::vector<quasar::Token, std::__1::allocator<quasar::Token>>>> { struct vector<quasar::Token, std::__1::allocator<quasar::Token>> {} *x1; struct vector<quasar::Token, std::__1::allocator<quasar::Token>> {} *x2; struct __compressed_pair<std::__1::vector<quasar::Token, std::__1::allocator<quasar::Token>> *, std::__1::allocator<std::__1::vector<quasar::Token, std::__1::allocator<quasar::Token>>>> { struct vector<quasar::Token, std::__1::allocator<quasar::Token>> {} *x_3_1_1; } x3; })arg1;
- (void)setPrevBestRecogText:(struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_4_1; unsigned long long x_1_4_2; unsigned long long x_1_4_3; } x_1_3_1; struct __short { BOOL x_2_4_1[23]; struct { unsigned char x_2_5_1; } x_2_4_2; } x_1_3_2; struct __raw { unsigned long long x_3_4_1[3]; } x_1_3_3; } x_1_2_1; } x_1_1_1; } x1; })arg1;
- (void)setPrevPackage:(id)arg1;
- (void)updateLoggableResultWithCurrentResult:(const struct vector<std::__1::vector<quasar::Token, std::__1::allocator<quasar::Token>>, std::__1::allocator<std::__1::vector<quasar::Token, std::__1::allocator<quasar::Token>>>> { struct vector<quasar::Token, std::__1::allocator<quasar::Token>> {} *x1; struct vector<quasar::Token, std::__1::allocator<quasar::Token>> {} *x2; struct __compressed_pair<std::__1::vector<quasar::Token, std::__1::allocator<quasar::Token>> *, std::__1::allocator<std::__1::vector<quasar::Token, std::__1::allocator<quasar::Token>>>> { struct vector<quasar::Token, std::__1::allocator<quasar::Token>> {} *x_3_1_1; } x3; }*)arg1 currentCosts:(const struct vector<double, std::__1::allocator<double>> { double *x1; double *x2; struct __compressed_pair<double *, std::__1::allocator<double>> { double *x_3_1_1; } x3; }*)arg2 startMilliseconds:(unsigned int)arg3;

@end
