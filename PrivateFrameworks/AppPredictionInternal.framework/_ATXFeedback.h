/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AppPredictionInternal.framework/AppPredictionInternal
 */

@interface _ATXFeedback : NSObject <_ATXFeedbackProtocol> {
    NSString * _abGroupIdentifier;
    _ATXAppLaunchCategoricalHistogram * _appCoarseTimePOWLocationConfirmsHistogram;
    _ATXAppLaunchCategoricalHistogram * _appCoarseTimePOWLocationRejectsHistogram;
    _ATXAppLaunchCategoricalHistogram * _appConfirmsCoarseGeoHash;
    _ATXAppLaunchCategoricalHistogram * _appConfirmsDayOfWeek;
    _ATXAppLaunchCategoricalHistogram * _appConfirmsSpecificGeoHash;
    _ATXAppLaunchCategoricalHistogram * _appConfirmsTwoHourTimeInterval;
    _ATXAppLaunchCategoricalHistogram * _appDirectoryConfirmsCoarseGeohash;
    _ATXAppLaunchCategoricalHistogram * _appDirectoryConfirmsCoarseTimePOWLocation;
    _ATXAppLaunchCategoricalHistogram * _appDirectoryConfirmsDayOfWeek;
    _ATXAppLaunchCategoricalHistogram * _appDirectoryConfirmsSpecificGeohash;
    _ATXAppLaunchCategoricalHistogram * _appDirectoryConfirmsSpecificTimeDOWLocation;
    _ATXAppLaunchCategoricalHistogram * _appDirectoryConfirmsTwoHourTimeInterval;
    _ATXAppLaunchCategoricalHistogram * _appDirectoryExplicitRejectsCoarseTimePOWLocation;
    _ATXAppLaunchCategoricalHistogram * _appDirectoryRejectsCoarseGeohash;
    _ATXAppLaunchCategoricalHistogram * _appDirectoryRejectsCoarseTimePOWLocation;
    _ATXAppLaunchCategoricalHistogram * _appDirectoryRejectsDayOfWeek;
    _ATXAppLaunchCategoricalHistogram * _appDirectoryRejectsSpecificGeohash;
    _ATXAppLaunchCategoricalHistogram * _appDirectoryRejectsSpecificTimeDOWLocation;
    _ATXAppLaunchCategoricalHistogram * _appDirectoryRejectsTwoHourTimeInterval;
    _ATXAppLaunchCategoricalHistogram * _appExplicitRejectsCoarseTimePOWLocation;
    _ATXAppLaunchCategoricalHistogram * _appRejectsCoarseGeoHash;
    _ATXAppLaunchCategoricalHistogram * _appRejectsDayOfWeek;
    _ATXAppLaunchCategoricalHistogram * _appRejectsSpecificGeoHash;
    _ATXAppLaunchCategoricalHistogram * _appRejectsTwoHourTimeInterval;
    _ATXAppLaunchCategoricalHistogram * _appSpecificTimeDOWLocationConfirmsHistogram;
    _ATXAppLaunchCategoricalHistogram * _appSpecificTimeDOWLocationRejectsHistogram;
    _ATXAppLaunchCategoricalHistogram * _homeScreenAppConfirmsCoarseGeohash;
    _ATXAppLaunchCategoricalHistogram * _homeScreenAppConfirmsCoarseTimePOWLocation;
    _ATXAppLaunchCategoricalHistogram * _homeScreenAppConfirmsDayOfWeek;
    _ATXAppLaunchCategoricalHistogram * _homeScreenAppConfirmsSpecificGeohash;
    _ATXAppLaunchCategoricalHistogram * _homeScreenAppConfirmsSpecificTimeDOWLocation;
    _ATXAppLaunchCategoricalHistogram * _homeScreenAppConfirmsTwoHourTimeInterval;
    _ATXAppLaunchCategoricalHistogram * _homeScreenAppExplicitRejectsCoarseTimePOWLocation;
    _ATXAppLaunchCategoricalHistogram * _homeScreenAppRejectsCoarseGeohash;
    _ATXAppLaunchCategoricalHistogram * _homeScreenAppRejectsCoarseTimePOWLocation;
    _ATXAppLaunchCategoricalHistogram * _homeScreenAppRejectsDayOfWeek;
    _ATXAppLaunchCategoricalHistogram * _homeScreenAppRejectsSpecificGeohash;
    _ATXAppLaunchCategoricalHistogram * _homeScreenAppRejectsSpecificTimeDOWLocation;
    _ATXAppLaunchCategoricalHistogram * _homeScreenAppRejectsTwoHourTimeInterval;
    double  _priorAlpha;
    double  _priorBeta;
    _ATXDataStore * _store;
    _ATXInternalUninstallNotification * _uninstallNotificationListener;
}

@property (nonatomic, readonly) double currentAlpha;
@property (nonatomic, readonly) double currentBeta;

+ (bool)isWidgetOrSpotlight:(unsigned long long)arg1;
+ (id)sharedInstance;

- (void).cxx_destruct;
- (double)currentAlpha;
- (double)currentBeta;
- (void)decayCounts;
- (void)doDecayAtTime:(double)arg1;
- (void)feedbackLaunchedWithConsumerType:(unsigned long long)arg1 forBundleId:(id)arg2 rejected:(id)arg3 context:(id)arg4;
- (void)feedbackLaunchedWithConsumerType:(unsigned long long)arg1 forBundleId:(id)arg2 rejected:(id)arg3 explicitlyRejected:(id)arg4 context:(id)arg5;
- (id)init;
- (id)initWithDataStore:(id)arg1 histogramManager:(id)arg2;
- (void)populateFeedbackForConsumerType:(unsigned long long)arg1 forBundleId:(id)arg2 withContext:(id)arg3 forFeedbackCategory:(long long)arg4;
- (void)putFeedbackScoresForApps:(id)arg1 intoScores:(double*)arg2 confirms:(double*)arg3 rejects:(double*)arg4;
- (void)putNopScoresForApps:(id)arg1 into:(double*)arg2 atTime:(double)arg3;
- (void)removeFeedbackForBundle:(id)arg1;
- (void)removeFeedbackForBundles:(id)arg1;
- (void)resetData;

@end
