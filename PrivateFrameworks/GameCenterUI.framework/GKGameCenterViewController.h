/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/GameCenterUI.framework/GameCenterUI
 */

@interface GKGameCenterViewController : UINavigationController <GKExtensionParentViewControllerProtocol, UIViewControllerAnimatedTransitioning, UIViewControllerTransitioningDelegate> {
    NSString * _achievementIdentifier;
    UIAlertController * _alertController;
    <GKGameCenterControllerDelegate> * _gameCenterDelegate;
    bool  _isArcade;
    GKLeaderboard * _leaderboard;
    NSString * _leaderboardIdentifier;
    long long  _leaderboardPlayerScope;
    long long  _leaderboardTimeScope;
    bool  _presenting;
    GKDashboardHostViewController * _remoteViewController;
    long long  _viewState;
}

@property (nonatomic, retain) NSString *achievementIdentifier;
@property (nonatomic, retain) UIAlertController *alertController;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) <GKGameCenterControllerDelegate> *gameCenterDelegate;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isArcade;
@property (nonatomic, retain) GKLeaderboard *leaderboard;
@property (nonatomic, retain) NSString *leaderboardCategory;
@property (nonatomic, retain) NSString *leaderboardIdentifier;
@property (nonatomic) long long leaderboardPlayerScope;
@property (nonatomic) long long leaderboardTimeScope;
@property (getter=isPresenting, nonatomic) bool presenting;
@property (nonatomic, retain) GKDashboardHostViewController *remoteViewController;
@property (readonly) Class superclass;
@property (nonatomic) long long viewState;

+ (bool)_preventsAppearanceProxyCustomization;
+ (bool)accessInstanceVariablesDirectly;

- (void).cxx_destruct;
- (void)_setupChildViewController;
- (void)_setupRemoteViewController;
- (id)achievementIdentifier;
- (id)alertController;
- (void)animateTransition:(id)arg1;
- (id)animationControllerForDismissedController:(id)arg1;
- (id)animationControllerForPresentedController:(id)arg1 presentingController:(id)arg2 sourceController:(id)arg3;
- (void)animationEnded:(bool)arg1;
- (bool)automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers;
- (void)checkArcadeStateWithCompletion:(id /* block */)arg1;
- (void)dealloc;
- (void)extensionDidFinishWithError:(id)arg1;
- (id)gameCenterDelegate;
- (id)init;
- (id)initWithAchievementID:(id)arg1;
- (id)initWithLeaderboard:(id)arg1 playerScope:(long long)arg2;
- (id)initWithLeaderboardID:(id)arg1 playerScope:(long long)arg2 timeScope:(long long)arg3;
- (id)initWithState:(long long)arg1;
- (bool)isArcade;
- (bool)isPresenting;
- (id)leaderboard;
- (id)leaderboardCategory;
- (id)leaderboardIdentifier;
- (long long)leaderboardPlayerScope;
- (long long)leaderboardTimeScope;
- (void)loadView;
- (void)notifyDelegateOnWillFinish;
- (id)remoteViewController;
- (void)setAchievementIdentifier:(id)arg1;
- (void)setAlertController:(id)arg1;
- (void)setGameCenterDelegate:(id)arg1;
- (void)setIsArcade:(bool)arg1;
- (void)setLeaderboard:(id)arg1;
- (void)setLeaderboardCategory:(id)arg1;
- (void)setLeaderboardIdentifier:(id)arg1;
- (void)setLeaderboardIdentifierFromExtension:(id)arg1;
- (void)setLeaderboardPlayerScope:(long long)arg1;
- (void)setLeaderboardPlayerScopeFromExtension:(long long)arg1;
- (void)setLeaderboardTimeScope:(long long)arg1;
- (void)setLeaderboardTimeScopeFromExtension:(long long)arg1;
- (void)setPresenting:(bool)arg1;
- (void)setRemoteViewController:(id)arg1;
- (void)setViewState:(long long)arg1;
- (void)setViewStateFromExtension:(long long)arg1;
- (bool)shouldAutomaticallyForwardAppearanceMethods;
- (bool)shouldAutomaticallyForwardRotationMethods;
- (bool)shouldAutorotateToInterfaceOrientation:(long long)arg1;
- (bool)shouldShowPlayForChallenge;
- (bool)shouldShowPlayForTurnBasedMatch;
- (bool)shouldShowQuitForTurnBasedMatch;
- (unsigned long long)supportedInterfaceOrientations;
- (double)transitionDuration:(id)arg1;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (long long)viewState;
- (void)viewWillAppear:(bool)arg1;

@end
