/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/DiskImages2.framework/DiskImages2
 */

@interface DIBaseParams : NSObject <NSCoding, NSSecureCoding> {
    bool  _allowStoringInKeychain;
    long long  _debugLevel;
    DiskImageParamsXPC * _diskImageParamsXPC;
    NSURL * _inputURL;
    long long  _logsForwarding;
    unsigned long long  _readPassphraseFlags;
}

@property (nonatomic, readonly) bool RAMdisk;
@property (nonatomic) bool allowStoringInKeychain;
@property (nonatomic) struct shared_ptr<Backend> { struct Backend {} *x1; struct __shared_weak_count {} *x2; } backend;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{unique_ptr<crypto::header' */ struct *cryptoHeader; /* unknown property attribute:  std::__1::default_delete<crypto::header>>=^{header}}} */
@property (nonatomic) long long debugLevel;
@property (nonatomic, retain) DiskImageParamsXPC *diskImageParamsXPC;
@property (nonatomic, readonly) NSURL *inputURL;
@property (nonatomic) long long logsForwarding;
@property (nonatomic) unsigned long long rawBlockSize;
@property (nonatomic) unsigned long long readPassphraseFlags;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (bool)RAMdisk;
- (bool)allowStoringInKeychain;
- (struct shared_ptr<Backend> { struct Backend {} *x1; struct __shared_weak_count {} *x2; })backend;
- (id)copyEncryptionUUID;
- (id)copyInstanceID;
- (struct unique_ptr<crypto::header, std::__1::default_delete<crypto::header>> { struct __compressed_pair<crypto::header *, std::__1::default_delete<crypto::header>> { struct header {} *x_1_1_1; } x1; }*)cryptoHeader;
- (long long)debugLevel;
- (id)description;
- (id)diskImageParamsXPC;
- (void)encodeWithCoder:(id)arg1;
- (bool)getPassphraseFromConsoleWithUseStdin:(bool)arg1 error:(id*)arg2;
- (bool)getPassphraseFromUserWithXpcHandler:(id)arg1 error:(id*)arg2;
- (bool)hasCryptoBackend;
- (id)initWithCoder:(id)arg1;
- (id)initWithURL:(id)arg1 fileOpenMode:(unsigned short)arg2 error:(id*)arg3;
- (id)inputURL;
- (void)invalidate;
- (long long)logsForwarding;
- (unsigned long long)rawBlockSize;
- (unsigned long long)readPassphraseFlags;
- (void)setAllowStoringInKeychain:(bool)arg1;
- (void)setBackend:(struct shared_ptr<Backend> { struct Backend {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (void)setDebugLevel:(long long)arg1;
- (void)setDiskImageParamsXPC:(id)arg1;
- (void)setLogsForwarding:(long long)arg1;
- (bool)setPassphrase:(const char *)arg1 error:(id*)arg2;
- (void)setRawBlockSize:(unsigned long long)arg1;
- (void)setReadPassphraseFlags:(unsigned long long)arg1;

@end
