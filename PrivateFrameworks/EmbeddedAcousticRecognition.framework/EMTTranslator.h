/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/EmbeddedAcousticRecognition.framework/EmbeddedAcousticRecognition
 */

@interface EMTTranslator : NSObject {
    NSObject<OS_dispatch_queue> * _callbackQueue;
    struct vector<quasar::SystemConfig, std::__1::allocator<quasar::SystemConfig>> { 
        struct SystemConfig {} *__begin_; 
        struct SystemConfig {} *__end_; 
        struct __compressed_pair<quasar::SystemConfig *, std::__1::allocator<quasar::SystemConfig>> { 
            struct SystemConfig {} *__value_; 
        } __end_cap_; 
    }  _configs;
    NSLocale * _sourceLocale;
    NSLocale * _targetLocale;
    NSObject<OS_dispatch_queue> * _translationQueue;
    struct shared_ptr<quasar::Translator> { 
        struct Translator {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _translator;
    struct shared_ptr<quasar::TranslatorFactory> { 
        struct TranslatorFactory {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _translatorFactory;
}

@property (nonatomic, retain) NSObject<OS_dispatch_queue> *callbackQueue;

+ (void)initialize;

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {} *x1; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {} *x2; struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {} *x_3_1_1; } x3; })_tokenizeString:(id)arg1;
- (void)_translate:(struct vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {} *x1; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {} *x2; struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {} *x_3_1_1; } x3; })arg1 isFinal:(bool)arg2 completion:(id /* block */)arg3;
- (id)callbackQueue;
- (id)initWithModelURL:(id)arg1;
- (id)initWithModelURL:(id)arg1 task:(id)arg2;
- (id)initWithModelURLs:(id)arg1 task:(id)arg2;
- (void)loadTranslatorFrom:(id)arg1 to:(id)arg2;
- (void)prepareFor:(id)arg1 to:(id)arg2;
- (void)setCallbackQueue:(id)arg1;
- (void)translateSpeech:(id)arg1 completion:(id /* block */)arg2;
- (void)translateSpeech:(id)arg1 from:(id)arg2 to:(id)arg3 completion:(id /* block */)arg4;
- (void)translateString:(id)arg1 completion:(id /* block */)arg2;
- (void)translateString:(id)arg1 from:(id)arg2 to:(id)arg3 completion:(id /* block */)arg4;
- (void)translateTokens:(id)arg1 from:(id)arg2 to:(id)arg3 completion:(id /* block */)arg4;
- (void)translateTokens:(id)arg1 isFinal:(bool)arg2 completion:(id /* block */)arg3;

@end
