/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/KnowledgeGraphKit.framework/KnowledgeGraphKit
 */

@interface MALegacyGraph : MABaseGraph <NSXMLParserDelegate> {
    NSRecursiveLock * _accessLock;
    NSObject<OS_dispatch_queue> * _accessQueue;
    unsigned long long  _accessRead;
    void * _accessReadQueueKey;
    unsigned long long  _accessWrite;
    void * _accessWriteQueueKey;
    NSMutableDictionary * _edgesByDomain;
    NSMutableDictionary * _edgesByIdentifier;
    NSMutableDictionary * _edgesByLabel;
    NSUUID * _identifier;
    unsigned int  _lastEdgeIdentifier;
    unsigned int  _lastNodeIdentifier;
    NSMutableDictionary * _nodesByDomain;
    NSMutableDictionary * _nodesByIdentifier;
    NSMutableDictionary * _nodesByLabel;
    <MAPersistentStoreProtocol> * _persistentStore;
    unsigned long long  _version;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSUUID *identifier;
@property (nonatomic, readonly) <MAPersistentStoreProtocol> *persistentStore;
@property (readonly) Class superclass;

+ (bool)copyPersistentStoreFromURL:(id)arg1 toURL:(id)arg2 error:(id*)arg3;
+ (void)deleteMarker:(id)arg1;
+ (bool)destroyPersistentStoreAtURL:(id)arg1 error:(id*)arg2;
+ (void)disableKGDB;
+ (void)enableKGDB;
+ (bool)hasMarker:(id)arg1;
+ (void)initPersistenceFormatSwitch;
+ (bool)isMarkerDisabled;
+ (bool)migratePersistentStoreFromURL:(id)arg1 toURL:(id)arg2 error:(id*)arg3;
+ (Class)persistentStoreClass;
+ (id)persistentStoreFileExtension;
+ (id)persistentStoreURLWithPath:(id)arg1 andName:(id)arg2;
+ (bool)setMarkerAtURL:(id)arg1;

- (void).cxx_destruct;
- (void)_addEdge:(id)arg1 withIdentifier:(unsigned int)arg2 saveToDatabase:(bool)arg3;
- (id)_addEdgeFromBase:(id)arg1 sourceNode:(id)arg2 targetNode:(id)arg3 saveToDatabase:(bool)arg4;
- (id)_addEdgeWithLabel:(id)arg1 sourceNode:(id)arg2 targetNode:(id)arg3 domain:(unsigned short)arg4 weight:(float)arg5 properties:(id)arg6 identifier:(unsigned int)arg7 saveToDatabase:(bool)arg8;
- (id)_addEdgeWithLabel:(id)arg1 sourceNode:(id)arg2 targetNode:(id)arg3 domain:(unsigned short)arg4 weight:(float)arg5 properties:(id)arg6 saveToDatabase:(bool)arg7;
- (void)_addNode:(id)arg1 withIdentifier:(unsigned int)arg2 saveToDatabase:(bool)arg3;
- (id)_addNodeFromBase:(id)arg1 saveToDatabase:(bool)arg2;
- (id)_addNodeWithLabel:(id)arg1 domain:(unsigned short)arg2 weight:(float)arg3 properties:(id)arg4 identifier:(unsigned int)arg5 saveToDatabase:(bool)arg6;
- (id)_addNodeWithLabel:(id)arg1 domain:(unsigned short)arg2 weight:(float)arg3 properties:(id)arg4 saveToDatabase:(bool)arg5;
- (id)_allEdges;
- (id)_allNodes;
- (id)_edgesForDomain:(unsigned long long)arg1;
- (id)_edgesForLabel:(id)arg1;
- (id)_graphJSONDictionary;
- (void)_loadWithGraphDictionary:(id)arg1;
- (void)_loadWithGraphJSONDictionary:(id)arg1;
- (unsigned int)_nextEdgeIdentifier;
- (unsigned int)_nextNodeIdentifier;
- (id)_nodesForDomain:(unsigned long long)arg1;
- (id)_nodesForLabel:(id)arg1;
- (void)_prepareFragmentedIdentifiers;
- (void)_removeMemoryEdge:(id)arg1;
- (void)_removeMemoryEdges:(id)arg1;
- (id)_removeMemoryNode:(id)arg1;
- (id)_removeMemoryNodes:(id)arg1;
- (void)_setVersion:(unsigned long long)arg1;
- (id)addEdgeWithLabel:(id)arg1 sourceNode:(id)arg2 targetNode:(id)arg3 domain:(unsigned short)arg4 weight:(float)arg5 properties:(id)arg6;
- (id)addNodeFromBase:(id)arg1;
- (id)addNodeWithLabel:(id)arg1;
- (id)addNodeWithLabel:(id)arg1 domain:(unsigned short)arg2 weight:(float)arg3 properties:(id)arg4;
- (id)addUniqueEdgeWithLabel:(id)arg1 sourceNode:(id)arg2 targetNode:(id)arg3 domain:(unsigned short)arg4 weight:(float)arg5 properties:(id)arg6;
- (id)addUniqueNodeWithLabel:(id)arg1 domain:(unsigned short)arg2 weight:(float)arg3 properties:(id)arg4 didCreate:(bool*)arg5;
- (id)addUniquelyIdentifiedNodeWithLabel:(id)arg1 domain:(unsigned short)arg2 weight:(float)arg3 properties:(id)arg4 didCreate:(bool*)arg5;
- (id)allEdges;
- (id)allNodes;
- (id)anyNodeForLabel:(id)arg1;
- (id)anyNodeForLabel:(id)arg1 domain:(unsigned short)arg2;
- (id)anyNodeForLabel:(id)arg1 domain:(unsigned short)arg2 properties:(id)arg3;
- (id)anyNodeMatchingFilter:(id)arg1;
- (void)closePersistentStore;
- (bool)compareWithPersistedState;
- (bool)copyPersistentStoreToURL:(id)arg1 error:(id*)arg2;
- (unsigned long long)countOfNodesRelatedToNodesWithIdentifiers:(id)arg1 relation:(id)arg2;
- (id)databaseURL;
- (void)deleteMarker;
- (id)description;
- (id)edgeForIdentifier:(unsigned int)arg1;
- (id)edgeFromFetchedRowWithIdentifier:(int)arg1 domain:(short)arg2 label:(id)arg3 weight:(float)arg4 sourceNodeIdentifier:(int)arg5 targetNodeIdentifier:(int)arg6;
- (id)edgeIdentifiersMatchingFilter:(id)arg1;
- (unsigned long long)edgesCount;
- (unsigned long long)edgesCountForDomain:(unsigned short)arg1;
- (unsigned long long)edgesCountForLabel:(id)arg1;
- (unsigned long long)edgesCountForLabel:(id)arg1 domain:(unsigned short)arg2;
- (unsigned long long)edgesCountForLabel:(id)arg1 domain:(unsigned short)arg2 properties:(id)arg3;
- (id)edgesDomains;
- (id)edgesForDomain:(unsigned short)arg1;
- (id)edgesForDomains:(id)arg1;
- (id)edgesForIdentifiers:(id)arg1;
- (id)edgesForLabel:(id)arg1;
- (id)edgesForLabel:(id)arg1 domain:(unsigned short)arg2;
- (id)edgesForLabel:(id)arg1 domain:(unsigned short)arg2 properties:(id)arg3;
- (id)edgesLabels;
- (id)edgesMatchingFilter:(id)arg1;
- (bool)edgesStoreWeakReferencesToNodes;
- (void)enterBatch;
- (void)enumerateEdgesInDomain:(unsigned short)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateEdgesMatchingFilter:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateEdgesWithBlock:(id /* block */)arg1;
- (void)enumerateEdgesWithIdentifiers:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateEdgesWithLabel:(id)arg1 domain:(unsigned short)arg2 properties:(id)arg3 usingBlock:(id /* block */)arg4;
- (void)enumerateEdgesWithLabel:(id)arg1 domain:(unsigned short)arg2 usingBlock:(id /* block */)arg3;
- (void)enumerateNodesInDomain:(unsigned short)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateNodesMatchingFilter:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateNodesRelatedToNodeWithIdentifier:(unsigned int)arg1 withRelation:(id)arg2 usingBlock:(id /* block */)arg3;
- (void)enumerateNodesWithBlock:(id /* block */)arg1;
- (void)enumerateNodesWithIdentifiers:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateNodesWithLabel:(id)arg1 domain:(unsigned short)arg2 properties:(id)arg3 usingBlock:(id /* block */)arg4;
- (void)enumerateNodesWithLabel:(id)arg1 domain:(unsigned short)arg2 usingBlock:(id /* block */)arg3;
- (bool)hasMarker;
- (bool)hasPendingRead;
- (bool)hasPendingWrite;
- (unsigned long long)hash;
- (id)identifier;
- (id)initWithDataRepresentation:(id)arg1;
- (id)initWithGraphJSONURL:(id)arg1;
- (id)initWithGraphMLURL:(id)arg1;
- (id)initWithSpecification:(id)arg1;
- (id)initWithSpecification:(id)arg1 dataURL:(id)arg2;
- (id)initWithSpecification:(id)arg1 persistenceStoreURL:(id)arg2 progressBlock:(id /* block */)arg3;
- (void)invalidateMemoryCaches;
- (bool)isEqual:(id)arg1;
- (unsigned int)lastEdgeIdentifier;
- (unsigned int)lastNodeIdentifier;
- (void)leaveBatch;
- (void)loadDomains:(id)arg1;
- (unsigned long long)memoryFootprint:(id)arg1;
- (void)mergeWithGraph:(id)arg1 strictNodes:(bool)arg2 strictEdges:(bool)arg3 saveToDatabase:(bool)arg4 createdNodes:(out id*)arg5 createdEdges:(out id*)arg6;
- (bool)migratePersistentStoreToURL:(id)arg1 error:(id*)arg2;
- (id)neighborNodesThroughEdgesWithLabel:(id)arg1;
- (id)neighborNodesThroughEdgesWithLabel:(id)arg1 domain:(unsigned short)arg2;
- (Class)nodeClass;
- (id)nodeForIdentifier:(unsigned int)arg1;
- (id)nodeFromFetchedRowWithIdentifier:(int)arg1 domain:(short)arg2 label:(id)arg3 weight:(float)arg4;
- (id)nodeIdentifiersMatchingFilter:(id)arg1;
- (id)nodeIdentifiersRelatedToSourceNodeIdentifiers:(id)arg1 relation:(id)arg2;
- (unsigned long long)nodesCount;
- (unsigned long long)nodesCountForDomain:(unsigned short)arg1;
- (unsigned long long)nodesCountForLabel:(id)arg1;
- (unsigned long long)nodesCountForLabel:(id)arg1 domain:(unsigned short)arg2;
- (unsigned long long)nodesCountForLabel:(id)arg1 domain:(unsigned short)arg2 properties:(id)arg3;
- (id)nodesDomains;
- (id)nodesForDomain:(unsigned short)arg1;
- (id)nodesForDomain:(unsigned short)arg1 properties:(id)arg2;
- (id)nodesForDomains:(id)arg1;
- (id)nodesForIdentifiers:(id)arg1;
- (id)nodesForLabel:(id)arg1;
- (id)nodesForLabel:(id)arg1 domain:(unsigned short)arg2;
- (id)nodesForLabel:(id)arg1 domain:(unsigned short)arg2 properties:(id)arg3;
- (id)nodesLabels;
- (id)nodesMatchingFilter:(id)arg1;
- (unsigned long long)numberOfEdgesMatchingFilter:(id)arg1;
- (unsigned long long)numberOfNodesMatchingFilter:(id)arg1;
- (id)orphanNodes;
- (void)persistModelProperties:(id)arg1 forEdgeWithIdentifier:(unsigned int)arg2 clobberExisting:(bool)arg3;
- (void)persistModelProperties:(id)arg1 forNodeWithIdentifier:(unsigned int)arg2 clobberExisting:(bool)arg3;
- (void)persistModelProperty:(id)arg1 forKey:(id)arg2 forEdgeWithIdentifier:(unsigned int)arg3;
- (void)persistModelProperty:(id)arg1 forKey:(id)arg2 forNodeWithIdentifier:(unsigned int)arg3;
- (void)persistWeight:(float)arg1 forEdgeWithIdentifier:(unsigned int)arg2;
- (void)persistWeight:(float)arg1 forNodeWithIdentifier:(unsigned int)arg2;
- (id)persistentStore;
- (void)readUsingBlock:(id /* block */)arg1;
- (void)removeAllObjects;
- (void)removeEdge:(id)arg1;
- (void)removeEdges:(id)arg1;
- (void)removeModelPropertiesForEdgeWithIdentifier:(unsigned int)arg1;
- (void)removeModelPropertiesForNodeWithIdentifier:(unsigned int)arg1;
- (void)removeModelPropertyForKey:(id)arg1 forEdgeWithIdentifier:(unsigned int)arg2;
- (void)removeModelPropertyForKey:(id)arg1 forNodeWithIdentifier:(unsigned int)arg2;
- (void)removeNode:(id)arg1;
- (void)removeNodeEdges:(id)arg1;
- (void)removeNodes:(id)arg1;
- (bool)savePersistentStore;
- (void)savePersistentStoreWithCompletion:(id /* block */)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setMarker;
- (void)setVersion:(unsigned long long)arg1;
- (void)unloadDomains:(id)arg1;
- (void)unloadEdge:(id)arg1;
- (unsigned long long)version;
- (void)waitUntilQuiescentUsingBlock:(id /* block */)arg1;
- (void)writeUsingBlock:(id /* block */)arg1;

@end
