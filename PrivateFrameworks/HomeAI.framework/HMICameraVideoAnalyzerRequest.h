/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI
 */

@interface HMICameraVideoAnalyzerRequest : HMFObject <HMFLogging, HMICameraVideoFrameSelectorDelegate, HMIVideoEncoderDelegate, HMIVideoFrameSamplerDelegate, HMIVideoRetimerDelegate> {
    double  _analysisFPS;
    NSDate * _analysisStartTime;
    NSDate * _analysisSubmissionTime;
    HMICameraVideoAnalyzer * _analyzer;
    HMICameraVideoAssetReader * _assetReader;
    HMIVideoAssetWriter * _assetWriter;
    HMICameraVideoResourceAttributes * _attributes;
    NSMutableArray * _audioSamples;
    HMIVideoEncoder * _encoder;
    long long  _eventTypes;
    long long  _flag;
    HMICameraVideoFragment * _fragment;
    HMIVideoFrameSampler * _frameSampler;
    HMICameraVideoFrameSelector * _frameSelector;
    double  _maxAnalysisFPS;
    long long  _phase;
    HMICameraVideoPosterFrameGenerator * _posterFrameGenerator;
    HMIVideoRetimer * _retimer;
    NSMutableArray * _significantEventsInternal;
    NSMutableArray * _videoFrameResults;
}

@property (readonly) double analysisFPS;
@property (readonly) NSDate *analysisStartTime;
@property (readonly) NSDate *analysisSubmissionTime;
@property (readonly) HMICameraVideoAnalyzer *analyzer;
@property (readonly) HMICameraVideoAssetReader *assetReader;
@property (readonly) HMIVideoAssetWriter *assetWriter;
@property (readonly) HMICameraVideoResourceAttributes *attributes;
@property (readonly) NSMutableArray *audioSamples;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) HMIVideoEncoder *encoder;
@property (readonly) long long eventTypes;
@property long long flag;
@property (readonly) HMICameraVideoFragment *fragment;
@property (readonly) HMIVideoFrameSampler *frameSampler;
@property (readonly) HMICameraVideoFrameSelector *frameSelector;
@property (readonly) unsigned long long hash;
@property (readonly) double maxAnalysisFPS;
@property long long phase;
@property (readonly) HMICameraVideoPosterFrameGenerator *posterFrameGenerator;
@property (readonly) HMIVideoRetimer *retimer;
@property (readonly) bool shouldFailAnalysis;
@property (readonly) bool shouldSkipAnalysis;
@property (readonly) NSArray *significantEvents;
@property (readonly) NSMutableArray *significantEventsInternal;
@property (readonly) Class superclass;
@property (readonly) double timeSinceAnalysisStart;
@property (readonly) double timeSinceAnalysisSubmission;
@property (retain) NSMutableArray *videoFrameResults;

+ (id)logCategory;

- (void).cxx_destruct;
- (void)addSignificantEvent:(id)arg1;
- (double)analysisFPS;
- (id)analysisStartTime;
- (id)analysisSubmissionTime;
- (id)analyzer;
- (id)assetReader;
- (id)assetWriter;
- (id)attributes;
- (id)audioSamples;
- (void)cancel;
- (id)encoder;
- (void)encoder:(id)arg1 didEncodeSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2;
- (void)encoder:(id)arg1 didFailWithError:(id)arg2;
- (long long)eventTypes;
- (id)finishEncoderSession;
- (long long)flag;
- (id)fragment;
- (id)frameSampler;
- (void)frameSampler:(id)arg1 didSampleFrame:(struct opaqueCMSampleBuffer { }*)arg2;
- (id)frameSelector;
- (id)initWithVideoFragment:(id)arg1 analyzer:(id)arg2 maxAnalysisFPS:(double)arg3;
- (void)loadAttributes;
- (id)loadAttributesFromVideoFragment:(id)arg1;
- (id)logIdentifier;
- (id)makeDidAnalyzeResult;
- (id)makeDidNotAnalyzeResultWithResultCode:(long long)arg1;
- (void)markForPrediction;
- (double)maxAnalysisFPS;
- (long long)phase;
- (id)posterFrameGenerator;
- (id)retimer;
- (void)retimer:(id)arg1 didRetimeSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2;
- (void)selector:(id)arg1 didDetectMotion:(id)arg2 atSessionPTS:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 frameDimensions:(struct CGSize { double x1; double x2; })arg4;
- (void)selector:(id)arg1 maySelectFrame:(id)arg2;
- (void)setFlag:(long long)arg1;
- (void)setPhase:(long long)arg1;
- (void)setVideoFrameResults:(id)arg1;
- (bool)shouldFailAnalysis;
- (bool)shouldSkipAnalysis;
- (id)significantEvents;
- (id)significantEventsInternal;
- (void)startAnalysis;
- (bool)startAssetReaderWithWorkQueue:(id)arg1 logIdentifier:(id)arg2;
- (bool)startEncodingSessionForAsset:(id)arg1 expectedFrameRate:(long long)arg2 error:(id*)arg3;
- (bool)startFrameSelector;
- (bool)startPosterFrameGeneratorWithInterval:(unsigned long long)arg1 frameHeight:(unsigned long long)arg2;
- (double)timeSinceAnalysisStart;
- (double)timeSinceAnalysisSubmission;
- (id)videoFrameResults;

@end
