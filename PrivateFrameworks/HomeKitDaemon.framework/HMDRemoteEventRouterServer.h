/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HomeKitDaemon.framework/HomeKitDaemon
 */

@interface HMDRemoteEventRouterServer : NSObject <HMDRemoteEventAccessControlEnforcer, HMEMessageDatagramServerDataSource, HMEMessageDatagramServerDelegate, HMFLogging, HMFMessageReceiver> {
    NSMutableDictionary * _accessControls;
    HMEMessageDatagramServer * _connectionServer;
    NSMutableArray * _currentConnections;
    <HMDRemoteEventRouterServerDataSource> * _dataSource;
    NSUUID * _identifier;
    bool  _isPrimaryResident;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    NSObject<OS_os_log> * _logger;
    HMFMessageDispatcher * _messageDispatcher;
    NSNotificationCenter * _notificationCenter;
    NSString * _routerRequestMessageName;
    NSString * _routerUpdateMessageName;
    HMDEventRouterTimerProvider * _timerProvider;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property (readonly) NSMutableDictionary *accessControls;
@property (readonly) HMEMessageDatagramServer *connectionServer;
@property (readonly, copy) NSDictionary *currentAccessControls;
@property (readonly) NSMutableArray *currentConnections;
@property (readonly) <HMDRemoteEventRouterServerDataSource> *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly, copy) NSUUID *identifier;
@property (nonatomic) bool isPrimaryResident;
@property (readonly) HMFMessageDispatcher *messageDispatcher;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *messageReceiveQueue;
@property (nonatomic, readonly) NSUUID *messageTargetUUID;
@property (readonly) NSNotificationCenter *notificationCenter;
@property (readonly, copy) NSString *routerRequestMessageName;
@property (readonly, copy) NSString *routerUpdateMessageName;
@property (readonly) Class superclass;
@property (readonly) HMDEventRouterTimerProvider *timerProvider;
@property (readonly) NSObject<OS_dispatch_queue> *workQueue;

+ (id)logCategory;

- (void).cxx_destruct;
- (void)_handleChangeRegistrationsRequest:(id)arg1 originalMessage:(id)arg2;
- (void)_handleConnectRequest:(id)arg1 originalMessage:(id)arg2;
- (void)_handleDisconnectRequest:(id)arg1 originalMessage:(id)arg2;
- (void)_handleKeepAliveRequest:(id)arg1 originalMessage:(id)arg2;
- (void)_handleRequestMessage:(id)arg1;
- (void)_handleUpdatedPrimaryResidentNotification:(id)arg1;
- (void)_registerForMessages:(id)arg1;
- (id)accessControls;
- (void)configureIsPrimaryResident:(bool)arg1 additionalPolicies:(id)arg2;
- (id)connectionServer;
- (id)currentAccessControls;
- (id)currentConnections;
- (id)dataSource;
- (id)dumpStateDescription;
- (id)identifier;
- (id)initWithUUID:(id)arg1 queue:(id)arg2 messageDispatcher:(id)arg3 dataSource:(id)arg4 notificationCenter:(id)arg5 requestMessageName:(id)arg6 updateMessageName:(id)arg7 logCategory:(const char *)arg8 connectionServerFactory:(id /* block */)arg9;
- (id)initWithUUID:(id)arg1 queue:(id)arg2 messageDispatcher:(id)arg3 dataSource:(id)arg4 notificationCenter:(id)arg5 requestMessageName:(id)arg6 updateMessageName:(id)arg7 subscriptionProvider:(id)arg8 registrationEventRouter:(id)arg9 storeReadHandle:(id)arg10;
- (bool)isPrimaryResident;
- (id)logIdentifier;
- (id)messageDispatcher;
- (id)messageReceiveQueue;
- (id)messageTargetUUID;
- (id)notificationCenter;
- (id)routerRequestMessageName;
- (id)routerUpdateMessageName;
- (void)sendMessageWithPayloadMessage:(id)arg1 destination:(id)arg2 completion:(id /* block */)arg3;
- (void)server:(id)arg1 connectionDidExpire:(id)arg2;
- (bool)server:(id)arg1 isConnectionTerminatingError:(id)arg2;
- (void)server:(id)arg1 sendEvents:(id)arg2 connection:(id)arg3 completion:(id /* block */)arg4;
- (double)server:(id)arg1 timeoutIntervalForConnection:(id)arg2;
- (bool)serverShouldProcessEvents:(id)arg1;
- (id)serverTimerProvider:(id)arg1;
- (void)setAccessControlsForTopics:(id)arg1;
- (void)setIsPrimaryResident:(bool)arg1;
- (bool)shouldAllowEvent:(id)arg1 topic:(id)arg2 connection:(id)arg3;
- (id)timerProvider;
- (id)workQueue;

@end
