/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/WorkflowKit.framework/WorkflowKit
 */

@interface WFDatabase : NSObject <VCDatabaseProvider> {
    NSObject<OS_dispatch_queue> * _callbackQueue;
    NSManagedObjectContext * _context;
    bool  _destroysOnDeallocation;
    NSURL * _fileURL;
    NSHashTable * _observers;
    WFCoreDataChangeNotification * _pendingChangeNotification;
    NSPersistentStoreDescription * _persistentStoreDescription;
    NSHashTable * _resultsToNotify;
    NSManagedObjectContext * _suggestionsContext;
    long long  _transactionCount;
}

@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *callbackQueue;
@property (nonatomic, retain) NSManagedObjectContext *context;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool destroysOnDeallocation;
@property (nonatomic, readonly) NSURL *fileURL;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSHashTable *observers;
@property (nonatomic, retain) WFCoreDataChangeNotification *pendingChangeNotification;
@property (nonatomic, retain) NSPersistentStoreDescription *persistentStoreDescription;
@property (nonatomic, retain) NSHashTable *resultsToNotify;
@property (nonatomic, retain) NSManagedObjectContext *suggestionsContext;
@property (readonly) Class superclass;
@property (nonatomic) long long transactionCount;

// Image: /System/Library/PrivateFrameworks/WorkflowKit.framework/WorkflowKit

+ (id)createDatabaseForTesting;
+ (id)defaultDatabase;
+ (void)setDefaultDatabase:(id)arg1;

- (void).cxx_destruct;
- (id)_createWorkflowWithOptions:(id)arg1 error:(id*)arg2;
- (id)_syncTokenWithError:(id*)arg1;
- (id)accessResourceStatesForReference:(id)arg1;
- (id)accessResourcesForReference:(id)arg1;
- (void)accessStorageForDescriptor:(id)arg1 forWriting:(bool)arg2 readingRecordProperties:(id)arg3 usingBlock:(id /* block */)arg4 withError:(id*)arg5;
- (void)addActionCountsToShortcutsIfNecessary;
- (void)addObjectObserver:(id)arg1;
- (void)addSyncHashesToShortcutsIfNecessary;
- (id)allCollections;
- (id)allConfiguredTriggers;
- (id)allShortcutSuggestions;
- (id)allShortcuts;
- (id)callbackQueue;
- (void)clearTombstonesAndSyncState;
- (id)collectionForWorkflowType:(id)arg1;
- (id)collectionRecordForCollectionIdentifier:(id)arg1 createIfNecessary:(bool)arg2;
- (id)collectionResultWithFetchRequest:(id)arg1;
- (id)collectionWithIdentifier:(id)arg1;
- (id)collectionsForWorkflowReference:(id)arg1;
- (id)configuredTriggerForTriggerID:(id)arg1;
- (id)configuredTriggersForWorkflowID:(id)arg1;
- (id)conflictForWorkflowReference:(id)arg1;
- (id)conflictingReferenceForReference:(id)arg1;
- (id)context;
- (void)contextDidSave:(id)arg1;
- (unsigned long long)countForResult:(id)arg1;
- (unsigned long long)countOfAllVisibleWorkflows;
- (unsigned long long)countOfWorkflowsInAFolder;
- (id)createFolderWithName:(id)arg1 icon:(id)arg2 error:(id*)arg3;
- (id)createTriggerEventWithTriggerID:(id)arg1 eventInfo:(id)arg2 confirmed:(bool)arg3 error:(id*)arg4;
- (id)createTriggerWithRecord:(id)arg1 workflow:(id)arg2 error:(id*)arg3;
- (id)createWorkflowWithError:(id*)arg1;
- (bool)createWorkflowWithIdentifier:(id)arg1 record:(id)arg2 error:(id*)arg3;
- (id)createWorkflowWithOptions:(id)arg1 error:(id*)arg2;
- (id)createWorkflowWithOptions:(id)arg1 nameCollisionBehavior:(unsigned long long)arg2 error:(id*)arg3;
- (id)currentPerWorkflowStateDataForAccessResourceWithIdentifier:(id)arg1 forReference:(id)arg2;
- (void)dealloc;
- (void)deleteAllAccessResourceStateDataForReference:(id)arg1;
- (void)deleteDonationsForShortcutWithIdentifier:(id)arg1;
- (bool)deleteReference:(id)arg1 error:(id*)arg2;
- (bool)deleteReference:(id)arg1 tombstone:(bool)arg2 deleteConflictIfPresent:(bool)arg3 error:(id*)arg4;
- (void)deleteShortcutSuggestionsFromApps:(id)arg1;
- (id)deletedFolders;
- (id)deletedWorkflows;
- (id)descriptorsForResult:(id)arg1 error:(id*)arg2;
- (bool)destroysOnDeallocation;
- (id)duplicateNameErrorWithName:(id)arg1;
- (id)duplicateReference:(id)arg1 error:(id*)arg2;
- (id)duplicateReference:(id)arg1 newName:(id)arg2 error:(id*)arg3;
- (id)fileURL;
- (id)folderForWorkflowReference:(id)arg1;
- (bool)hasConflictingReferenceForReference:(id)arg1;
- (bool)hasVisibleWorkflowsWithName:(id)arg1;
- (id)initWithStoreDescription:(id)arg1 runMigrationsIfNecessary:(bool)arg2 error:(id*)arg3;
- (bool)isEqual:(id)arg1;
- (bool)isReference:(id)arg1 allowedToRunOnDomain:(id)arg2;
- (id)latestRunEvent;
- (id)localConflictingReferenceForReference:(id)arg1;
- (id)logRunOfWorkflow:(id)arg1 atDate:(id)arg2 withIdentifier:(id)arg3 source:(id)arg4 triggerID:(id)arg5;
- (id)logRunOfWorkflow:(id)arg1 withSource:(id)arg2 triggerID:(id)arg3;
- (bool)mergeAutomationsAndShortcuts;
- (id)missingErrorForDescriptor:(id)arg1;
- (id)mostRunOrLatestImportedVisibleShortcut;
- (bool)moveCollections:(id)arg1 toIndex:(unsigned long long)arg2 error:(id*)arg3;
- (bool)moveCollections:(id)arg1 toIndexes:(id)arg2 error:(id*)arg3;
- (bool)moveCollections:(id)arg1 toIndexes:(id)arg2 ofCollectionWithIdentifier:(id)arg3 error:(id*)arg4;
- (bool)moveReferences:(id)arg1 toIndex:(long long)arg2 ofCollection:(id)arg3 error:(id*)arg4;
- (bool)moveReferences:(id)arg1 toIndex:(long long)arg2 ofCollection:(id)arg3 visible:(bool)arg4 error:(id*)arg5;
- (bool)moveReferences:(id)arg1 toIndexes:(id)arg2 ofCollection:(id)arg3 error:(id*)arg4;
- (bool)moveReferences:(id)arg1 toIndexes:(id)arg2 ofCollection:(id)arg3 visible:(bool)arg4 error:(id*)arg5;
- (void)notifyResultsAboutChange:(id)arg1;
- (id)objectForDescriptor:(id)arg1 properties:(id)arg2;
- (id)objectForDescriptor:(id)arg1 properties:(id)arg2 createIfNecessary:(bool)arg3;
- (id)objectOfClass:(Class)arg1 withIdentifier:(id)arg2 forKey:(id)arg3 createIfNecessary:(bool)arg4 properties:(id)arg5;
- (id)observers;
- (id)orphanedFolders;
- (id)orphanedFoldersPredicate;
- (id)orphanedShortcuts;
- (id)orphanedWorkflowsPredicate;
- (id)pendingChangeNotification;
- (id)performOperationWithBlock:(id /* block */)arg1 error:(id*)arg2;
- (id)performSaveOperationWithBlock:(id /* block */)arg1 error:(id*)arg2;
- (id)performSuggestionsOperationWithBlock:(id /* block */)arg1 error:(id*)arg2;
- (void)performTransactionWithBlock:(id /* block */)arg1 error:(id*)arg2;
- (id)persistentStoreDescription;
- (bool)prependReferences:(id)arg1 toCollection:(id)arg2 error:(id*)arg3;
- (bool)prependReferences:(id)arg1 toCollectionWithType:(id)arg2 error:(id*)arg3;
- (Class)recordClassForObjectType:(unsigned long long)arg1;
- (id)recordWithDescriptor:(id)arg1 error:(id*)arg2;
- (id)recordWithDescriptor:(id)arg1 properties:(id)arg2 error:(id*)arg3;
- (id)referenceForWorkflowID:(id)arg1;
- (bool)reloadRecord:(id)arg1 withDescriptor:(id)arg2 error:(id*)arg3;
- (id)remoteConflictingReferenceForReference:(id)arg1;
- (void)remoteContextDidSave:(id)arg1;
- (void)removeObjectObserver:(id)arg1;
- (bool)removeReferences:(id)arg1 fromCollectionWithIdentifier:(id)arg2 error:(id*)arg3;
- (void)removeRunEventsWithoutAssociatedShortcuts;
- (id)renameReference:(id)arg1 to:(id)arg2 error:(id*)arg3;
- (id)resultsToNotify;
- (bool)saveContextOrRollback:(id)arg1 error:(id*)arg2;
- (bool)saveRecord:(id)arg1 withDescriptor:(id)arg2 error:(id*)arg3;
- (void)setConfirmedForTriggerEventWithIdentifier:(id)arg1 error:(id*)arg2;
- (void)setConflictingReference:(id)arg1 forReference:(id)arg2;
- (void)setContext:(id)arg1;
- (void)setDestroysOnDeallocation:(bool)arg1;
- (void)setObservers:(id)arg1;
- (void)setOutcome:(long long)arg1 forRunEvent:(id)arg2;
- (void)setPendingChangeNotification:(id)arg1;
- (void)setPerWorkflowStateData:(id)arg1 forAccessResourceWithIdentifier:(id)arg2 forReference:(id)arg3;
- (void)setPersistentStoreDescription:(id)arg1;
- (void)setResultsToNotify:(id)arg1;
- (bool)setShortcutSuggestions:(id)arg1 forAppWithBundleIdentifier:(id)arg2 error:(id*)arg3;
- (void)setSuggestionsContext:(id)arg1;
- (void)setSyncToken:(id)arg1;
- (void)setTransactionCount:(long long)arg1;
- (void)setTrustedToRunScripts:(bool)arg1 forReference:(id)arg2 onDomain:(id)arg3;
- (id)shortcutSuggestionsForAllAppsWithLimit:(unsigned long long)arg1 shortcutAvailability:(unsigned long long)arg2 error:(id*)arg3;
- (id)shortcutSuggestionsForAppWithBundleIdentifier:(id)arg1 shortcutAvailability:(unsigned long long)arg2 error:(id*)arg3;
- (id)sortedRunEventsForTriggerID:(id)arg1;
- (id)sortedRunEventsWithSource:(id)arg1;
- (id)sortedRunEventsWithSource:(id)arg1 startDate:(id)arg2 endDate:(id)arg3;
- (id)sortedTriggerEventsWithConfirmationOnly:(bool)arg1;
- (id)sortedVisibleFolders;
- (id)sortedVisibleWorkflowsByName;
- (id)sortedVisibleWorkflowsInCollection:(id)arg1;
- (id)sortedVisibleWorkflowsWithAssociatedAppBundleIdentifier:(id)arg1;
- (id)sortedVisibleWorkflowsWithType:(id)arg1;
- (id)sortedWorkflowsWithQuery:(id)arg1;
- (bool)startObservingChangesForResult:(id)arg1;
- (id)suggestedFolderNameForName:(id)arg1;
- (id)suggestedWorkflowNameForName:(id)arg1;
- (id)suggestionsContext;
- (id)syncToken;
- (id)tombstonedShortcutsPredicate;
- (long long)transactionCount;
- (id)triggerEventForIdentifier:(id)arg1 error:(id*)arg2;
- (id)triggerResultWithFetchRequest:(id)arg1;
- (id)uniqueVisibleReferenceForWorkflowName:(id)arg1;
- (id)updateFolder:(id)arg1 newName:(id)arg2 newIcon:(id)arg3 error:(id*)arg4;
- (id)validateFolderName:(id)arg1 forCollection:(id)arg2 error:(id*)arg3;
- (id)validateWorkflowName:(id)arg1 forCreation:(bool)arg2 overwriting:(bool)arg3 error:(id*)arg4;
- (id)visibleCollectionForFolderName:(id)arg1;
- (id)visiblePredicate;
- (id)visibleReferencesForWorkflowName:(id)arg1;
- (id)workflowFetchRequestWithCollectionID:(id)arg1 includeTombstones:(bool)arg2 limit:(unsigned long long)arg3;
- (id)workflowResultWithFetchOperation:(id)arg1;
- (id)workflowResultWithFetchRequest:(id)arg1;
- (id)workflowsWithTombstonedConflicts;

// Image: /System/Library/PrivateFrameworks/VoiceShortcuts.framework/VoiceShortcuts

- (id)databaseWithError:(id*)arg1;

@end
