/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AVFAudio.framework/AVFAudio
 */

@interface AVVoiceController : NSObject <AVAudioRemoteInputPlugin_PrivateTest> {
    unsigned long long  _alertStartTime;
    void * _impl;
}

@property (readonly) unsigned long long alertStartTime;
@property float alertVolume;
@property (getter=isBargeInDetectEnabled) bool bargeInDetectEnabled;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (setter=setDuckOthersOption:) bool duckOthersOption;
@property (retain) <Endpointer> *endpointerDelegate;
@property (readonly) unsigned long long hash;
@property (readonly) unsigned long long lastRecordStartTime;
@property (getter=isMeteringEnabled) bool meteringEnabled;
@property (readonly) NSDictionary *metrics;
@property (readonly) unsigned long long numberOfChannels;
@property (readonly) AVAudioFormat *pcmRecordBufferFormat;
@property <AVVoiceControllerPlaybackDelegate> *playbackDelegate;
@property (readonly, copy) NSString *playbackRoute;
@property (readonly) NSDictionary *playbackSettings;
@property float playbackVolume;
@property (getter=isPlaying, readonly) bool playing;
@property <AVVoiceControllerRecordDelegate> *recordDelegate;
@property double recordEndWaitTime;
@property int recordEndpointMode;
@property double recordInterspeechWaitTime;
@property (readonly, copy) NSString *recordRoute;
@property (readonly) NSDictionary *recordSettings;
@property double recordStartWaitTime;
@property (getter=isRecording, readonly) bool recording;
@property (getter=isStopOnBargeInEnabled) bool stopOnBargeInEnabled;
@property (getter=isStopOnEndpointEnabled) bool stopOnEndpointEnabled;
@property (readonly) Class superclass;
@property (getter=isSynchronousCallbackEnabled) bool synchronousCallbackEnabled;
@property (readonly) NSDictionary *voiceTriggerInfo;

- (bool)IsDeviceAvailableInLocalRoute:(id)arg1 error:(id*)arg2;
- (bool)activateAudioSessionForStream:(unsigned long long)arg1 isPrewarm:(bool)arg2 error:(id*)arg3;
- (bool)activateAudioSessionForStream:(unsigned long long)arg1 isPrewarm:(bool)arg2 recordMode:(bool)arg3 error:(id*)arg4;
- (void)alertPlaybackFinishedOfType_v1v2:(int)arg1;
- (unsigned long long)alertStartTime;
- (float)alertVolume;
- (float)averagePowerForChannel:(unsigned long long)arg1;
- (void)beganPlaying;
- (void)beganRecording_v1v2:(id)arg1;
- (void)beginAudioSessionActivate_v1v2:(bool)arg1;
- (void)beginPlaybackInterruption_v1v2;
- (void)beginRecordInterruptionWithContext_v1v2:(id)arg1;
- (void)beginRecordInterruption_v1v2;
- (void)configureAlertBehavior:(id)arg1;
- (bool)configureAlertBehaviorForStream:(id)arg1 error:(id*)arg2;
- (id)currentRecordDeviceInfo;
- (void)deactivateAudioSessionForStream:(unsigned long long)arg1 withOptions:(unsigned long long)arg2 error:(id*)arg3;
- (void)deactivateAudioSessionWithOptions:(unsigned long long)arg1;
- (void)dealloc;
- (void)decodeError;
- (int)doStartRecordingAtTime_v1:(unsigned long long)arg1 behavior:(id)arg2;
- (bool)duckOthersOption;
- (void)enableMiniDucking:(bool)arg1;
- (bool)enableSmartRoutingConsiderationForStream:(unsigned long long)arg1 enable:(bool)arg2 error:(id*)arg3;
- (void)encodeError;
- (void)endAudioSessionActivate_v1v2:(bool)arg1;
- (void)endPlaybackInterruption_v1v2;
- (void)endRecordInterruption_v1v2;
- (void)endpointDetected;
- (id)endpointerDelegate;
- (void)finalize;
- (void)finishedPlaying_v1v2;
- (void)finishedRecording_v1v2:(id)arg1;
- (unsigned long long)getAlertStartTime;
- (float)getAveragePowerForStream:(unsigned long long)arg1 forChannel:(unsigned long long)arg2;
- (long long)getCurrentSessionState;
- (long long)getCurrentSessionStateForStream:(unsigned long long)arg1;
- (long long)getCurrentStreamState:(unsigned long long)arg1;
- (float)getPeakPowerForStream:(unsigned long long)arg1 forChannel:(unsigned long long)arg2;
- (double)getPlaybackBufferDuration;
- (double)getRecordBufferDuration;
- (double)getRecordBufferDurationForStream:(unsigned long long)arg1;
- (id)getRecordDeviceInfoForStream:(unsigned long long)arg1;
- (long long)getRecordModeForStream:(unsigned long long)arg1;
- (id)getRecordSettingsForStream:(unsigned long long)arg1;
- (void)handleInterruption_v1v2:(id)arg1;
- (void)handleMediaServerDeath_v1v2:(id)arg1;
- (void)handleMediaServerReset_v1v2:(id)arg1;
- (void)handlePluginDidPublishDevice:(id)arg1 withDevice:(id)arg2;
- (void)handlePluginDidUnpublishDevice:(id)arg1 withDevice:(id)arg2;
- (void)handleRouteChange_v1v2:(id)arg1;
- (void)hardwareConfigChanged;
- (struct ControllerImpl { int (**x1)(); id x2; id x3; id x4; bool x5; struct GenericRunLoopThread {} *x6; bool x7; float x8; id x9; struct __CFDictionary {} *x10; unsigned int x11; id x12; id x13; struct CAStreamBasicDescription { double x_14_1_1; unsigned int x_14_1_2; unsigned int x_14_1_3; unsigned int x_14_1_4; unsigned int x_14_1_5; unsigned int x_14_1_6; unsigned int x_14_1_7; unsigned int x_14_1_8; unsigned int x_14_1_9; } x14; double x15; struct OpaqueAudioQueue {} *x16; int x17; id x18; unsigned int x19; struct AudioQueueBuffer {} **x20; int x21; bool x22; bool x23; bool x24; bool x25; bool x26; bool x27; float x28; unsigned int x29; long long x30; struct CAStreamBasicDescription { double x_31_1_1; unsigned int x_31_1_2; unsigned int x_31_1_3; unsigned int x_31_1_4; unsigned int x_31_1_5; unsigned int x_31_1_6; unsigned int x_31_1_7; unsigned int x_31_1_8; unsigned int x_31_1_9; } x31; long long x32; struct OpaqueAudioQueue {} *x33; struct map<AVVoiceAlertType, NSURL *, std::__1::less<AVVoiceAlertType>, std::__1::allocator<std::__1::pair<const AVVoiceAlertType, NSURL *>>> { struct __tree<std::__1::__value_type<AVVoiceAlertType, NSURL *>, std::__1::__map_value_compare<AVVoiceAlertType, std::__1::__value_type<AVVoiceAlertType, NSURL *>, std::__1::less<AVVoiceAlertType>, true>, std::__1::allocator<std::__1::__value_type<AVVoiceAlertType, NSURL *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<AVVoiceAlertType, NSURL *>, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<AVVoiceAlertType, std::__1::__value_type<AVVoiceAlertType, NSURL *>, std::__1::less<AVVoiceAlertType>, true>> { unsigned long long x_3_3_1; } x_1_2_3; } x_34_1_1; } x34; }*)impl;
- (id)initWithContext:(id)arg1 error:(id*)arg2;
- (id)initWithError:(id*)arg1;
- (void)interspeechPointDetected;
- (bool)isBargeInDetectEnabled;
- (bool)isMeteringEnabled;
- (bool)isMeteringEnabledForStream:(unsigned long long)arg1;
- (bool)isPlaying;
- (bool)isRecording;
- (bool)isStopOnBargeInEnabled;
- (bool)isStopOnEndpointEnabled;
- (bool)isSynchronousCallbackEnabled;
- (unsigned long long)lastRecordStartTime;
- (id)metrics;
- (id)mockPluginEndpoint;
- (void)notifyStreamInvalidated_v1v2:(unsigned long long)arg1;
- (unsigned long long)numberOfChannels;
- (id)pcmRecordBufferFormat;
- (float)peakPowerForChannel:(unsigned long long)arg1;
- (void)playAlert:(int)arg1 withOverride:(long long)arg2 completion:(id /* block */)arg3;
- (bool)playAlertSoundForType:(int)arg1;
- (bool)playAlertSoundForType:(int)arg1 overrideMode:(long long)arg2;
- (bool)playRecordStartingAlertAndResetEndpointer;
- (void)playbackBufferReceived:(struct MyAudioQueueBuffer { unsigned int x1; void *x2; unsigned int x3; void *x4; unsigned int x5; struct AudioStreamPacketDescription {} *x6; unsigned int x7; struct AudioStreamBasicDescription { double x_8_1_1; unsigned int x_8_1_2; unsigned int x_8_1_3; unsigned int x_8_1_4; unsigned int x_8_1_5; unsigned int x_8_1_6; unsigned int x_8_1_7; unsigned int x_8_1_8; unsigned int x_8_1_9; } x8; bool x9; unsigned char x10; unsigned char x11; bool x12; }*)arg1;
- (id)playbackDelegate;
- (id)playbackRoute;
- (id)playbackSettings;
- (float)playbackVolume;
- (bool)prepareListenWithSettings:(id)arg1 error:(id*)arg2;
- (bool)preparePlaybackFromURL:(id)arg1 error:(id*)arg2;
- (bool)preparePlaybackWithSettings:(id)arg1 error:(id*)arg2;
- (void)prepareRecordForStream:(id)arg1 completion:(id /* block */)arg2;
- (bool)prepareRecordForStream:(id)arg1 error:(id*)arg2;
- (bool)prepareRecordWithSettings:(id)arg1 error:(id*)arg2;
- (void)prewarmAudioSession;
- (id)recordDelegate;
- (double)recordEndWaitTime;
- (int)recordEndpointMode;
- (double)recordInterspeechWaitTime;
- (id)recordRoute;
- (id)recordSettings;
- (double)recordStartWaitTime;
- (oneway void)release;
- (void)releaseAudioSession;
- (void)releaseAudioSession:(unsigned long long)arg1;
- (bool)releaseAudioSessionForListening:(id*)arg1;
- (bool)releaseAudioSessionForListening:(unsigned long long)arg1 error:(id*)arg2;
- (void)removeSessionNotifications:(id)arg1;
- (void)resetEndpointer;
- (id)retain;
- (void)sendRemoteConnectionMessage:(id)arg1;
- (void)sessionCleanup_v1v2;
- (void)sessionSetup_v1v2;
- (bool)setAlertSoundFromURL:(id)arg1 forType:(int)arg2;
- (void)setAlertVolume:(float)arg1;
- (bool)setAnnounceCallsEnabledForStream:(unsigned long long)arg1 enable:(bool)arg2;
- (void)setBargeInDetectEnabled:(bool)arg1;
- (unsigned long long)setContext:(id)arg1 error:(id*)arg2;
- (unsigned long long)setContext:(id)arg1 streamType:(long long*)arg2 error:(id*)arg3;
- (bool)setContextForStream:(id)arg1 forStream:(unsigned long long)arg2 error:(id*)arg3;
- (bool)setCurrentContext:(id)arg1 error:(id*)arg2;
- (void)setDuckOthersOption:(bool)arg1;
- (void)setEndpointerDelegate:(id)arg1;
- (void)setMeteringEnabled:(bool)arg1;
- (bool)setPlaybackBufferDuration:(double)arg1;
- (void)setPlaybackDelegate:(id)arg1;
- (void)setPlaybackVolume:(float)arg1;
- (bool)setRecordBufferDuration:(double)arg1;
- (void)setRecordDelegate:(id)arg1;
- (void)setRecordEndWaitTime:(double)arg1;
- (void)setRecordEndpointMode:(int)arg1;
- (void)setRecordInterspeechWaitTime:(double)arg1;
- (bool)setRecordMode:(long long)arg1 error:(id*)arg2;
- (bool)setRecordModeForStream:(unsigned long long)arg1 recordMode:(long long)arg2 error:(id*)arg3;
- (void)setRecordStartWaitTime:(double)arg1;
- (void)setRecordStatusChangeBlock:(id /* block */)arg1;
- (void)setSessionNotifications_v1v2:(id)arg1;
- (void)setStopOnBargeInEnabled:(bool)arg1;
- (void)setStopOnEndpointEnabled:(bool)arg1;
- (void)setSynchronousCallbackEnabled:(bool)arg1;
- (void)setupAlertBehavior_v1:(id)arg1;
- (bool)startListening:(id*)arg1;
- (bool)startListeningWithSettings:(id)arg1 error:(id*)arg2;
- (bool)startPlaying;
- (bool)startRecordForStream:(id)arg1 error:(id*)arg2;
- (void)startRecordWithSettings:(id)arg1 completion:(id /* block */)arg2 alertCompletion:(id /* block */)arg3 audioCallback:(id /* block */)arg4;
- (bool)startRecording;
- (bool)startRecording:(id*)arg1;
- (bool)startRecordingAtTime:(unsigned long long)arg1 error:(id*)arg2;
- (bool)startRecordingWithSettings:(id)arg1 error:(id*)arg2;
- (void)startpointDetected;
- (void)stopPlaying;
- (bool)stopRecordForStream:(unsigned long long)arg1 error:(id*)arg2;
- (void)stopRecordOnStream:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (void)stopRecording;
- (bool)updateMeterForStream:(unsigned long long)arg1;
- (void)updateMeters;
- (id)voiceTriggerInfo;
- (bool)willAcceptContext:(id)arg1;

@end
