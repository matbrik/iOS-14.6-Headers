/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CVNLP.framework/CVNLP
 */

@interface CVNLPActivationMatrix : NSObject {
    long long  __cachedBlankIndex;
    long long  __cachedBlankIndexTimestep;
    long long  __cachedPriorityQueueTimestep;
    struct CVNLPCTCPriorityQueue { struct priority_queue<CVNLPCTCCandidate, std::__1::vector<CVNLPCTCCandidate, std::__1::allocator<CVNLPCTCCandidate>>, CVNLPCTCPriorityQueue::QueueComparison> { struct vector<CVNLPCTCCandidate, std::__1::allocator<CVNLPCTCCandidate>> { struct CVNLPCTCCandidate {} *x_1_2_1; struct CVNLPCTCCandidate {} *x_1_2_2; struct __compressed_pair<CVNLPCTCCandidate *, std::__1::allocator<CVNLPCTCCandidate>> { struct CVNLPCTCCandidate {} *x_3_3_1; } x_1_2_3; } x_1_1_1; struct QueueComparison { } x_1_1_2; } x1; bool x2; struct vector<CVNLPCTCCandidate, std::__1::allocator<CVNLPCTCCandidate>> { struct CVNLPCTCCandidate {} *x_3_1_1; struct CVNLPCTCCandidate {} *x_3_1_2; struct __compressed_pair<CVNLPCTCCandidate *, std::__1::allocator<CVNLPCTCCandidate>> { struct CVNLPCTCCandidate {} *x_3_2_1; } x_3_1_3; } x3; } * __cachedTimesample;
    double * __doubleScoreMatrix;
    struct { 
        void *data; 
        void *reserved; 
        unsigned long long dim[4]; 
        unsigned long long stride[4]; 
        unsigned long long width; 
        unsigned long long height; 
        unsigned long long channels; 
        unsigned long long batch_number; 
        unsigned long long sequence_length; 
        unsigned long long stride_width; 
        unsigned long long stride_height; 
        unsigned long long stride_channels; 
        unsigned long long stride_batch_number; 
        unsigned long long stride_sequence_length; 
        int storage_type; 
    }  __espressoBuffer;
    MLMultiArray * __indexArray;
    struct { 
        void *data; 
        void *reserved; 
        unsigned long long dim[4]; 
        unsigned long long stride[4]; 
        unsigned long long width; 
        unsigned long long height; 
        unsigned long long channels; 
        unsigned long long batch_number; 
        unsigned long long sequence_length; 
        unsigned long long stride_width; 
        unsigned long long stride_height; 
        unsigned long long stride_channels; 
        unsigned long long stride_batch_number; 
        unsigned long long stride_sequence_length; 
        int storage_type; 
    }  __indexBuffer;
    bool  __isDoubleDataType;
    MLMultiArray * __multiArray;
    long long  __observationCount;
    long long  __observationStride;
    struct CVNLPTextDecodingPruningPolicy { 
        long long strategy; 
        bool shouldSort; 
        float threshold; 
        unsigned int maxNumberOfCandidates; 
    }  __pruningPolicy;
    long long  __timeStride;
    long long  __timestepCount;
    long long  __type;
    bool  __usingIndexes;
    long long  _blankIndex;
    NSOrderedSet * _characterObservations;
    long long  _domainType;
}

@property (nonatomic, readonly) long long _cachedBlankIndex;
@property (nonatomic, readonly) long long _cachedBlankIndexTimestep;
@property long long _cachedPriorityQueueTimestep;
@property /* Warning: unhandled struct encoding: '{CVNLPCTCPriorityQueue={priority_queue<CVNLPCTCCandidate' */ struct *_cachedTimesample; /* unknown property attribute:  std::__1::allocator<CVNLPCTCCandidate>>=^{CVNLPCTCCandidate}}}} */
@property (nonatomic) double*_doubleScoreMatrix;
@property (nonatomic) struct { void *x1; void *x2; unsigned long long x3[4]; unsigned long long x4[4]; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; int x15; } _espressoBuffer;
@property (nonatomic, retain) MLMultiArray *_indexArray;
@property (nonatomic) struct { void *x1; void *x2; unsigned long long x3[4]; unsigned long long x4[4]; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; int x15; } _indexBuffer;
@property (nonatomic) bool _isDoubleDataType;
@property (nonatomic, retain) MLMultiArray *_multiArray;
@property (nonatomic) long long _observationCount;
@property (nonatomic) long long _observationStride;
@property (nonatomic) struct CVNLPTextDecodingPruningPolicy { long long x1; bool x2; float x3; unsigned int x4; } _pruningPolicy;
@property (nonatomic) long long _timeStride;
@property (nonatomic) long long _timestepCount;
@property (nonatomic) long long _type;
@property (nonatomic) bool _usingIndexes;
@property (nonatomic) long long blankIndex;
@property (nonatomic, retain) NSOrderedSet *characterObservations;
@property (nonatomic, readonly) long long domainType;

- (void).cxx_destruct;
- (long long)_cachedBlankIndex;
- (long long)_cachedBlankIndexTimestep;
- (long long)_cachedPriorityQueueTimestep;
- (struct CVNLPCTCPriorityQueue { struct priority_queue<CVNLPCTCCandidate, std::__1::vector<CVNLPCTCCandidate, std::__1::allocator<CVNLPCTCCandidate>>, CVNLPCTCPriorityQueue::QueueComparison> { struct vector<CVNLPCTCCandidate, std::__1::allocator<CVNLPCTCCandidate>> { struct CVNLPCTCCandidate {} *x_1_2_1; struct CVNLPCTCCandidate {} *x_1_2_2; struct __compressed_pair<CVNLPCTCCandidate *, std::__1::allocator<CVNLPCTCCandidate>> { struct CVNLPCTCCandidate {} *x_3_3_1; } x_1_2_3; } x_1_1_1; struct QueueComparison { } x_1_1_2; } x1; bool x2; struct vector<CVNLPCTCCandidate, std::__1::allocator<CVNLPCTCCandidate>> { struct CVNLPCTCCandidate {} *x_3_1_1; struct CVNLPCTCCandidate {} *x_3_1_2; struct __compressed_pair<CVNLPCTCCandidate *, std::__1::allocator<CVNLPCTCCandidate>> { struct CVNLPCTCCandidate {} *x_3_2_1; } x_3_1_3; } x3; }*)_cachedTimesample;
- (id)_candidateSymbolAtIndex:(long long)arg1 forTimestep:(long long)arg2 outputScore:(double*)arg3;
- (double*)_doubleScoreMatrix;
- (void)_enumerateNonBlankCandidatesInTimestep:(long long)arg1 block:(id /* block */)arg2;
- (struct { void *x1; void *x2; unsigned long long x3[4]; unsigned long long x4[4]; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; int x15; })_espressoBuffer;
- (id)_indexArray;
- (struct { void *x1; void *x2; unsigned long long x3[4]; unsigned long long x4[4]; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; int x15; })_indexBuffer;
- (bool)_isDoubleDataType;
- (id)_multiArray;
- (long long)_observationCount;
- (long long)_observationStride;
- (struct CVNLPTextDecodingPruningPolicy { long long x1; bool x2; float x3; unsigned int x4; })_pruningPolicy;
- (void)_sortNonBlankCandidatesForTimestep:(long long)arg1;
- (long long)_timeStride;
- (long long)_timestepCount;
- (long long)_type;
- (bool)_usingIndexes;
- (double)_valueForObservationIndex:(long long)arg1 timestep:(long long)arg2;
- (long long)blankIndex;
- (long long)blankIndexForTimestep:(long long)arg1;
- (long long)characterIndexForObservationIndex:(long long)arg1 timestep:(long long)arg2;
- (id)characterObservations;
- (void)dealloc;
- (long long)domainType;
- (void)enumerateNonBlankCandidatesInTimestep:(long long)arg1 block:(id /* block */)arg2;
- (id)initWithBuffer:(struct { void *x1; void *x2; unsigned long long x3[4]; unsigned long long x4[4]; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; int x15; })arg1 domainType:(long long)arg2 characterObservations:(id)arg3 blankIndex:(long long)arg4 pruningPolicy:(struct CVNLPTextDecodingPruningPolicy { long long x1; bool x2; float x3; unsigned int x4; })arg5;
- (id)initWithBuffer:(struct { void *x1; void *x2; unsigned long long x3[4]; unsigned long long x4[4]; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; int x15; })arg1 indexBuffer:(struct { void *x1; void *x2; unsigned long long x3[4]; unsigned long long x4[4]; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; int x15; })arg2 domainType:(long long)arg3 characterObservations:(id)arg4 blankIndex:(long long)arg5 pruningPolicy:(struct CVNLPTextDecodingPruningPolicy { long long x1; bool x2; float x3; unsigned int x4; })arg6;
- (id)initWithMultiArray:(id)arg1 characterObservations:(id)arg2 blankIndex:(long long)arg3 pruningPolicy:(struct CVNLPTextDecodingPruningPolicy { long long x1; bool x2; float x3; unsigned int x4; })arg4;
- (id)initWithMultiArray:(id)arg1 domainType:(long long)arg2 characterObservations:(id)arg3 blankIndex:(long long)arg4 pruningPolicy:(struct CVNLPTextDecodingPruningPolicy { long long x1; bool x2; float x3; unsigned int x4; })arg5;
- (id)initWithMultiArray:(id)arg1 indexArray:(id)arg2 domainType:(long long)arg3 characterObservations:(id)arg4 blankIndex:(long long)arg5 pruningPolicy:(struct CVNLPTextDecodingPruningPolicy { long long x1; bool x2; float x3; unsigned int x4; })arg6;
- (double)logProbabilityForBlankAtTimestep:(long long)arg1;
- (double)logProbabilityForObservationIndex:(long long)arg1 timestep:(long long)arg2;
- (long long)observationCount;
- (double)probabilityForBlankAtTimestep:(long long)arg1;
- (double)probabilityForObservationIndex:(long long)arg1 timestep:(long long)arg2;
- (void)setBlankIndex:(long long)arg1;
- (void)setCharacterObservations:(id)arg1;
- (void)set_cachedPriorityQueueTimestep:(long long)arg1;
- (void)set_cachedTimesample:(struct CVNLPCTCPriorityQueue { struct priority_queue<CVNLPCTCCandidate, std::__1::vector<CVNLPCTCCandidate, std::__1::allocator<CVNLPCTCCandidate>>, CVNLPCTCPriorityQueue::QueueComparison> { struct vector<CVNLPCTCCandidate, std::__1::allocator<CVNLPCTCCandidate>> { struct CVNLPCTCCandidate {} *x_1_2_1; struct CVNLPCTCCandidate {} *x_1_2_2; struct __compressed_pair<CVNLPCTCCandidate *, std::__1::allocator<CVNLPCTCCandidate>> { struct CVNLPCTCCandidate {} *x_3_3_1; } x_1_2_3; } x_1_1_1; struct QueueComparison { } x_1_1_2; } x1; bool x2; struct vector<CVNLPCTCCandidate, std::__1::allocator<CVNLPCTCCandidate>> { struct CVNLPCTCCandidate {} *x_3_1_1; struct CVNLPCTCCandidate {} *x_3_1_2; struct __compressed_pair<CVNLPCTCCandidate *, std::__1::allocator<CVNLPCTCCandidate>> { struct CVNLPCTCCandidate {} *x_3_2_1; } x_3_1_3; } x3; }*)arg1;
- (void)set_doubleScoreMatrix:(double*)arg1;
- (void)set_espressoBuffer:(struct { void *x1; void *x2; unsigned long long x3[4]; unsigned long long x4[4]; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; int x15; })arg1;
- (void)set_indexArray:(id)arg1;
- (void)set_indexBuffer:(struct { void *x1; void *x2; unsigned long long x3[4]; unsigned long long x4[4]; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; int x15; })arg1;
- (void)set_isDoubleDataType:(bool)arg1;
- (void)set_multiArray:(id)arg1;
- (void)set_observationCount:(long long)arg1;
- (void)set_observationStride:(long long)arg1;
- (void)set_pruningPolicy:(struct CVNLPTextDecodingPruningPolicy { long long x1; bool x2; float x3; unsigned int x4; })arg1;
- (void)set_timeStride:(long long)arg1;
- (void)set_timestepCount:(long long)arg1;
- (void)set_type:(long long)arg1;
- (void)set_usingIndexes:(bool)arg1;
- (long long)timestepCount;
- (id)topCandidateForTimestep:(long long)arg1 outputLogProbability:(double*)arg2;

@end
