/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/WorkflowEditor.framework/WorkflowEditor
 */

@interface CKComponentViewReusePoolMapWrapper : NSObject {
    struct ViewReusePoolMap { 
        struct unordered_map<CK::Component::ViewKey, CK::Component::ViewReusePool, std::__1::hash<CK::Component::ViewKey>, std::__1::equal_to<CK::Component::ViewKey>, std::__1::allocator<std::__1::pair<const CK::Component::ViewKey, CK::Component::ViewReusePool>>> { 
            struct __hash_table<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true>, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>>> { 
                struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> *>>> { 
                    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> *>>> { 
                        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> {} **__value_; 
                        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> *>> { 
                            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> *>> { 
                                unsigned long long __value_; 
                            } __data_; 
                        } __value_; 
                    } __ptr_; 
                } __bucket_list_; 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>>> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> { 
                        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> {} *__next_; 
                    } __value_; 
                } __p1_; 
                struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true>> { 
                    unsigned long long __value_; 
                } __p2_; 
                struct __compressed_pair<float, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true>> { 
                    float __value_; 
                } __p3_; 
            } __table_; 
        } map; 
        /* Warning: unhandled struct encoding: '{vector<UIView *, std::__1::allocator<UIView *>>="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<UIView *__strong *, std::__1::allocator<UIView *>>="__value_"^@}}}' */ struct vector<UIView *, std::__1::allocator<UIView *>> { 
            __end_ **__begin_; 
        } vendedViews; 
    }  _viewReusePoolMap;
}

- (id).cxx_construct;
- (void).cxx_destruct;

@end
