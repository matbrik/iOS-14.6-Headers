/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/PencilKit.framework/PencilKit
 */

@interface PKDrawingPaletteView : PKPaletteView <PKDrawingPaletteViewStateSubject, PKPaletteAdditionalOptionsViewDelegate, PKPaletteColorPickerViewDelegate, PKPaletteContentViewInputAssistantDelegate, PKPaletteFloatingKeyboardControllerDelegate, PKPalettePopoverUpdating, PKPaletteToolPickerViewDelegate, PKPaletteToolPreviewDelegate, PKPaletteUndoRedoViewDelegate, PKPaletteViewStateSubject, PKTextInputWindowFirstResponderControllerDelegate> {
    <PKPaletteViewAnnotationDelegate> * _annotationDelegate;
    MTMaterialView * _backgroundView;
    UIView * _bottomThinSeparator;
    long long  _colorUserInterfaceStyle;
    PKPaletteContentView * _contentView;
    NSLayoutConstraint * _contentViewBottomConstraint;
    NSLayoutConstraint * _contentViewHeightConstraint;
    NSLayoutConstraint * _contentViewWidthConstraint;
    bool  _fingerDrawsOptionEnabled;
    PKTextInputWindowFirstResponderController * _firstResponderController;
    PKPaletteFloatingKeyboardController * _floatingKeyboardController;
    NSString * _handwritingToolLocaleIdentifier;
    PKPaletteInputAssistantButtonProvider * _inputAssistantButtonProvider;
    bool  _isEditingOpacity;
    bool  _isEditingStrokeSelection;
    UIView * _opacityEditingView;
    UIPencilInteraction * _pencilInteraction;
    bool  _pencilInteractionEnabledWhenNotVisible;
    bool  _showsHandwritingTool;
    bool  _supportsOpacityEditing;
    PKPaletteTapToRadarCommand * _tapToRadarCommand;
    NSUndoManager * _undoManager;
    bool  _wantsClearBackgroundColorInCompactSize;
}

@property (nonatomic) <PKPaletteViewAnnotationDelegate> *annotationDelegate;
@property (getter=isAnnotationSupportEnabled, nonatomic, readonly) bool annotationSupportEnabled;
@property (getter=isAutoHideEnabled, nonatomic, readonly) bool autoHideEnabled;
@property (nonatomic, retain) MTMaterialView *backgroundView;
@property (nonatomic, retain) UIView *bottomThinSeparator;
@property (nonatomic) long long colorUserInterfaceStyle;
@property (nonatomic, retain) PKPaletteContentView *contentView;
@property (nonatomic, retain) NSLayoutConstraint *contentViewBottomConstraint;
@property (nonatomic, retain) NSLayoutConstraint *contentViewHeightConstraint;
@property (nonatomic, retain) NSLayoutConstraint *contentViewWidthConstraint;
@property (nonatomic) long long contextEditingMode;
@property (nonatomic, readonly) UIView *contextualEditingView;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool enableKeyboardButtons;
@property (getter=isFingerDrawsOptionEnabled, nonatomic) bool fingerDrawsOptionEnabled;
@property (nonatomic, retain) PKTextInputWindowFirstResponderController *firstResponderController;
@property (nonatomic, retain) PKPaletteFloatingKeyboardController *floatingKeyboardController;
@property (nonatomic, readonly) long long floatingKeyboardType;
@property (nonatomic, copy) NSString *handwritingToolLocaleIdentifier;
@property (getter=isHandwritingToolSelected, nonatomic, readonly) bool handwritingToolSelected;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) PKPaletteInputAssistantButtonProvider *inputAssistantButtonProvider;
@property (nonatomic, readonly, copy) NSArray *inputAssistantItems;
@property (nonatomic) bool isEditingOpacity;
@property (nonatomic) bool isEditingStrokeSelection;
@property (nonatomic, readonly) UIView *opacityEditingView;
@property (nonatomic, readonly) double paletteScaleFactor;
@property (nonatomic, readonly) UIPencilInteraction *pencilInteraction;
@property (getter=isPencilInteractionEnabledWhenNotVisible, nonatomic) bool pencilInteractionEnabledWhenNotVisible;
@property (nonatomic, readonly) <PKPaletteTool> *selectedTool;
@property (nonatomic, retain) PKInk *selectedToolInk;
@property (nonatomic) bool showsHandwritingTool;
@property (readonly) Class superclass;
@property (nonatomic) bool supportsOpacityEditing;
@property (nonatomic, retain) PKPaletteTapToRadarCommand *tapToRadarCommand;
@property (nonatomic, copy) NSArray *toolIdentifiers;
@property (nonatomic, copy) NSArray *toolProperties;
@property (getter=isVisible, nonatomic, readonly) bool visible;
@property (nonatomic) bool wantsClearBackgroundColorInCompactSize;
@property (nonatomic, readonly) PKTextInputWindowFirstResponder *windowFirstResponder;
@property (nonatomic, readonly) UIWindowScene *windowScene;

- (void).cxx_destruct;
- (bool)_canHandlePencilInteraction;
- (bool)_canShowFingerDrawsOption;
- (void)_centerPaletteContainerSubviewToCurrentlySelectedToolForEdge:(unsigned long long)arg1 needsContainerViewLayout:(bool)arg2;
- (void)_changeWasDone:(id)arg1;
- (void)_changeWasRedone:(id)arg1;
- (void)_changeWasUndone:(id)arg1;
- (id)_clippingViewBackgroundColor;
- (void)_installPaletteContentViewInView:(id)arg1;
- (bool)_isPaletteConsideredMinimized;
- (bool)_isPaletteContentViewHidden;
- (void)_presentOrDismissFloatingKeyboard;
- (void)_releaseUndoManager;
- (id)_selectedToolViewInToolPicker;
- (void)_setSelectedColor:(id)arg1;
- (void)_setToolPickerViewSelectedToolColor:(id)arg1 ignoreColorOpacity:(bool)arg2;
- (bool)_shouldHandlePencilInteractionWhenNotVisible;
- (bool)_shouldShowFingerDrawsOption;
- (void)_updateColorPickerSelectedColor;
- (void)_updateHandwritingAssistantItems;
- (void)_updateHandwritingAssistantItemsFromResponder:(id)arg1;
- (void)_updateInputResponderControllerInputAssistantSupressionState;
- (void)_updateToolPreview;
- (void)_updateToolPreviewForEdge:(unsigned long long)arg1;
- (void)_updateUI;
- (void)_updateUIForAnnotationSupportIfNeeded;
- (void)_willDockPaletteToCorner:(unsigned long long)arg1;
- (void)_willDockPaletteToEdge:(unsigned long long)arg1 prepareForExpansion:(bool)arg2 isPaletteChangingOrientation:(bool)arg3;
- (void)additionalOptionsView:(id)arg1 didToggleAutoHideOption:(bool)arg2;
- (void)additionalOptionsViewDidPressKeyboardButton:(id)arg1;
- (void)additionalOptionsViewDidPressReturnKeyButton:(id)arg1;
- (void)additionalOptionsViewDidPressTapToRadarButton:(id)arg1;
- (void)additionalOptionsViewDidSelectPlusButton:(id)arg1;
- (id)annotationDelegate;
- (id)backgroundView;
- (id)borderColorForTraitCollection:(id)arg1;
- (double)borderWidthForTraitCollection:(id)arg1;
- (id)bottomThinSeparator;
- (void)colorPickerDidChangeSelectedColor:(id)arg1 isFromExtendedColorPicker:(bool)arg2;
- (bool)colorPickerShouldDisplayColorSelection:(id)arg1;
- (long long)colorUserInterfaceStyle;
- (double)compactPaletteHeight;
- (void)configureForDockedAtCorner;
- (void)configureForDockedAtEdge:(unsigned long long)arg1;
- (id)contentView;
- (id)contentViewBottomConstraint;
- (void)contentViewDidDismissInputAssistantView:(id)arg1;
- (void)contentViewDidSelectInputAssistantKeyboardItem:(id)arg1;
- (void)contentViewDidSelectInputAssistantReturnKeyItem:(id)arg1;
- (id)contentViewHeightConstraint;
- (id)contentViewWidthConstraint;
- (long long)contextEditingMode;
- (id)contextualEditingView;
- (double)dampingRatioForThrowingFromPosition:(long long)arg1 toPosition:(long long)arg2 withVelocity:(struct CGPoint { double x1; double x2; })arg3;
- (void)dealloc;
- (void)didChangePalettePosition;
- (void)didChangePaletteScaleFactor;
- (void)didEndAppearanceAnimation;
- (void)dismissPalettePopoverWithCompletion:(id /* block */)arg1;
- (bool)enableKeyboardButtons;
- (void)endOpacityEditing;
- (id)firstResponderController;
- (id)floatingKeyboardController;
- (void)floatingKeyboardController:(id)arg1 didChangeKeyboardType:(long long)arg2;
- (void)floatingKeyboardControllerWillHide:(id)arg1;
- (void)floatingKeyboardControllerWillShow:(id)arg1;
- (long long)floatingKeyboardType;
- (id)handwritingToolLocaleIdentifier;
- (void)hostView:(id)arg1 didDockPaletteToPosition:(long long)arg2;
- (void)hostView:(id)arg1 willDockPaletteToPosition:(long long)arg2 prepareForExpansion:(bool)arg3;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)inputAssistantButtonProvider;
- (id)inputAssistantItems;
- (bool)isAnnotationSupportEnabled;
- (bool)isEditingOpacity;
- (bool)isEditingStrokeSelection;
- (bool)isFingerDrawsOptionEnabled;
- (bool)isHandwritingToolSelected;
- (bool)isPencilInteractionEnabledWhenNotVisible;
- (bool)isVisible;
- (id)keyboardSelectionMenuForAdditionalOptionsView:(id)arg1;
- (id)keyboardSelectionMenuForContentView:(id)arg1;
- (void)layoutSubviews;
- (id)opacityEditingView;
- (struct CGSize { double x1; double x2; })paletteSizeForEdge:(unsigned long long)arg1;
- (unsigned long long)paletteViewType;
- (id)pencilInteraction;
- (void)pencilInteractionDidTap:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })plusButtonFrame;
- (id)responderForFloatingKeyboardController:(id)arg1;
- (double)responseForThrowingFromPosition:(long long)arg1 toPosition:(long long)arg2 withVelocity:(struct CGPoint { double x1; double x2; })arg3;
- (void)safeAreaInsetsDidChange;
- (void)selectPenTool;
- (id)selectedTool;
- (id)selectedToolInk;
- (void)setAnnotationDelegate:(id)arg1;
- (void)setBackgroundView:(id)arg1;
- (void)setBottomThinSeparator:(id)arg1;
- (void)setColorUserInterfaceStyle:(long long)arg1;
- (void)setContentView:(id)arg1;
- (void)setContentViewBottomConstraint:(id)arg1;
- (void)setContentViewHeightConstraint:(id)arg1;
- (void)setContentViewWidthConstraint:(id)arg1;
- (void)setContextEditingMode:(long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFingerDrawsOptionEnabled:(bool)arg1;
- (void)setFirstResponderController:(id)arg1;
- (void)setFloatingKeyboardController:(id)arg1;
- (void)setHandwritingToolLocaleIdentifier:(id)arg1;
- (void)setInputAssistantButtonProvider:(id)arg1;
- (void)setIsEditingOpacity:(bool)arg1;
- (void)setIsEditingStrokeSelection:(bool)arg1;
- (void)setPencilInteractionEnabledWhenNotVisible:(bool)arg1;
- (void)setSelectedAnnotationType:(long long)arg1;
- (void)setSelectedToolInk:(id)arg1;
- (void)setShowsHandwritingTool:(bool)arg1;
- (void)setSupportsOpacityEditing:(bool)arg1;
- (void)setTapToRadarCommand:(id)arg1;
- (void)setToolIdentifiers:(id)arg1;
- (void)setToolProperties:(id)arg1;
- (void)setUndoManager:(id)arg1;
- (void)setWantsClearBackgroundColorInCompactSize:(bool)arg1;
- (double)shadowOpacity;
- (double)shadowRadius;
- (bool)shouldAdjustShadowRadiusForMinimized;
- (bool)showsHandwritingTool;
- (void)startOpacityEditing;
- (bool)supportsOpacityEditing;
- (id)tapToRadarCommand;
- (id)toolIdentifiers;
- (void)toolPickerDidChangeSelectedTool:(id)arg1;
- (void)toolPickerDidToggleRulerTool:(id)arg1;
- (void)toolPickerViewDidChangeTraitCollectionSizeClass:(id)arg1;
- (void)toolPreviewDidChangeToolColor:(id)arg1;
- (id)toolProperties;
- (void)traitCollectionDidChange:(id)arg1;
- (id)undoManager;
- (void)undoRedoViewDidTapRedo:(id)arg1;
- (void)undoRedoViewDidTapUndo:(id)arg1;
- (void)updateConstraints;
- (void)updatePopoverUI;
- (void)updateUndoRedo;
- (bool)wantsClearBackgroundColorInCompactSize;
- (void)willStartAppearanceAnimation:(bool)arg1;
- (id)windowFirstResponder;
- (void)windowFirstResponderController:(id)arg1 didChangeFirstResponder:(id)arg2;
- (id)windowScene;

@end
