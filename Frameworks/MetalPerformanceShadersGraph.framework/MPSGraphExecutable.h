/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MetalPerformanceShadersGraph.framework/MetalPerformanceShadersGraph
 */

@interface MPSGraphExecutable : NSObject {
    struct OpBuilder { struct MLIRContext {} *x1; struct Block {} *x2; struct ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation, false, false, void>, false, false> { struct ilist_node_impl<llvm::ilist_detail::node_options<mlir::Operation, false, false, void>> {} *x_3_1_1; } x3; struct Listener {} *x4; } * _builder;
    unsigned long long  _compilerOptions;
    struct MLIRContext { 
        struct unique_ptr<mlir::MLIRContextImpl, std::__1::default_delete<mlir::MLIRContextImpl>> { 
            struct __compressed_pair<mlir::MLIRContextImpl *, std::__1::default_delete<mlir::MLIRContextImpl>> { 
                struct MLIRContextImpl {} *__value_; 
            } __ptr_; 
        } impl; 
    }  _context;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _executableMutex;
    NSArray * _feedTensorArray;
    NSDictionary * _feeds;
    MPSGraph * _graph;
    struct unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>>> { 
        struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>>> { 
            struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>, void *> *> *>>> { 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>, void *> *> *>>> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>, void *> *> {} **__value_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>, void *>>> { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>, void *> *> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>, void *> *> {} *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _optimizedModuleCache;
    unsigned long long  _options;
    struct OwningModuleRef { 
        struct ModuleOp { 
            struct Operation {} *state; 
        } module; 
    }  _originalModule;
    struct unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>>> { 
        struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>>> { 
            struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>, void *> *> *>>> { 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>, void *> *> *>>> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>, void *> *> {} **__value_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>, void *>>> { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>, void *> *> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>, void *> *> {} *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _runtimeCache;
    struct MPSSymbolTable { struct StringMap<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, llvm::MallocAllocator> { struct StringMapEntryBase {} **x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; struct MallocAllocator { } x_1_1_6; } x1; } * _symbolTable;
    NSArray * _targetOperations;
    NSArray * _targetTensorArray;
}

@property unsigned long long options;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)allocateTargetsForDevice:(id)arg1 inputsArray:(id)arg2;
- (void)dealloc;
- (id)debugDescription;
- (void)dump;
- (void)encodeInternalWithMPSCommandBuffer:(id)arg1 inputsArray:(id)arg2 resultsArray:(id)arg3 executionDescriptor:(id)arg4;
- (struct GPURuntime { id x1; id x2; struct ModuleOp { struct Operation {} *x_3_1_1; } x3; id x4; id x5; struct unordered_map<mlir::Operation *, MPSNDArray *, std::__1::hash<mlir::Operation *>, std::__1::equal_to<mlir::Operation *>, std::__1::allocator<std::__1::pair<mlir::Operation *const, MPSNDArray *>>> { struct __hash_table<std::__1::__hash_value_type<mlir::Operation *, MPSNDArray *>, std::__1::__unordered_map_hasher<mlir::Operation *, std::__1::__hash_value_type<mlir::Operation *, MPSNDArray *>, std::__1::hash<mlir::Operation *>, true>, std::__1::__unordered_map_equal<mlir::Operation *, std::__1::__hash_value_type<mlir::Operation *, MPSNDArray *>, std::__1::equal_to<mlir::Operation *>, true>, std::__1::allocator<std::__1::__hash_value_type<mlir::Operation *, MPSNDArray *>>> { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<mlir::Operation *, MPSNDArray *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<mlir::Operation *, MPSNDArray *>, void *> *> *>>> { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<mlir::Operation *, MPSNDArray *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<mlir::Operation *, MPSNDArray *>, void *> *> *>>> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<mlir::Operation *, MPSNDArray *>, void *> *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<mlir::Operation *, MPSNDArray *>, void *> *> *>> { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<mlir::Operation *, MPSNDArray *>, void *> *> *>> { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; } x_6_1_1; } x6; }*)getRuntimeForDevice:(id)arg1 module:(struct ModuleOp { struct Operation {} *x1; })arg2;
- (id)initWithGraph:(id)arg1 feeds:(id)arg2 targetTensors:(id)arg3 targetOperations:(id)arg4;
- (id)initWithMLIRModule:(struct ModuleOp { struct Operation {} *x1; })arg1 executableDescriptor:(id)arg2;
- (id)initWithMLIRSource:(id)arg1 executableDescriptor:(id)arg2;
- (id)initWithMLIRSourceFromURL:(id)arg1 executableDescriptor:(id)arg2;
- (void)initializeCommon;
- (id)initializeWithMLIRModule:(struct ModuleOp { struct Operation {} *x1; })arg1 executableDescriptor:(id)arg2;
- (bool)inputShapesSpecialized;
- (bool)isExecutableForFeeds:(id)arg1 targetTensors:(id)arg2 targetOperations:(id)arg3;
- (void)optimizationPasses:(struct ModuleOp { struct Operation {} *x1; }*)arg1;
- (unsigned long long)options;
- (void)recurseFeeds:(id)arg1 targetTensors:(id)arg2 targetOperations:(id)arg3;
- (void)recurseOperation:(id)arg1 operationsRecursed:(id)arg2 tensorToValueMap:(struct map<MPSGraphTensor *, mlir::Value, std::__1::less<MPSGraphTensor *>, std::__1::allocator<std::__1::pair<MPSGraphTensor *const, mlir::Value>>> { struct __tree<std::__1::__value_type<MPSGraphTensor *, mlir::Value>, std::__1::__map_value_compare<MPSGraphTensor *, std::__1::__value_type<MPSGraphTensor *, mlir::Value>, std::__1::less<MPSGraphTensor *>, true>, std::__1::allocator<std::__1::__value_type<MPSGraphTensor *, mlir::Value>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MPSGraphTensor *, mlir::Value>, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<MPSGraphTensor *, std::__1::__value_type<MPSGraphTensor *, mlir::Value>, std::__1::less<MPSGraphTensor *>, true>> { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)arg3;
- (id)runAsyncWithCommandQueue:(id)arg1 inputsArray:(id)arg2 resultsArray:(id)arg3 executionDescriptor:(id)arg4;
- (id)runInternalWithMPSCommandBuffer:(id)arg1 feedsDictionary:(id)arg2 resultsDictionary:(id)arg3 executionDescriptor:(id)arg4;
- (id)runWithCommandQueue:(id)arg1 inputsArray:(id)arg2 resultsArray:(id)arg3;
- (void)sanitizeExternalModuleWithVariableFetchHandler:(id /* block */)arg1;
- (void)setOptions:(unsigned long long)arg1;
- (void)specializeWithDevice:(id)arg1 inputShapes:(id)arg2;
- (struct ModuleOp { struct Operation {} *x1; })specializeWithDevice:(id)arg1 inputsArray:(id)arg2;
- (struct ModuleOp { struct Operation {} *x1; })specializedModuleWithDevice:(id)arg1 inputShapes:(id)arg2;

@end
