/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKMapModel : NSObject {
    struct AnimationRunner { struct MapEngine {} *x1; } * _animationRunner;
    <VKMapModelDelegate> * _delegate;
    bool  _disableTransitLines;
    bool  _forceMapDrawStyleUpdate;
    VKTimedAnimation * _highZoomTransitionAnimation;
    unsigned char  _labelScaleFactor;
    bool  _localizeLabels;
    struct LogicManager { int (**x1)(); struct unordered_map<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>>> { struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>>> { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *> *> *>>> { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *> *> *>>> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *> *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *> *> *>> { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; } x_2_1_1; } x2; } * _logicManager;
    const struct MapEngineSettings { struct linear_map<md::MapEngineSetting, long long, std::__1::equal_to<md::MapEngineSetting>, std::__1::allocator<std::__1::pair<md::MapEngineSetting, long long>>, std::__1::vector<std::__1::pair<md::MapEngineSetting, long long>, std::__1::allocator<std::__1::pair<md::MapEngineSetting, long long>>>> { struct vector<std::__1::pair<md::MapEngineSetting, long long>, std::__1::allocator<std::__1::pair<md::MapEngineSetting, long long>>> { struct pair<md::MapEngineSetting, long long> {} *x_1_2_1; struct pair<md::MapEngineSetting, long long> {} *x_1_2_2; struct __compressed_pair<std::__1::pair<md::MapEngineSetting, long long> *, std::__1::allocator<std::__1::pair<md::MapEngineSetting, long long>>> { struct pair<md::MapEngineSetting, long long> {} *x_3_3_1; } x_1_2_3; } x_1_1_1; } x1; struct set<md::MapEngineSetting, std::__1::less<md::MapEngineSetting>, std::__1::allocator<md::MapEngineSetting>> { struct __tree<md::MapEngineSetting, std::__1::less<md::MapEngineSetting>, std::__1::allocator<md::MapEngineSetting>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<md::MapEngineSetting, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<md::MapEngineSetting>> { unsigned long long x_3_3_1; } x_1_2_3; } x_2_1_1; } x2; } * _mapEngineSettings;
    struct FeatureAttributeSet { 
        struct vector<gss::FeatureAttributePair, geo::StdAllocator<gss::FeatureAttributePair, gss::Allocator>> { 
            struct FeatureAttributePair {} *__begin_; 
            struct FeatureAttributePair {} *__end_; 
            struct __compressed_pair<gss::FeatureAttributePair *, geo::StdAllocator<gss::FeatureAttributePair, gss::Allocator>> { 
                struct FeatureAttributePair {} *__value_; 
                struct StdAllocator<gss::FeatureAttributePair, gss::Allocator> { 
                    struct Allocator {} *_allocator; 
                } __value_; 
            } __end_cap_; 
        } _attributes; 
    }  _mapFeatureStyleAttributes;
    int  _metroArea;
    float  _navMapZoomLevelTransitionZ;
    VKNavigationPuck * _navigationPuck;
    float  _navigationPuckSize;
    struct CartographicRenderer { int (**x1)(); struct shared_ptr<md::TaskContext> { struct TaskContext {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct unique_ptr<md::PassList, std::__1::default_delete<md::PassList>> { struct __compressed_pair<md::PassList *, std::__1::default_delete<md::PassList>> { struct PassList {} *x_1_2_1; } x_3_1_1; } x3; struct unique_ptr<md::FrameGraphResourceRegistry, std::__1::default_delete<md::FrameGraphResourceRegistry>> { struct __compressed_pair<md::FrameGraphResourceRegistry *, std::__1::default_delete<md::FrameGraphResourceRegistry>> { struct FrameGraphResourceRegistry {} *x_1_2_1; } x_4_1_1; } x4; struct vector<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>>, std::__1::allocator<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>>>> { struct unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>> {} *x_5_1_1; struct unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>> {} *x_5_1_2; struct __compressed_pair<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>> *, std::__1::allocator<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>>>> { struct unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>> {} *x_3_2_1; } x_5_1_3; } x5; } * _renderer;
    struct mutex { 
        struct _opaque_pthread_mutex_t { 
            long long __sig; 
            BOOL __opaque[56]; 
        } __m_; 
    }  _rendererMutex;
    float  _standardMapZoomLevelTransitionZ;
    struct shared_ptr<gss::StylesheetQuery<gss::PropertyID>> { 
        struct StylesheetQuery<gss::PropertyID> {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _styleQuery;
    struct shared_ptr<md::TaskContext> { 
        struct TaskContext {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _taskContext;
    long long  _tileSize;
    NSArray * _visibleTileSets;
}

@property (nonatomic) <VKMapModelDelegate> *delegate;
@property (nonatomic) bool disableTransitLines;
@property (nonatomic) unsigned char labelScaleFactor;
@property (nonatomic) bool localizeLabels;
@property (nonatomic) int mapType;
@property (nonatomic) float navigationPuckSize;
@property (nonatomic) float standardMapZoomLevelTransitionZ;
@property (nonatomic, readonly) NSArray *visibleTileSets;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_beginMapZoomLevelTransition:(unsigned char)arg1;
- (void)_mapZoomLevelDidChange:(unsigned char)arg1;
- (void)_setStyleManagerFromMapType:(int)arg1;
- (struct shared_ptr<gss::StylesheetManager<gss::PropertyID>> { struct StylesheetManager<gss::PropertyID> {} *x1; struct __shared_weak_count {} *x2; })_styleManager;
- (void)_updateZoomLevel:(const struct LayoutContext { id x1; struct shared_ptr<gdc::Camera> { struct Camera {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; unsigned char x3; struct VKEdgeInsets { float x_4_1_1; float x_4_1_2; float x_4_1_3; float x_4_1_4; } x4; struct VKEdgeInsets { float x_5_1_1; float x_5_1_2; float x_5_1_3; float x_5_1_4; } x5; struct shared_ptr<ggl::PolygonBase::MeshMesh> { struct MeshMesh {} *x_6_1_1; struct __shared_weak_count {} *x_6_1_2; } x6; struct shared_ptr<ggl::PolygonBase::MeshMesh> { struct MeshMesh {} *x_7_1_1; struct __shared_weak_count {} *x_7_1_2; } x7; struct shared_ptr<ggl::CommonMesh::Pos2UVMesh> { struct Pos2UVMesh {} *x_8_1_1; struct __shared_weak_count {} *x_8_1_2; } x8; struct StencilManager { unsigned char x_9_1_1; unsigned char x_9_1_2; unsigned char x_9_1_3; struct ClearItem { unsigned char x_4_2_1; struct Matrix<float, 4, 1> { float x_2_3_1[4]; } x_4_2_2; bool x_4_2_3; float x_4_2_4; unsigned char x_4_2_5; unsigned int x_4_2_6; } x_9_1_4; } x9; struct shared_ptr<ggl::Device> { struct Device {} *x_10_1_1; struct __shared_weak_count {} *x_10_1_2; } x10; }*)arg1;
- (void)dealloc;
- (void)debugHighlightObjectAtPoint:(struct CGPoint { double x1; double x2; })arg1 highlightTarget:(unsigned char)arg2;
- (id)delegate;
- (void)destroyRenderer;
- (bool)disableTransitLines;
- (void)forceMapType:(int)arg1 animated:(bool)arg2;
- (id)initWithTarget:(id)arg1 renderer:(struct CartographicRenderer { int (**x1)(); struct shared_ptr<md::TaskContext> { struct TaskContext {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct unique_ptr<md::PassList, std::__1::default_delete<md::PassList>> { struct __compressed_pair<md::PassList *, std::__1::default_delete<md::PassList>> { struct PassList {} *x_1_2_1; } x_3_1_1; } x3; struct unique_ptr<md::FrameGraphResourceRegistry, std::__1::default_delete<md::FrameGraphResourceRegistry>> { struct __compressed_pair<md::FrameGraphResourceRegistry *, std::__1::default_delete<md::FrameGraphResourceRegistry>> { struct FrameGraphResourceRegistry {} *x_1_2_1; } x_4_1_1; } x4; struct vector<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>>, std::__1::allocator<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>>>> { struct unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>> {} *x_5_1_1; struct unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>> {} *x_5_1_2; struct __compressed_pair<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>> *, std::__1::allocator<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>>>> { struct unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer>> {} *x_3_2_1; } x_5_1_3; } x5; }*)arg2 taskContext:(struct shared_ptr<md::TaskContext> { struct TaskContext {} *x1; struct __shared_weak_count {} *x2; })arg3 logicManager:(struct LogicManager { int (**x1)(); struct unordered_map<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>>> { struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>>> { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *> *> *>>> { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *> *> *>>> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *> *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::LogicBase, std::__1::default_delete<md::LogicBase>>>, void *> *> *>> { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; } x_2_1_1; } x2; }*)arg4 mapEngineSettings:(const struct MapEngineSettings { struct linear_map<md::MapEngineSetting, long long, std::__1::equal_to<md::MapEngineSetting>, std::__1::allocator<std::__1::pair<md::MapEngineSetting, long long>>, std::__1::vector<std::__1::pair<md::MapEngineSetting, long long>, std::__1::allocator<std::__1::pair<md::MapEngineSetting, long long>>>> { struct vector<std::__1::pair<md::MapEngineSetting, long long>, std::__1::allocator<std::__1::pair<md::MapEngineSetting, long long>>> { struct pair<md::MapEngineSetting, long long> {} *x_1_2_1; struct pair<md::MapEngineSetting, long long> {} *x_1_2_2; struct __compressed_pair<std::__1::pair<md::MapEngineSetting, long long> *, std::__1::allocator<std::__1::pair<md::MapEngineSetting, long long>>> { struct pair<md::MapEngineSetting, long long> {} *x_3_3_1; } x_1_2_3; } x_1_1_1; } x1; struct set<md::MapEngineSetting, std::__1::less<md::MapEngineSetting>, std::__1::allocator<md::MapEngineSetting>> { struct __tree<md::MapEngineSetting, std::__1::less<md::MapEngineSetting>, std::__1::allocator<md::MapEngineSetting>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<md::MapEngineSetting, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<md::MapEngineSetting>> { unsigned long long x_3_3_1; } x_1_2_3; } x_2_1_1; } x2; }*)arg5 animationRunner:(struct AnimationRunner { struct MapEngine {} *x1; }*)arg6;
- (unsigned char)labelScaleFactor;
- (void)layoutWithContext:(const struct LayoutContext { id x1; struct shared_ptr<gdc::Camera> { struct Camera {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; unsigned char x3; struct VKEdgeInsets { float x_4_1_1; float x_4_1_2; float x_4_1_3; float x_4_1_4; } x4; struct VKEdgeInsets { float x_5_1_1; float x_5_1_2; float x_5_1_3; float x_5_1_4; } x5; struct shared_ptr<ggl::PolygonBase::MeshMesh> { struct MeshMesh {} *x_6_1_1; struct __shared_weak_count {} *x_6_1_2; } x6; struct shared_ptr<ggl::PolygonBase::MeshMesh> { struct MeshMesh {} *x_7_1_1; struct __shared_weak_count {} *x_7_1_2; } x7; struct shared_ptr<ggl::CommonMesh::Pos2UVMesh> { struct Pos2UVMesh {} *x_8_1_1; struct __shared_weak_count {} *x_8_1_2; } x8; struct StencilManager { unsigned char x_9_1_1; unsigned char x_9_1_2; unsigned char x_9_1_3; struct ClearItem { unsigned char x_4_2_1; struct Matrix<float, 4, 1> { float x_2_3_1[4]; } x_4_2_2; bool x_4_2_3; float x_4_2_4; unsigned char x_4_2_5; unsigned int x_4_2_6; } x_9_1_4; } x9; struct shared_ptr<ggl::Device> { struct Device {} *x_10_1_1; struct __shared_weak_count {} *x_10_1_2; } x10; }*)arg1;
- (bool)localizeLabels;
- (int)mapType;
- (id)navigationPuck;
- (float)navigationPuckSize;
- (double)northYaw;
- (void)performStylesheetDidReload;
- (void)reloadStylesheet;
- (void)setDelegate:(id)arg1;
- (void)setDisableTransitLines:(bool)arg1;
- (void)setLabelScaleFactor:(unsigned char)arg1;
- (void)setLocalizeLabels:(bool)arg1;
- (void)setMapType:(int)arg1;
- (void)setMapType:(int)arg1 animated:(bool)arg2;
- (void)setNavMapZoomLevelTransitionZFromLowerBound:(float)arg1;
- (void)setNavigationPuckSize:(float)arg1;
- (void)setShowingOuterHaloOnLabelsDidChange:(bool)arg1;
- (void)setStandardMapZoomLevelTransitionZ:(float)arg1;
- (void)setStyleManager:(struct shared_ptr<gss::StylesheetManager<gss::PropertyID>> { struct StylesheetManager<gss::PropertyID> {} *x1; struct __shared_weak_count {} *x2; })arg1 forRealistic:(bool)arg2;
- (float)standardMapZoomLevelTransitionZ;
- (long long)tileSize;
- (void)updateMapDrawStyleWithContext:(const struct LayoutContext { id x1; struct shared_ptr<gdc::Camera> { struct Camera {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; unsigned char x3; struct VKEdgeInsets { float x_4_1_1; float x_4_1_2; float x_4_1_3; float x_4_1_4; } x4; struct VKEdgeInsets { float x_5_1_1; float x_5_1_2; float x_5_1_3; float x_5_1_4; } x5; struct shared_ptr<ggl::PolygonBase::MeshMesh> { struct MeshMesh {} *x_6_1_1; struct __shared_weak_count {} *x_6_1_2; } x6; struct shared_ptr<ggl::PolygonBase::MeshMesh> { struct MeshMesh {} *x_7_1_1; struct __shared_weak_count {} *x_7_1_2; } x7; struct shared_ptr<ggl::CommonMesh::Pos2UVMesh> { struct Pos2UVMesh {} *x_8_1_1; struct __shared_weak_count {} *x_8_1_2; } x8; struct StencilManager { unsigned char x_9_1_1; unsigned char x_9_1_2; unsigned char x_9_1_3; struct ClearItem { unsigned char x_4_2_1; struct Matrix<float, 4, 1> { float x_2_3_1[4]; } x_4_2_2; bool x_4_2_3; float x_4_2_4; unsigned char x_4_2_5; unsigned int x_4_2_6; } x_9_1_4; } x9; struct shared_ptr<ggl::Device> { struct Device {} *x_10_1_1; struct __shared_weak_count {} *x_10_1_2; } x10; }*)arg1;
- (id)visibleTileSets;

@end
