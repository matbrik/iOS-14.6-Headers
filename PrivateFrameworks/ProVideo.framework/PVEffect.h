/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo
 */

@interface PVEffect : NSObject <NSCopying, NSSecureCoding, PVEffectHitArea, PVEffectTextual, PVEffectTimedProperties, PVEffectTranscript, PVEffectTransformable> {
    NSMutableArray * _components;
    bool  _conformToInputAspect;
    NSDictionary * _contentProperties;
    NSString * _displayName;
    NSString * _effectID;
    NSMutableDictionary * _effectParameters;
    struct { 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } start; 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } duration; 
    }  _effectRange;
    NSString * _effectType;
    NSMutableDictionary * _inspectableProperties;
    NSLock * _inspectablePropertiesLock;
    bool  _isInInteractiveMode;
    bool  _isPreview;
    bool  _isRecording;
    struct atomic<unsigned int> { struct __cxx_atomic_impl<unsigned int, std::__1::__cxx_atomic_base_impl<unsigned int>> { _Atomic unsigned int x_1_1_1; } x1; } * _loadCount;
    bool  _shouldDisableFadeOut;
    PVEffectTimedPropertiesComponent * _timedPropertiesComponent;
    bool  _useLocalLoopTime;
}

@property (nonatomic) bool conformToInputAspect;
@property (nonatomic, retain) NSDictionary *contentProperties;
@property (nonatomic, retain) NSMutableDictionary *effectParameters;
@property (nonatomic) struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; } effectRange;
@property (getter=isHidden, nonatomic) bool hidden;
@property (nonatomic, copy) NSDictionary *inspectableProperties;
@property (nonatomic) bool isInInteractiveMode;
@property (nonatomic) bool isPreview;
@property (nonatomic) bool isRecording;
@property (nonatomic) bool shouldDisableFadeOut;
@property (nonatomic) bool useLocalLoopTime;

// Image: /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo

+ (id)_effectRegistry;
+ (id)_effectRegistryForLookup;
+ (void)_registerBuiltInEffects;
+ (void)_registerEffectsInBundle:(id)arg1 atPath:(id)arg2;
+ (id)_registeredEffectClasses;
+ (id)_registryEntryForEffectID:(id)arg1;
+ (id)allRegisteredEffectIDs;
+ (void)appFinishedLaunching:(id)arg1;
+ (id)attributeForName:(id)arg1 fromAttributedString:(id)arg2 defaultAttributes:(id)arg3;
+ (double)baselineOffsetFromAttributedString:(id)arg1;
+ (id)categoryForEffectID:(id)arg1;
+ (Class)classForEffectID:(id)arg1;
+ (void)cleanupEffectsCache;
+ (void)cleanupEffectsSingletons;
+ (void)clearPreviewStats;
+ (id)defaultVideoTransitionEffectID;
+ (void)deferEffectRegistrationForClass:(Class)arg1;
+ (id)descriptionForEffectID:(id)arg1;
+ (id)displayNameForEffectID:(id)arg1;
+ (id)displayNameForEffectType:(id)arg1;
+ (bool)effectIDIsNone:(id)arg1;
+ (bool)effectIDIsRegistered:(id)arg1;
+ (id)effectTypeForEffectID:(id)arg1;
+ (void)ensureEffectsRegistered;
+ (id)firstRegisteredEffectIDContainingSubstring:(id)arg1;
+ (void)handleApplicationDidReceiveMemoryWarning;
+ (void)handleApplicationWillTerminate;
+ (void)handleCleanupEffectsCache;
+ (void)initEffectRegistry;
+ (void)initEffectRegistryWithHostDelegate:(id)arg1;
+ (bool)isAllCapsFromAttributes:(id)arg1;
+ (bool)isInteractiveMode;
+ (bool)isVideoForEffectID:(id)arg1;
+ (void)modifyAttributedStringByAdjustingFont:(id)arg1 toFitSize:(struct CGSize { double x1; double x2; })arg2;
+ (void)modifyAttributedStringByAdjustingFontSize:(id)arg1 scale:(double)arg2;
+ (void)modifyAttributedStringByAdjustingForNegativeLineSpacing:(id)arg1;
+ (void)modifyAttributedStringByAdjustingForNegativeLineSpacing:(id)arg1 scale:(double)arg2;
+ (void)modifyAttributedStringByAdjustingKerning:(id)arg1 attributes:(id)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 scale:(double)arg4;
+ (void)modifyAttributedStringByAdjustingOutline:(id)arg1 attributes:(id)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
+ (void)modifyAttributedStringByAdjustingOutline:(id)arg1 attributes:(id)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 scale:(double)arg4;
+ (void)modifyAttributedStringByAdjustingShadow:(id)arg1 effectTransform:(id)arg2;
+ (void)modifyAttributedStringByAdjustingShadow:(id)arg1 scale:(double)arg2 rotation:(double)arg3;
+ (void)modifyAttributedStringByApplyingSubstituteFont:(id)arg1 attributes:(id)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
+ (id)newEffectWithData:(id)arg1;
+ (id)newEffectWithID:(id)arg1;
+ (id)newEffectWithURL:(id)arg1;
+ (void)noteApplicationDidReceiveMemoryWarning;
+ (void)noteApplicationWillTerminate;
+ (id)propertiesForEffect:(id)arg1;
+ (void)registerEffectClass:(Class)arg1 forEffectID:(id)arg2 withProperties:(id)arg3;
+ (void)registerEffects;
+ (id)registeredEffectIDsForClass:(Class)arg1;
+ (id)registeredEffectIDsForEffectType:(id)arg1;
+ (id)registeredEffectIDsForEffectTypes:(id)arg1;
+ (void)runDeferredRegistration;
+ (void)setInteractiveMode:(bool)arg1;
+ (id)shadowFromAttributedString:(id)arg1 defaultAttributes:(id)arg2;
+ (bool)supportsSecureCoding;
+ (double)textHeightFromAttributedString:(id)arg1 defaultAttributes:(id)arg2;
+ (double)textHeightFromAttributedString:(id)arg1 defaultAttributes:(id)arg2 scale:(double)arg3;
+ (id)themeForEffectID:(id)arg1;
+ (id)userVisibleEffectIDs;
+ (long long)verticalAlignmentFromAttributedString:(id)arg1 defaultAttributes:(id)arg2;
+ (void)willTerminate:(id)arg1;
+ (double)xOffsetForTextTrackingFromAttributedString:(id)arg1;

- (void).cxx_destruct;
- (void)_configureComponents;
- (void)_copyWithZone:(struct _NSZone { }*)arg1 into:(id)arg2;
- (void)_decodeFromCoder:(id)arg1 into:(id)arg2;
- (void)_postInit:(id)arg1;
- (void)addEntriesToInspectableProperties:(id)arg1;
- (void)addTimedPropertiesDelegate:(id)arg1 userContext:(id)arg2;
- (void)applyInspectableProperties;
- (bool)applyTimedPropertiesForTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)assertInspectablePropertiesAreLocked;
- (void)assertInspectablePropertiesAreUnlocked;
- (void)beginTextEditing;
- (bool)bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 forcePosterFrame:(bool)arg3 includeDropShadow:(bool)arg4 includeMasks:(bool)arg5;
- (id)cameraProjection;
- (id)cameraTransform;
- (id)categoryName;
- (void)clearTranscription;
- (bool)conformToInputAspect;
- (id)contentBundle;
- (id)contentProperties;
- (id)contentPropertyForKey:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (struct PVCGPointQuad { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; struct CGPoint { double x_4_1_1; double x_4_1_2; } x4; })cornersAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 includeDropShadow:(bool)arg3 scale:(struct CGPoint { double x1; double x2; })arg4 viewSize:(struct CGSize { double x1; double x2; })arg5 viewOrigin:(int)arg6;
- (void)dealloc;
- (id)defaultAttributedString:(unsigned long long)arg1;
- (id)description;
- (id)descriptionOfInspectableProperties;
- (void)disableCameraOverride;
- (id)displayName;
- (id)effectDescription;
- (id)effectID;
- (id)effectParameters;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })effectRange;
- (id)effectType;
- (void)enableCameraOverride:(id)arg1 projection:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (void)endTextEditing;
- (bool)hasAllNecessaryResources;
- (bool)hasBuiltInEnvironment;
- (bool)hasTimedPropertiesDelegate:(id)arg1;
- (bool)hasTimedPropertiesDelegates;
- (struct HGRef<HGNode> { struct HGNode {} *x1; })hgNodeForTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 inputs:(const struct PVInputHGNodeMap<unsigned int> { struct map<unsigned int, HGRef<HGNode>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, HGRef<HGNode>>>> { struct __tree<std::__1::__value_type<unsigned int, HGRef<HGNode>>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, HGRef<HGNode>>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, HGRef<HGNode>>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, HGRef<HGNode>>, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, HGRef<HGNode>>, std::__1::less<unsigned int>, true>> { unsigned long long x_3_3_1; } x_1_2_3; } x_1_1_1; } x1; }*)arg2 renderer:(const struct HGRef<HGRenderer> { struct HGRenderer {} *x1; }*)arg3 igContext:(struct HGRef<PVInstructionGraphContext> { struct PVInstructionGraphContext {} *x1; })arg4;
- (id)hitAreaPointsAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 includeDropShadow:(bool)arg3 scale:(struct CGPoint { double x1; double x2; })arg4 viewSize:(struct CGSize { double x1; double x2; })arg5 viewOrigin:(int)arg6;
- (id)initWithCoder:(id)arg1;
- (id)initWithContentID:(id)arg1 andDictionary:(id)arg2;
- (id)initWithEffectID:(id)arg1;
- (id)inspectableProperties;
- (id)inspectablePropertyForKey:(id)arg1;
- (bool)isCameraOverrideEnabled;
- (bool)isHidden;
- (bool)isInInteractiveMode;
- (bool)isPreview;
- (bool)isReady;
- (bool)isRecording;
- (bool)isTextFlipped;
- (bool)isTranscription;
- (bool)loadEffect;
- (bool)loadResources;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (int)orientation;
- (int)origin;
- (struct CGSize { double x1; double x2; })outputSize;
- (struct HGRef<HGNode> { struct HGNode {} *x1; })previewHGNodeForTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 inputHGNode:(struct HGRef<HGNode> { struct HGNode {} *x1; })arg2 outputSize:(struct CGSize { double x1; double x2; })arg3 renderer:(struct HGRenderer { int (**x1)(); struct atomic<unsigned int> { struct __cxx_atomic_impl<unsigned int, std::__1::__cxx_atomic_base_impl<unsigned int>> { _Atomic unsigned int x_1_2_1; } x_2_1_1; } x2; struct HGNode {} *x3; struct HGBitmap {} *x4; struct HGRendererTextureUnit { struct HGBitmap {} *x_5_1_1; struct HGTransform {} *x_5_1_2; int x_5_1_3; } x5[8]; struct vector<DepthBufferManager *, std::__1::allocator<DepthBufferManager *>> { struct DepthBufferManager {} **x_6_1_1; struct DepthBufferManager {} **x_6_1_2; struct __compressed_pair<DepthBufferManager **, std::__1::allocator<DepthBufferManager *>> { struct DepthBufferManager {} **x_3_2_1; } x_6_1_3; } x6; struct vector<HGExecutionUnit *, std::__1::allocator<HGExecutionUnit *>> { struct HGExecutionUnit {} **x_7_1_1; struct HGExecutionUnit {} **x_7_1_2; struct __compressed_pair<HGExecutionUnit **, std::__1::allocator<HGExecutionUnit *>> { struct HGExecutionUnit {} **x_3_2_1; } x_7_1_3; } x7; struct HGExecutionData {} *x8; struct HGSyncData {} *x9; struct _opaque_pthread_rwlock_t { long long x_10_1_1; BOOL x_10_1_2[192]; } x10; }*)arg4;
- (float)proxyRenderScale;
- (void)releaseEffect;
- (void)releaseResources;
- (void)removeAllTimedPropertiesDelegates;
- (void)removeTimedPropertiesDelegate:(id)arg1;
- (void)resetToDefaultTranscriptionForLocaleID:(id)arg1;
- (bool)resourcesAreReady;
- (void)runWithInspectableProperties:(id /* block */)arg1;
- (void)setConformToInputAspect:(bool)arg1;
- (void)setContentProperties:(id)arg1;
- (void)setEffectParameters:(id)arg1;
- (void)setEffectRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (void)setHidden:(bool)arg1;
- (void)setInspectableProperties:(id)arg1;
- (void)setInspectableProperty:(id)arg1 forKey:(id)arg2;
- (void)setIsInInteractiveMode:(bool)arg1;
- (void)setIsPreview:(bool)arg1;
- (void)setIsRecording:(bool)arg1;
- (void)setShouldDisableFadeOut:(bool)arg1;
- (void)setTopLevelGroupTransform:(id)arg1;
- (void)setTranscriptionText:(id)arg1;
- (void)setTransform:(id)arg1;
- (void)setUseLocalLoopTime:(bool)arg1;
- (bool)shouldDisableFadeOut;
- (bool)shouldRenderPreviewAtPosterTime;
- (bool)supportsExtendedRangeInputs;
- (bool)supportsFlippingText;
- (bool)supportsOrientation;
- (struct PVCGPointQuad { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; struct CGPoint { double x_4_1_1; double x_4_1_2; } x4; })textCornersAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 index:(unsigned long long)arg2 forcePosterFrame:(bool)arg3 includeDropShadow:(bool)arg4 scale:(struct CGPoint { double x1; double x2; })arg5 viewSize:(struct CGSize { double x1; double x2; })arg6 viewOrigin:(int)arg7;
- (id)textEditingBounds:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (id)textEditingBoundsAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 useParagraphBounds:(bool)arg3 includeDropShadow:(bool)arg4 includeMasks:(bool)arg5;
- (id)textTransformsAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 includeTransformAnimation:(bool)arg3 viewSize:(struct CGSize { double x1; double x2; })arg4 viewOrigin:(int)arg5;
- (id)textTransformsAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 viewSize:(struct CGSize { double x1; double x2; })arg3 viewOrigin:(int)arg4;
- (id)timedPropertiesDelegates;
- (double)topLevelOpacity;
- (bool)transcriptionHitTest:(struct CGPoint { double x1; double x2; })arg1 time:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
- (id)transformAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 includeTransformAnimation:(bool)arg3 viewSize:(struct CGSize { double x1; double x2; })arg4 viewOrigin:(int)arg5;
- (id)transformAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forcePosterFrame:(bool)arg2 viewSize:(struct CGSize { double x1; double x2; })arg3 viewOrigin:(int)arg4;
- (void)updateInspectableProperties;
- (void)updateInspectableProperties:(id)arg1;
- (void)updateLiveTitlePickerLoopTime:(bool)arg1;
- (bool)useLocalLoopTime;
- (id)userContextForTimedPropertiesDelegate:(id)arg1;
- (bool)usesDefaultChannelDataEncoding;
- (bool)writeDefaultChannels;

// Image: /System/Library/PrivateFrameworks/Memories.framework/Memories

+ (id)objectFromPlist:(id)arg1 inProject:(id)arg2;

- (id)plistRepresentation;

@end
