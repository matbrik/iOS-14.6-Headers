/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SiriOntology.framework/SiriOntology
 */

@interface USOSerializedGraph : NSObject <NSSecureCoding> {
    NSArray * _edges;
    NSArray * _nodes;
    NSString * _printedForm;
}

@property (nonatomic, retain) NSArray *edges;
@property (nonatomic, retain) NSArray *nodes;
@property (nonatomic, retain) NSString *printedForm;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)createSerializedNode:(const struct UsoGraphNode { int (**x1)(); struct UsoGraph {} *x2; unsigned long long x3; }*)arg1 withError:(id*)arg2;
- (id)edges;
- (void)encodeWithCoder:(id)arg1;
- (id)getDebugGraphString;
- (id)getDebugGraphStringSiriNl;
- (const struct OntologyEdgeName { int (**x1)(); int x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; int x4; }*)getOrCreateEdgeName:(id)arg1 withVocabManager:(struct shared_ptr<siri::ontology::UsoVocabManager> { struct UsoVocabManager {} *x1; struct __shared_weak_count {} *x2; })arg2 withError:(id*)arg3;
- (const struct OntologyNodeName { int (**x1)(); int x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; int x4; struct unordered_map<int, int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, int>>> { struct __hash_table<std::__1::__hash_value_type<int, int>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, int>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, int>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, int>>> { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> *>>> { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> *>>> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> *>> { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> *>> { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; } x_5_1_1; } x5; }*)getOrCreateNodeName:(id)arg1 withVocabManager:(struct shared_ptr<siri::ontology::UsoVocabManager> { struct UsoVocabManager {} *x1; struct __shared_weak_count {} *x2; })arg2 withError:(id*)arg3;
- (const struct OntologyVerbName { int (**x1)(); int x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; int x4; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_5_1_1; } x5; }*)getOrCreateVerbName:(id)arg1 withVocabManager:(struct shared_ptr<siri::ontology::UsoVocabManager> { struct UsoVocabManager {} *x1; struct __shared_weak_count {} *x2; })arg2 withError:(id*)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithNodes:(id)arg1 edges:(id)arg2;
- (id)initWithUsoGraph:(struct UsoGraph { struct adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, siri::ontology::UsoGraphNode *, siri::ontology::UsoGraphEdge, boost::no_property, boost::listS> { struct list<boost::list_edge<unsigned long, siri::ontology::UsoGraphEdge>, std::__1::allocator<boost::list_edge<unsigned long, siri::ontology::UsoGraphEdge>>> { struct __list_node_base<boost::list_edge<unsigned long, siri::ontology::UsoGraphEdge>, void *> { struct __list_node_base<boost::list_edge<unsigned long, siri::ontology::UsoGraphEdge>, void *> {} *x_1_3_1; struct __list_node_base<boost::list_edge<unsigned long, siri::ontology::UsoGraphEdge>, void *> {} *x_1_3_2; } x_1_2_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<boost::list_edge<unsigned long, siri::ontology::UsoGraphEdge>, void *>>> { unsigned long long x_2_3_1; } x_1_2_2; } x_1_1_1; struct vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, siri::ontology::UsoGraphNode *, siri::ontology::UsoGraphEdge, boost::no_property, boost::listS>, boost::vecS, boost::vecS, boost::bidirectionalS, siri::ontology::UsoGraphNode *, siri::ontology::UsoGraphEdge, boost::no_property, boost::listS>::config::stored_vertex, std::__1::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, siri::ontology::UsoGraphNode *, siri::ontology::UsoGraphEdge, boost::no_property, boost::listS>, boost::vecS, boost::vecS, boost::bidirectionalS, siri::ontology::UsoGraphNode *, siri::ontology::UsoGraphEdge, boost::no_property, boost::listS>::config::stored_vertex>> { struct stored_vertex {} *x_2_2_1; struct stored_vertex {} *x_2_2_2; struct __compressed_pair<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, siri::ontology::UsoGraphNode *, siri::ontology::UsoGraphEdge, boost::no_property, boost::listS>, boost::vecS, boost::vecS, boost::bidirectionalS, siri::ontology::UsoGraphNode *, siri::ontology::UsoGraphEdge, boost::no_property, boost::listS>::config::stored_vertex *, std::__1::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, siri::ontology::UsoGraphNode *, siri::ontology::UsoGraphEdge, boost::no_property, boost::listS>, boost::vecS, boost::vecS, boost::bidirectionalS, siri::ontology::UsoGraphNode *, siri::ontology::UsoGraphEdge, boost::no_property, boost::listS>::config::stored_vertex>> { struct stored_vertex {} *x_3_3_1; } x_2_2_3; } x_1_1_2; } x1; }*)arg1 withError:(id*)arg2;
- (id)nodes;
- (id)printedForm;
- (void)setEdges:(id)arg1;
- (void)setNodes:(id)arg1;
- (void)setPrintedForm:(id)arg1;
- (struct unique_ptr<siri::ontology::UsoGraph, std::__1::default_delete<siri::ontology::UsoGraph>> { struct __compressed_pair<siri::ontology::UsoGraph *, std::__1::default_delete<siri::ontology::UsoGraph>> { struct UsoGraph {} *x_1_1_1; } x1; })toCppUsoGraph:(struct shared_ptr<siri::ontology::UsoVocabManager> { struct UsoVocabManager {} *x1; struct __shared_weak_count {} *x2; })arg1 withError:(id*)arg2;

@end
