/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/WorkflowEditor.framework/WorkflowEditor
 */

@interface CKTextKitTailTruncater : NSObject <CKTextKitTruncating> {
    NSCharacterSet * _avoidTailTruncationSet;
    struct CGSize { 
        double width; 
        double height; 
    }  _constrainedSize;
    CKTextKitContext * _context;
    NSAttributedString * _truncationAttributedString;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _truncationStringRect;
    struct vector<_NSRange, std::__1::allocator<_NSRange>> { 
        struct _NSRange {} *__begin_; 
        struct _NSRange {} *__end_; 
        struct __compressed_pair<_NSRange *, std::__1::allocator<_NSRange>> { 
            struct _NSRange {} *__value_; 
        } __end_cap_; 
    }  _visibleRanges;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } truncationStringRect;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<_NSRange' */ struct  visibleRanges; /* unknown property attribute:  std::__1::allocator<_NSRange>>=^{_NSRange}}} */

- (id).cxx_construct;
- (void).cxx_destruct;
- (unsigned long long)_calculateCharacterIndexBeforeTruncationMessage:(id)arg1 textStorage:(id)arg2 textContainer:(id)arg3;
- (unsigned long long)_findTruncationInsertionPointAtOrBeforeCharacterIndex:(unsigned long long)arg1 layoutManager:(id)arg2 textStorage:(id)arg3;
- (void)_truncate;
- (id)initWithContext:(id)arg1 truncationAttributedString:(id)arg2 avoidTailTruncationSet:(id)arg3 constrainedSize:(struct CGSize { double x1; double x2; })arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })truncationStringRect;
- (struct vector<_NSRange, std::__1::allocator<_NSRange>> { struct _NSRange {} *x1; struct _NSRange {} *x2; struct __compressed_pair<_NSRange *, std::__1::allocator<_NSRange>> { struct _NSRange {} *x_3_1_1; } x3; })visibleRanges;

@end
