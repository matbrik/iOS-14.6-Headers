/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/PencilKit.framework/PencilKit
 */

@interface PKTextInputElement : NSObject {
    <PKScribbleInteractionWrapper> * __containerInteraction;
    long long  __elementType;
    long long  __orderInContainer;
    bool  __requestingPlaceholderSuppression;
    <PKScribbleInteractionWrapper> * __viewScribbleInteraction;
    <NSObject><NSCopying> * _containerElementIdentifier;
    <UICoordinateSpace> * _coordinateSpace;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _lastKnownFrame;
    bool  _legacyHasBeenFocusedWithinContainer;
    NSNumber * _recognitionIdentifier;
    <UITextInput> * _textInput;
    UIView * _textInputView;
    bool  _waitingForMatchingDidFinishWriting;
}

@property (nonatomic, readonly) <PKScribbleInteractionWrapper> *_containerInteraction;
@property (nonatomic) long long _elementType;
@property (nonatomic, readonly) long long _orderInContainer;
@property (nonatomic) bool _requestingPlaceholderSuppression;
@property (nonatomic, readonly) <PKScribbleInteractionWrapper> *_viewScribbleInteraction;
@property (nonatomic, readonly) <NSObject><NSCopying> *containerElementIdentifier;
@property (nonatomic, readonly) <UICoordinateSpace> *coordinateSpace;
@property (nonatomic, readonly) NSString *debugElementTypeDescription;
@property (getter=isFocused, nonatomic, readonly) bool focused;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frame;
@property (nonatomic) bool legacyHasBeenFocusedWithinContainer;
@property (nonatomic, copy) NSNumber *recognitionIdentifier;
@property (nonatomic, readonly) UIView *referenceView;
@property (nonatomic) <UITextInput> *textInput;
@property (nonatomic) UIView *textInputView;

+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })hitToleranceEdgeInsetsFromHorizontalTolerance:(double)arg1 verticalTolerance:(double)arg2;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })hitToleranceFrameFromElementFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 insets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2;

- (void).cxx_destruct;
- (void)_beginSuppressingFieldPlaceholder;
- (id)_containerInteraction;
- (id)_containerInteractionView;
- (long long)_elementType;
- (void)_finishSuppressingFieldPlaceholderIfNeeded;
- (bool)_isFrameTooCloseToBottom;
- (bool)_isFromSameContainerAsElement:(id)arg1;
- (long long)_orderInContainer;
- (void)_promoteKeyWindowIfNecessary:(id)arg1;
- (bool)_requestingPlaceholderSuppression;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_safeHitFrame;
- (id)_scribbleInteraction;
- (id)_textInputResponder;
- (id)_textInputView;
- (id)_viewScribbleInteraction;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })activePreviewRange;
- (struct CGPoint { double x1; double x2; })clampedReferencePoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)clearActivePreview;
- (id)containerElementIdentifier;
- (bool)containsView:(id)arg1;
- (id)coordinateSpace;
- (void)dealloc;
- (id)debugElementTypeDescription;
- (id)description;
- (void)didEndWriting;
- (void)didTargetElementForTouches:(id)arg1 event:(id)arg2;
- (void)focusElementIfNeededWithReferencePoint:(struct CGPoint { double x1; double x2; })arg1 alwaysSetSelectionFromReferencePoint:(bool)arg2 completion:(id /* block */)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })hitToleranceFrameFromElementFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithElementInteraction:(id)arg1 elementIdentifier:(id)arg2 orderInContainer:(long long)arg3;
- (id)initWithTextInput:(id)arg1;
- (bool)isElementView:(id)arg1;
- (bool)isEquivalentToElement:(id)arg1;
- (bool)isFocused;
- (bool)isInFrontOfElement:(id)arg1;
- (bool)legacyHasBeenFocusedWithinContainer;
- (void)loadContentFocusingIfNeededWithReferencePoint:(struct CGPoint { double x1; double x2; })arg1 alwaysSetSelectionFromReferencePoint:(bool)arg2 rectOfInterest:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 completion:(id /* block */)arg4;
- (void)notifyTextInputTextDidChange;
- (void)notifyTextInputTextWillChange;
- (id)recognitionIdentifier;
- (id)referenceView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })selectionClipRectInCoordinateSpace:(id)arg1;
- (id)selectionHighlightColor;
- (void)setLegacyHasBeenFocusedWithinContainer:(bool)arg1;
- (void)setRecognitionIdentifier:(id)arg1;
- (void)setTextInput:(id)arg1;
- (void)setTextInputView:(id)arg1;
- (void)set_elementType:(long long)arg1;
- (void)set_requestingPlaceholderSuppression:(bool)arg1;
- (bool)shouldBeginAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (bool)shouldPostponeCommit;
- (bool)shouldPostponeFocusing;
- (bool)showSelectionCommands;
- (void)swapWritingStateWithElement:(id)arg1;
- (id)textInput;
- (id)textInputView;
- (void)updateFromEquivalentElement:(id)arg1;
- (void)updateWithFocusedTextInput:(id)arg1;
- (void)willBeginWriting;

@end
