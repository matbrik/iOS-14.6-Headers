/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/FeedbackLogger.framework/FeedbackLogger
 */

@interface FLSQLitePersistence : NSObject {
    NSString * _bundleIdentifier;
    _Atomic bool  _configured;
    FLLoggingContext * _context;
    NSString * _currentBatchIdentifier;
    unsigned long long  _currentBatchPayloadSize;
    NSString * _databasePath;
    struct sqlite3 { } * _db;
    struct sqlite3_stmt { } * _insertRecordsStatement;
    struct sqlite3_stmt { } * _iteratePayloadStatement;
    NSObject<OS_os_log> * _log;
    unsigned long long  _maxAllowedDatabaseSizeInBytes;
    unsigned long long  _maxBatchPayloadInBytes;
}

@property (nonatomic, readonly, copy) NSString *bundleIdentifier;
@property (nonatomic) _Atomic bool configured;
@property (nonatomic, retain) FLLoggingContext *context;
@property (nonatomic, copy) NSString *currentBatchIdentifier;
@property (nonatomic) unsigned long long currentBatchPayloadSize;
@property (nonatomic, readonly, copy) NSString *databasePath;
@property (nonatomic) struct sqlite3 { }*db;
@property (nonatomic) struct sqlite3_stmt { }*insertRecordsStatement;
@property (nonatomic) struct sqlite3_stmt { }*iteratePayloadStatement;
@property (nonatomic, retain) NSObject<OS_os_log> *log;
@property (nonatomic) unsigned long long maxAllowedDatabaseSizeInBytes;
@property (nonatomic) unsigned long long maxBatchPayloadInBytes;

+ (id)batchStatusDescription:(int)arg1;

- (void).cxx_destruct;
- (bool)__purgeStatementHelper:(const char *)arg1 forBatchId:(id)arg2;
- (id)_getBatchIdsHelper:(struct sqlite3_stmt { }*)arg1;
- (bool)_updateMetadataHelperForBatch:(id)arg1 query:(const char *)arg2;
- (bool)_updateStatusHelperForBatch:(id)arg1 toStatus:(int)arg2;
- (id)bundleIdentifier;
- (bool)closeOpenBatches;
- (bool)configured;
- (id)context;
- (bool)createDatabase;
- (id)currentBatchIdentifier;
- (unsigned long long)currentBatchPayloadSize;
- (id)databasePath;
- (struct sqlite3 { }*)db;
- (void)dealloc;
- (bool)deleteDatabase;
- (long long)doBatchesHousekeeping;
- (bool)executeInTransactionMultipleSQLStatements:(id)arg1;
- (bool)executeSQLStatement:(const char *)arg1;
- (bool)executeSQLStatement:(const char *)arg1 usingTransaction:(bool)arg2;
- (id)getBatchIdsWithAllStatuses;
- (id)getBatchIdsWithStatus:(int)arg1;
- (bool)getBatchMetadata:(id)arg1 batchMetadata:(inout id*)arg2;
- (unsigned long long)getCurrentDatabaseSize;
- (int)getDataVersion;
- (bool)getIntValueForPragma:(id)arg1 into:(inout int*)arg2;
- (id)getPurgableBatchIds;
- (id)getRecordsRangeStart:(long long)arg1 end:(long long)arg2;
- (int)getSchemaVersion;
- (id)initWithPath:(id)arg1 application:(id)arg2 loggingContext:(id)arg3;
- (bool)initializeConnectionForUseBy:(int)arg1;
- (bool)initializeNewBatch;
- (struct sqlite3_stmt { }*)insertRecordsStatement;
- (bool)iteratePayloadForBatch:(id)arg1 codeblock:(id /* block */)arg2;
- (struct sqlite3_stmt { }*)iteratePayloadStatement;
- (id)log;
- (bool)markBatchesforPurge;
- (unsigned long long)maxAllowedDatabaseSizeInBytes;
- (unsigned long long)maxBatchPayloadInBytes;
- (bool)open;
- (bool)persist:(id)arg1;
- (bool)prepareSchema;
- (bool)prepareStatements;
- (bool)purgeAllBatches;
- (bool)purgeBatch:(id)arg1;
- (bool)recoverOrphanedProcessingBatches;
- (void)setConfigured:(bool)arg1;
- (void)setContext:(id)arg1;
- (void)setCurrentBatchIdentifier:(id)arg1;
- (void)setCurrentBatchPayloadSize:(unsigned long long)arg1;
- (bool)setDatabaseSizeLimit;
- (void)setDb:(struct sqlite3 { }*)arg1;
- (void)setInsertRecordsStatement:(struct sqlite3_stmt { }*)arg1;
- (void)setIteratePayloadStatement:(struct sqlite3_stmt { }*)arg1;
- (void)setLog:(id)arg1;
- (void)setMaxAllowedDatabaseSizeInBytes:(unsigned long long)arg1;
- (void)setMaxBatchPayloadInBytes:(unsigned long long)arg1;
- (bool)tryPrepare:(const char *)arg1 preparedStatement:(inout struct sqlite3_stmt {}**)arg2;
- (bool)tryRolloverBatchIfNecessary:(unsigned long long)arg1;
- (bool)updateSchema;
- (bool)updateStatusForBatch:(id)arg1 toStatus:(int)arg2;

@end
