/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/PencilKit.framework/PencilKit
 */

@interface PKTextInputCanvasController : NSObject <PKTextInputDebugStateReporting, PKTiledCanvasViewDelegate> {
    PKTiledCanvasView * __canvasView;
    PKTextInputFloatingBackgroundView * __floatingBackgroundView;
    <PKTextInputCanvasControllerChangeObserver> * _changeObserver;
    PKStroke * _currentStroke;
    struct vector<CGPoint, std::__1::allocator<CGPoint>> { 
        struct CGPoint {} *__begin_; 
        struct CGPoint {} *__end_; 
        struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint>> { 
            struct CGPoint {} *__value_; 
        } __end_cap_; 
    }  _currentStrokePoints;
    <PKTextInputCanvasControllerDelegate> * _delegate;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _floatingBackgroundRect;
    NSMutableSet * _recentlyRemovedStrokeIDs;
    UIColor * _strokeColor;
    NSMutableDictionary * _strokeColorForStrokeUUID;
    bool  _useSlidingCanvas;
    bool  _wantsCanvasViewLoaded;
    bool  _wantsCanvasVisible;
}

@property (nonatomic, retain) PKTiledCanvasView *_canvasView;
@property (nonatomic, retain) PKTextInputFloatingBackgroundView *_floatingBackgroundView;
@property (nonatomic, readonly) <UICoordinateSpace> *canvasCoordinateSpace;
@property (nonatomic, readonly) bool canvasHasVisibleStrokes;
@property (nonatomic) <PKTextInputCanvasControllerChangeObserver> *changeObserver;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) UIColor *defaultStrokeColor;
@property (nonatomic) <PKTextInputCanvasControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } floatingBackgroundRect;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) PKStroke *inProgressStroke;
@property (nonatomic, readonly) bool isDrawing;
@property (nonatomic, readonly) NSSet *recentlyRemovedStrokeIDs;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } renderedStrokesBounds;
@property (setter=_setStrokeColor:, nonatomic, retain) UIColor *strokeColor;
@property (readonly) Class superclass;
@property (nonatomic) bool wantsCanvasViewLoaded;
@property (nonatomic) bool wantsCanvasVisible;

+ (id)defaultInkWithColor:(id)arg1;
+ (void)prewarmFutureCanvasesIfNecessary;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_canvasView;
- (void)_canvasViewDrawingMoved:(id)arg1 withTouch:(id)arg2 inputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg3;
- (void)_clearRecordedColorForStroke:(id)arg1;
- (id)_containerView;
- (id)_floatingBackgroundView;
- (void)_recordColorForStroke:(id)arg1;
- (id)_resolvedDynamicColorForCurrentWindowScene:(id)arg1;
- (void)_setStrokeColor:(id)arg1;
- (void)_setStrokeColor:(id)arg1 animated:(bool)arg2;
- (void)_trackRecentlyRemovedStrokes:(id)arg1;
- (void)_updateCanvasView;
- (void)_updateCanvasViewInkAnimated:(bool)arg1;
- (void)_updateCanvasViewOffsetFromTouch:(id)arg1;
- (void)_updateFloatingBackground;
- (void)animateAndRemoveStrokes:(id)arg1 destinationFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 animationDuration:(double)arg3 useImpreciseAnimation:(bool)arg4;
- (id)canvasCoordinateSpace;
- (bool)canvasHasVisibleStrokes;
- (void)canvasView:(id)arg1 beganStroke:(id)arg2;
- (void)canvasView:(id)arg1 cancelledStroke:(id)arg2;
- (void)canvasView:(id)arg1 didPresentWithCanvasOffset:(struct CGPoint { double x1; double x2; })arg2;
- (void)canvasView:(id)arg1 drawingDidChange:(id)arg2;
- (void)canvasView:(id)arg1 endedStroke:(id)arg2;
- (id)canvasView:(id)arg1 inkForStroke:(id)arg2;
- (void)canvasViewDidBeginDrawing:(id)arg1;
- (void)canvasViewDidEndDrawing:(id)arg1;
- (void)canvasViewDidFinishAnimatingStrokes:(id)arg1;
- (void)canvasViewDrawingMoved:(id)arg1 withTouch:(id)arg2;
- (void)canvasViewHasVisibleStrokesChanged:(id)arg1;
- (bool)canvasViewShouldDisableShapeRecognition:(id)arg1;
- (id)canvasViewTouchView:(id)arg1;
- (void)canvasViewWillBeginNewStroke:(id)arg1 withTouch:(id)arg2;
- (id)changeObserver;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertCanvasRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toCoordinateSpace:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toCanvasFromCoordinateSpace:(id)arg2;
- (void)dealloc;
- (id)defaultStrokeColor;
- (id)delegate;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })floatingBackgroundRect;
- (id)inProgressStroke;
- (id)init;
- (bool)isDrawing;
- (id)recentlyRemovedStrokeIDs;
- (void)reloadPreferredStrokeColor;
- (void)removeStrokes:(id)arg1 animationDuration:(double)arg2;
- (void)removeStuckStrokesAndSimulateCrashIfNecessary;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })renderedStrokesBounds;
- (void)replayCanvasViewDrawingMoved:(id)arg1 inputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg2;
- (void)reportDebugStateDescription:(id /* block */)arg1;
- (void)setChangeObserver:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFloatingBackgroundRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setWantsCanvasViewLoaded:(bool)arg1;
- (void)setWantsCanvasVisible:(bool)arg1;
- (void)set_canvasView:(id)arg1;
- (void)set_floatingBackgroundView:(id)arg1;
- (id)strokeColor;
- (bool)wantsCanvasViewLoaded;
- (bool)wantsCanvasVisible;

@end
