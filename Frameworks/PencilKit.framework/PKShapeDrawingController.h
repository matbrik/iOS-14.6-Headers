/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/PencilKit.framework/PencilKit
 */

@interface PKShapeDrawingController : NSObject {
    struct { 
        struct CGPoint { 
            double x; 
            double y; 
        } point; 
        double force; 
        double azimuth; 
        double altitude; 
        double velocity; 
        double timestamp; 
        bool predicted; 
        long long estimationUpdateIndex; 
        double length; 
        bool hasEstimatedAltitudeAndAzimuth; 
    }  _averageInputPoint;
    bool  _closedShapeDetected;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _currentStrokeBounds;
    struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint>> { 
        struct IntPoint {} *__begin_; 
        struct IntPoint {} *__end_; 
        struct __compressed_pair<ClipperLib::IntPoint *, std::__1::allocator<ClipperLib::IntPoint>> { 
            struct IntPoint {} *__value_; 
        } __end_cap_; 
    }  _currentStrokePoints;
    <PKShapeDrawingControllerDelegate> * _delegate;
    PKShape * _detectedShape;
    double  _latestAddedPointTime;
    double  _maximumRecognitionDelay;
    double  _minimumRecognitionDelay;
    unsigned long long  _numInputPoints;
    bool  _shapeRecognitionOn;
    CHRecognizer * _shapeRecognizer;
    bool  _shouldDetect;
    bool  _smartFillEnabled;
    NSUUID * _smartFillGroupID;
    PKStrokeRenderMask * _smartFillRenderMask;
    bool  _stopGestureDetected;
    double  _strokeDuration;
    double  _strokeStartTime;
    struct vector<TimestampedPoint, std::__1::allocator<TimestampedPoint>> { 
        struct TimestampedPoint {} *__begin_; 
        struct TimestampedPoint {} *__end_; 
        struct __compressed_pair<TimestampedPoint *, std::__1::allocator<TimestampedPoint>> { 
            struct TimestampedPoint {} *__value_; 
        } __end_cap_; 
    }  _timestampedPoints;
    UIView * _view;
}

@property (getter=isActive, nonatomic, readonly) bool active;
@property (nonatomic, readonly) struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; } averageInputPoint;
@property (nonatomic) <PKShapeDrawingControllerDelegate> *delegate;
@property (nonatomic, retain) PKShape *detectedShape;
@property (getter=isRecordingStroke, nonatomic, readonly) bool recordingStroke;
@property (getter=isShapeRecognitionOn, nonatomic) bool shapeRecognitionOn;
@property (nonatomic, retain) CHRecognizer *shapeRecognizer;
@property (getter=isSmartFillActive, nonatomic, readonly) bool smartFillActive;
@property (getter=isSmartFillEnabled, nonatomic) bool smartFillEnabled;
@property (nonatomic, retain) NSUUID *smartFillGroupID;
@property (nonatomic, retain) PKStrokeRenderMask *smartFillRenderMask;

+ (void)_addBottomCenterCloudPath:(struct CGPath { }*)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
+ (void)_addLeftCloudPath:(struct CGPath { }*)arg1;
+ (void)_addRightCloudPath:(struct CGPath { }*)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
+ (void)_addTopCenterCloudPath:(struct CGPath { }*)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 leftEdge:(bool)arg3 rightEdge:(bool)arg4;
+ (struct CGPath { }*)_createNormalizedCloudPathWithNumCenterPieces:(long long)arg1;
+ (struct CGPath { }*)_createNormalizedPathFromPath:(struct CGPath { }*)arg1;
+ (struct CGPath { }*)_createNormalizedPathFromSVGPath:(id)arg1;
+ (struct CGPath { }*)_normalizedCloudPath;
+ (struct CGPath { }*)_normalizedHeartPath;
+ (long long)_numCenterCloudPiecesFromInOutSize:(struct CGSize { double x1; double x2; }*)arg1;
+ (bool)shouldBeAvailableForWindow:(id)arg1;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_addCurrentStrokePoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)_arrowRadiusForStroke:(id)arg1 inputScale:(double)arg2;
- (id)_arrowStrokesWithInputScale:(double)arg1 firstPt:(struct CGPoint { double x1; double x2; })arg2 secondPt:(struct CGPoint { double x1; double x2; })arg3 radius:(double)arg4 averageInputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg5 sourceStroke:(id)arg6;
- (id)_chDrawingFromStroke:(id)arg1;
- (void)_checkDetectedStroke;
- (id)_generateChatBubble:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg4;
- (id)_generateCloud:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg4;
- (id)_generateHeart:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg4;
- (id)_generateLine:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg4;
- (id)_generateManhattanLine:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg4;
- (id)_generateOutlineArrow:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg4;
- (id)_generateOval:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg4;
- (id)_generatePentagon:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg4;
- (id)_generateRectangle:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg4;
- (id)_generateStar:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg4;
- (id)_generateTriangle:(id)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg4;
- (double)_movementSpeed;
- (long long)_shapeTypeFromResultName:(id)arg1;
- (void)_smartFillRenderMaskFromStroke:(id)arg1 outPoints:(struct vector<CGPoint, std::__1::allocator<CGPoint>> { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint>> { struct CGPoint {} *x_3_1_1; } x3; }*)arg2 strokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 completionBlock:(id /* block */)arg4;
- (id)_strokeFromPoints:(const struct vector<CGPoint, std::__1::allocator<CGPoint>> { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint>> { struct CGPoint {} *x_3_1_1; } x3; }*)arg1 inputScale:(double)arg2 averageInputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg3 sourceStroke:(id)arg4;
- (void)_updateAverageInputPoint:(const struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; }*)arg1;
- (void)addSmartFillRenderMaskForStroke:(id)arg1;
- (void)addStrokePoint:(struct CGPoint { double x1; double x2; })arg1 inputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg2;
- (struct CGSize { double x1; double x2; })aspectRatioAdjustedSizeFromResult:(id)arg1;
- (struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })averageInputPoint;
- (struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })averageInputPointFromStroke:(id)arg1;
- (id)beginSmartFillForStroke:(id)arg1 strokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (void)beginStrokeAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)cancelDetectionIfNecessary;
- (id)delegate;
- (id)detectedShape;
- (id)detectedShapeWithInputScale:(double)arg1 strokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 averageInputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg3 createCurrentStrokeBlock:(id /* block */)arg4;
- (void)endSmartFill;
- (bool)hasMovementStopped;
- (id)initWithDelegate:(id)arg1 view:(id)arg2;
- (bool)isActive;
- (bool)isRecordingStroke;
- (bool)isShapeRecognitionOn;
- (bool)isSmartFillActive;
- (bool)isSmartFillEnabled;
- (void)resetStroke;
- (void)setDelegate:(id)arg1;
- (void)setDetectedShape:(id)arg1;
- (void)setShapeRecognitionOn:(bool)arg1;
- (void)setShapeRecognizer:(id)arg1;
- (void)setSmartFillEnabled:(bool)arg1;
- (void)setSmartFillGroupID:(id)arg1;
- (void)setSmartFillRenderMask:(id)arg1;
- (id)shapeFromStroke:(id)arg1 inputScale:(double)arg2 averageInputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg3;
- (id)shapeRecognizer;
- (id)smartFillGroupID;
- (id)smartFillRenderMask;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })smartFillStrokeBounds;
- (void)updateDetectedStrokeState;

@end
