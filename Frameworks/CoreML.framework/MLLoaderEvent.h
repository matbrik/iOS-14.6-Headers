/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreML.framework/CoreML
 */

@interface MLLoaderEvent : NSObject <CUTCoreAnalyticsMetric> {
    NSString * _bundleIdentifier;
    NSString * _compilerVersion;
    NSNumber * _computeUnits;
    NSNumber * _firstPartyExecutable;
    NSNumber * _modelDimension;
    NSString * _modelHash;
    NSNumber * _modelIsEncrypted;
    NSNumber * _modelLoadError;
    NSNumber * _modelLoadTime;
    NSString * _modelName;
    NSNumber * _modelOrigin;
    NSNumber * _modelType;
    NSString * _modelVersion;
    NSString * _nnModelNetHash;
    NSString * _nnModelShapeHash;
    NSString * _nnModelWeightsHash;
}

@property (nonatomic, copy) NSString *bundleIdentifier;
@property (nonatomic, copy) NSString *compilerVersion;
@property (nonatomic, copy) NSNumber *computeUnits;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) NSDictionary *dictionaryRepresentation;
@property (nonatomic, copy) NSNumber *firstPartyExecutable;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) NSNumber *modelDimension;
@property (nonatomic, copy) NSString *modelHash;
@property (nonatomic, copy) NSNumber *modelIsEncrypted;
@property (nonatomic, copy) NSNumber *modelLoadError;
@property (nonatomic, copy) NSNumber *modelLoadTime;
@property (nonatomic, copy) NSString *modelName;
@property (nonatomic, copy) NSNumber *modelOrigin;
@property (nonatomic, copy) NSNumber *modelType;
@property (nonatomic, copy) NSString *modelVersion;
@property (readonly) NSString *name;
@property (nonatomic, copy) NSString *nnModelNetHash;
@property (nonatomic, copy) NSString *nnModelShapeHash;
@property (nonatomic, copy) NSString *nnModelWeightsHash;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)bundleIdentifier;
- (id)compilerVersion;
- (id)computeUnits;
- (id)dictionaryRepresentation;
- (void)extractAndSetModelDetailsFromArchive:(struct _MLModelInputArchiver { struct IArchive { struct shared_ptr<Archiver::_IArchiveImpl> { struct _IArchiveImpl {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_1_1_1; struct map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, IArchive, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, IArchive>>> { struct __tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, IArchive>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, IArchive>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, IArchive>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, IArchive>, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, IArchive>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> { unsigned long long x_3_4_1; } x_1_3_3; } x_2_2_1; } x_1_1_2; } x1; }*)arg1;
- (id)firstPartyExecutable;
- (id)modelDimension;
- (id)modelHash;
- (id)modelIsEncrypted;
- (id)modelLoadError;
- (id)modelLoadTime;
- (id)modelName;
- (id)modelOrigin;
- (id)modelType;
- (id)modelVersion;
- (id)name;
- (id)nnModelNetHash;
- (id)nnModelShapeHash;
- (id)nnModelWeightsHash;
- (id)numberFromCString:(const char *)arg1;
- (void)setBundleIdentifier:(id)arg1;
- (void)setCompilerVersion:(id)arg1;
- (void)setComputeUnits:(id)arg1;
- (void)setFirstPartyExecutable:(id)arg1;
- (void)setModelDimension:(id)arg1;
- (void)setModelHash:(id)arg1;
- (void)setModelIsEncrypted:(id)arg1;
- (void)setModelLoadError:(id)arg1;
- (void)setModelLoadTime:(id)arg1;
- (void)setModelName:(id)arg1;
- (void)setModelOrigin:(id)arg1;
- (void)setModelType:(id)arg1;
- (void)setModelVersion:(id)arg1;
- (void)setNnModelNetHash:(id)arg1;
- (void)setNnModelShapeHash:(id)arg1;
- (void)setNnModelWeightsHash:(id)arg1;

@end
