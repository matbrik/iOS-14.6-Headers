/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/PencilKit.framework/PencilKit
 */

@interface PKSelectionController : NSObject <PKSelectionObserving, PKSelectionRenderingDelegate, UIDropInteractionDelegate_Private> {
    long long  _currentIntersectionAlgorithm;
    PKStrokeSelection * _currentStrokeSelection;
    id /* block */  _deferredChangingColorBlock;
    UIDropInteraction * _dropInteraction;
    struct CGPoint { 
        double x; 
        double y; 
    }  _dropPosition;
    bool  _hasCurrentSelection;
    bool  _insertSpaceEnabled;
    id /* block */  _intersectStrokesBetweenLollipopBlock;
    NSObject<OS_dispatch_queue> * _intersectionQueue;
    bool  _isChangingColor;
    bool  _isClearingSelection;
    bool  _isCurrentlyAddingSpace;
    NSUUID * _previousDrawingUUIDForSelection;
    PKSelectionGestureView * _selectionGestureView;
    NSObject<OS_dispatch_queue> * _selectionHullQueue;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _selectionTransform;
    PKSelectionView * _selectionView;
    int  _selectionViewCount;
    PKSpaceInsertionController * _spaceInsertionController;
    PKTiledView * _tiledView;
    PKTranscriptionController * _transcriptionController;
}

@property (nonatomic, retain) PKStrokeSelection *currentStrokeSelection;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool hasCurrentSelection;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool insertSpaceEnabled;
@property (nonatomic, readonly) bool isClearingSelection;
@property (nonatomic) bool isCurrentlyAddingSpace;
@property (nonatomic, readonly) PKSelectionGestureView *selectionGestureView;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *selectionHullQueue;
@property (nonatomic, readonly) PKSelectionInteraction *selectionInteraction;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } selectionTransform;
@property (nonatomic, retain) PKSelectionView *selectionView;
@property (nonatomic, readonly) bool shouldClampInputPoints;
@property (nonatomic, retain) PKSpaceInsertionController *spaceInsertionController;
@property (readonly) Class superclass;
@property (nonatomic) PKTiledView *tiledView;

+ (id)_orderedStrokes:(id)arg1 relativeToStrokeOrderInDrawing:(id)arg2;
+ (id)_selectStrandedBitmapStrokesForIntersectedStrokesIfNecessary:(id)arg1 visibleOnscreenStrokes:(id)arg2;

- (void).cxx_destruct;
- (void)_addItemsToPasteboard:(id)arg1;
- (void)_addViewForStrokeSelection:(id)arg1 isDragSource:(bool)arg2 drawing:(id)arg3 selectionType:(long long)arg4 withCompletion:(id /* block */)arg5;
- (id)_attachmentForSelectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_calculateFrameForSelectionView:(id)arg1 inDrawing:(id)arg2;
- (id)_commitStrokeSelection:(id)arg1 toDrawing:(id)arg2 selectionAction:(long long)arg3 inkChanges:(id)arg4 selectionType:(long long)arg5 withCompletion:(id /* block */)arg6;
- (id)_commitStrokeSelection:(id)arg1 toDrawing:(id)arg2 selectionAction:(long long)arg3 selectionType:(long long)arg4;
- (void)_createSelectionViewForDropSession:(id)arg1 removeFromSource:(bool)arg2;
- (void)_createSelectionViewForDropSession:(id)arg1 removeFromSource:(bool)arg2 withStrokeSelection:(id)arg3;
- (void)_didAddDrawingAttachmentView;
- (id)_drawingForMenuController:(id)arg1;
- (id)_drawingForSelectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (long long)_dropInteraction:(id)arg1 dataOwnerForSession:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_extendedBoundsForDrawing:(id)arg1;
- (void)_findIntersectedStrokesWithoutRecognitionToSelectBetweenTopPoint:(struct CGPoint { double x1; double x2; })arg1 bottomPoint:(struct CGPoint { double x1; double x2; })arg2 inDrawing:(id)arg3 visibleOnscreenStrokes:(id)arg4 completion:(id /* block */)arg5;
- (id)_firstStrokesInStrokes:(id)arg1;
- (bool)_isValidDropPointForStrokes:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_isValidDropPointForStrokes:(struct CGPoint { double x1; double x2; })arg1 didInsertNewAttachment:(bool*)arg2;
- (id)_lastStrokesInStrokes:(id)arg1;
- (void)_layoutViewsIfNecessary;
- (bool)_liveDrawingIsAtEndOfDocument;
- (id)_newInk:(id)arg1 withChange:(id)arg2;
- (void)_pasteStrokeSelection:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 inDrawing:(id)arg3 withSelectionType:(long long)arg4;
- (struct CGPoint { double x1; double x2; })_pointInStrokeSpace:(struct CGPoint { double x1; double x2; })arg1 inDrawing:(id)arg2;
- (void)_refreshTiledViewWithSelectionForDrawing:(id)arg1 completion:(id /* block */)arg2;
- (void)_removeSelectionView;
- (void)_removeSelectionViewAnimated:(bool)arg1 withCompletion:(id /* block */)arg2;
- (void)_resetSelectedStrokeStateForRenderer;
- (id)_rotateImageIfNecessary:(id)arg1;
- (struct CGPoint { double x1; double x2; })_scrollContent:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_scrollViewDrawingFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_scrollViewVisibleBounds;
- (void)_selectionBeganInDrawing:(id)arg1 withPath:(id)arg2;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_selectionDrawingTransformForDrawing:(id)arg1;
- (struct CGPoint { double x1; double x2; })_selectionOffsetForDrawing:(id)arg1;
- (void)_selectionRefreshWithChangeToDrawings:(id)arg1;
- (void)_selectionRefreshWithChangeToDrawings:(id)arg1 completion:(id /* block */)arg2;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_selectionTransformForStrokes:(id)arg1 atLocation:(struct CGPoint { double x1; double x2; })arg2 dragOffsetInDragView:(struct CGPoint { double x1; double x2; })arg3 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg4 constrainSelection:(bool)arg5 inDrawing:(id)arg6;
- (void)_setAdditionalStrokes:(id)arg1 inDrawing:(id)arg2 completion:(id /* block */)arg3;
- (id)_strokeForLassoPath:(id)arg1 inDrawing:(id)arg2;
- (id)_visibleOnscreenStrokesForDrawing:(id)arg1;
- (id)_visibleOnscreenStrokesIncludingCurrentSelection:(id)arg1 forDrawing:(id)arg2;
- (id)_visibleStrokesWithinExtendedBounds:(id)arg1 forDrawing:(id)arg2;
- (void)addTranscriptionToPasteboard:(id)arg1;
- (void)applyCommand:(id)arg1 toDrawing:(id)arg2;
- (id)applySpaceInsertionWithStrokeSelection:(id)arg1 inDrawing:(id)arg2 offset:(double)arg3 completion:(id /* block */)arg4;
- (struct CGPoint { double x1; double x2; })autoscrollForPointIfNecessary:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsForDrawing:(id)arg1;
- (id)cachedImageConfigForSelection:(id)arg1 scaleStrategy:(long long)arg2;
- (void)changeColorOfSelection:(id)arg1;
- (void)changeColorOfSelection:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)clearSelectionIfNecessary;
- (void)clearSelectionIfNecessaryAnimated:(bool)arg1 withCompletion:(id /* block */)arg2;
- (void)clearSelectionIfNecessaryWithCompletion:(id /* block */)arg1;
- (struct CGPoint { double x1; double x2; })closestPointForPastedSelectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withDrawing:(id*)arg2;
- (void)commitSpacingResize;
- (void)commitStrokesWithCompletion:(id /* block */)arg1;
- (long long)contentTypeForIntersectedStrokes:(id)arg1 inDrawing:(id)arg2;
- (void)copy:(id)arg1;
- (void)copyTranscription:(id)arg1;
- (long long)currentIntersectionAlgorithm;
- (id)currentStrokeSelection;
- (void)cut:(id)arg1;
- (void)dealloc;
- (void)delete:(id)arg1;
- (void)didBeginDraggingSelection;
- (void)didBeginModifyDrawing;
- (void)didBeginSpaceInsertionWithLassoPath:(id)arg1 atLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)didBeginSpaceInsertionWithLassoStroke:(id)arg1 drawing:(id)arg2 addDefaultSpace:(bool)arg3 strokesAbove:(id)arg4 strokesBelow:(id)arg5;
- (void)didEndDraggingSelection;
- (void)didEndModifyDrawing;
- (void)didMoveStrokeSelectionToLocation:(struct CGPoint { double x1; double x2; })arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (bool)didResizeWhitespace;
- (void)didScroll:(struct CGPoint { double x1; double x2; })arg1;
- (void)didSelect:(id)arg1 lassoStroke:(id)arg2 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 drawing:(id)arg4;
- (void)didSelect:(id)arg1 lassoStroke:(id)arg2 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 drawing:(id)arg4 selectionType:(long long)arg5 completion:(id /* block */)arg6;
- (void)didSelectStrokesNotification:(id)arg1;
- (id)drawingForUUID:(id)arg1;
- (bool)dropInteraction:(id)arg1 canHandleSession:(id)arg2;
- (void)dropInteraction:(id)arg1 performDrop:(id)arg2;
- (id)dropInteraction:(id)arg1 previewForDroppingItem:(id)arg2 withDefault:(id)arg3;
- (void)dropInteraction:(id)arg1 sessionDidEnter:(id)arg2;
- (void)dropInteraction:(id)arg1 sessionDidExit:(id)arg2;
- (id)dropInteraction:(id)arg1 sessionDidUpdate:(id)arg2;
- (void)duplicate:(id)arg1;
- (void)eraseSelection;
- (void)fetchStrokesToSelectAtPoint:(struct CGPoint { double x1; double x2; })arg1 inDrawing:(id)arg2 withSelectionType:(long long)arg3 inputType:(long long)arg4 completion:(id /* block */)arg5;
- (void)fetchStrokesToSelectAtPoint:(struct CGPoint { double x1; double x2; })arg1 inDrawing:(id)arg2 withSelectionType:(long long)arg3 inputType:(long long)arg4 existingSelection:(id)arg5 completion:(id /* block */)arg6;
- (void)fetchStrokesToSelectBetweenTopPoint:(struct CGPoint { double x1; double x2; })arg1 bottomPoint:(struct CGPoint { double x1; double x2; })arg2 inDrawing:(id)arg3 liveScrollOffset:(struct CGPoint { double x1; double x2; })arg4 existingSelection:(id)arg5 completion:(id /* block */)arg6;
- (void)findTranscriptionWithCompletion:(id /* block */)arg1;
- (void)generateImageForStrokeSelection:(id)arg1 scaleStrategy:(long long)arg2 withCompletion:(id /* block */)arg3;
- (bool)hasCurrentSelection;
- (void)hideStrokes:(id)arg1 inDrawing:(id)arg2;
- (id)initWithTiledView:(id)arg1;
- (void)insertSpace:(id)arg1;
- (void)insertSpaceAtPoint:(struct CGPoint { double x1; double x2; })arg1 addDefaultSpace:(bool)arg2 strokesAbove:(id)arg3 strokesBelow:(id)arg4;
- (bool)insertSpaceEnabled;
- (bool)isClearingSelection;
- (bool)isCurrentlyAddingSpace;
- (bool)isRTL;
- (void)lassoSelectStrokesInDrawing:(id)arg1 withPath:(id)arg2;
- (void)moveSelectionViewBasedOnStrokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 drawing:(id)arg2;
- (bool)needsToClearSelection;
- (id)newStrokesForSelection:(id)arg1 toDrawing:(id)arg2;
- (void)paste:(id)arg1;
- (void)registerCommandWithUndoManager:(id)arg1;
- (double)scaleForDrawing:(id)arg1;
- (void)selectAll:(id)arg1;
- (void)selectStrokes:(id)arg1 forSelectionType:(long long)arg2 inDrawing:(id)arg3;
- (void)selectStrokes:(id)arg1 forSelectionType:(long long)arg2 inDrawing:(id)arg3 completion:(id /* block */)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })selectedStrokesViewClipRectForDrawing:(id)arg1;
- (struct CGColor { }*)selectionColor;
- (id)selectionGestureView;
- (id)selectionHullQueue;
- (id)selectionInteraction;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })selectionTransform;
- (id)selectionView;
- (void)setCurrentStrokeSelection:(id)arg1;
- (void)setHasCurrentSelection:(bool)arg1;
- (void)setImageOnSelectionViewForStrokeSelection:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)setInsertSpaceEnabled:(bool)arg1;
- (void)setIsCurrentlyAddingSpace:(bool)arg1;
- (void)setSelectionHullQueue:(id)arg1;
- (void)setSelectionTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setSelectionView:(id)arg1;
- (void)setSpaceInsertionController:(id)arg1;
- (void)setTiledView:(id)arg1;
- (id)setupSpaceInsertionControllerIfNecessary;
- (bool)shouldClampInputPoints;
- (id)spaceInsertionController;
- (id)strokeForInsertSpaceAtPoint:(struct CGPoint { double x1; double x2; })arg1 inDrawing:(id)arg2;
- (id)tiledView;
- (id)topView;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformFromStrokeSpaceToViewInDrawing:(id)arg1;
- (void)updateCurrentSelectionWithNewDrawingIfNecessary:(id)arg1;
- (void)updateCurrentStrokeSelectionTransformForLocation:(id)arg1 atLocation:(struct CGPoint { double x1; double x2; })arg2 offsetInTouchView:(struct CGPoint { double x1; double x2; })arg3 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg4;
- (struct CGSize { double x1; double x2; })viewSizeForStrokeSelection:(id)arg1;

@end
