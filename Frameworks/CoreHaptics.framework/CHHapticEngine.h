/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreHaptics.framework/CoreHaptics
 */

@interface CHHapticEngine : NSObject {
    unsigned int  _audioSessionID;
    bool  _autoShutdownEnabled;
    AVAudioSession * _avAudioSession;
    id /* block */  _clientFinishedHandler;
    unsigned long long  _currentPlayerBehavior;
    NSObject<OS_dispatch_queue> * _dispatchQueue;
    bool  _muteHapticsWhileRecordingAudio;
    AVHapticPlayer * _player;
    struct map<unsigned long, NSURL *, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, NSURL *>>> { 
        struct __tree<std::__1::__value_type<unsigned long, NSURL *>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, NSURL *>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, NSURL *>>> { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, NSURL *>, void *>>> { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, NSURL *>, std::__1::less<unsigned long>, true>> { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _publicAudioResources;
    id /* block */  _resetHandler;
    bool  _running;
    HapticServerConfig * _serverConfig;
    bool  _sessionIsConstantVolume;
    bool  _sessionIsShared;
    id /* block */  _stoppedHandler;
    NSObject<OS_dispatch_source> * _timer;
}

@property (nonatomic) bool activateAudioSessionOnStart;
@property (nonatomic) bool audioIsMuted;
@property (readonly) unsigned int audioSessionID;
@property (getter=isAutoShutdownEnabled, nonatomic) bool autoShutdownEnabled;
@property (readonly) AVAudioSession *avAudioSession;
@property (copy) id /* block */ clientFinishedHandler;
@property unsigned long long currentPlayerBehavior;
@property (readonly) double currentTime;
@property (nonatomic) bool followAudioRoute;
@property (nonatomic) bool hapticsIsMuted;
@property (nonatomic) bool hapticsOnly;
@property (nonatomic) bool highPriority;
@property (nonatomic) bool isMutedForAudio;
@property (nonatomic) bool isMutedForHaptics;
@property (nonatomic) bool muteAudioOnRingerOff;
@property (nonatomic) bool muteHapticsWhileRecordingAudio;
@property (readonly) AVHapticPlayer *player;
@property (nonatomic) bool playsHapticsOnly;
@property (copy) id /* block */ resetHandler;
@property bool running;
@property (readonly) HapticServerConfig *serverConfig;
@property (readonly) bool sessionIsConstantVolume;
@property (readonly) bool sessionIsShared;
@property (copy) id /* block */ stoppedHandler;
@property (retain) NSObject<OS_dispatch_source> *timer;

+ (id)capabilitiesForHardware;
+ (void)dispatchOnGlobal:(id /* block */)arg1;
+ (unsigned long long)doRegisterAudioResource:(id)arg1 options:(id)arg2 fromPattern:(bool)arg3 player:(id)arg4 error:(id*)arg5;
+ (bool)doUnregisterAudioResource:(unsigned long long)arg1 fromPattern:(bool)arg2 player:(id)arg3 error:(id*)arg4;
+ (void)initialize;
+ (void)lazyInitResourceMap;
+ (bool)resourceIsRegistered:(unsigned long long)arg1;
+ (bool)supports1stPartyHaptics;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)activateAudioSessionOnStart;
- (void)addPublicAudioResourceID:(unsigned long long)arg1 withURL:(id)arg2;
- (bool)audioIsMuted;
- (unsigned int)audioSessionID;
- (id)avAudioSession;
- (void)beginIdleTimer;
- (void)cancelIdleTimer;
- (bool)checkEngineRunning:(id*)arg1;
- (bool)checkEngineStateOnStart:(id*)arg1;
- (id /* block */)clientFinishedHandler;
- (void)connectAudioSession:(id)arg1;
- (id)createAdvancedPlayerWithPattern:(id)arg1 error:(id*)arg2;
- (id)createAdvancedPlayerWithRingtoneData:(id)arg1 error:(id*)arg2;
- (id)createAdvancedPlayerWithRingtonePattern:(id)arg1 error:(id*)arg2;
- (id)createHapticPlayerWithOptions:(id)arg1;
- (id)createOptionsFromAudioSessionID:(unsigned int)arg1 shared:(bool)arg2;
- (id)createPlayerWithEvent:(id)arg1 error:(id*)arg2;
- (id)createPlayerWithPattern:(id)arg1 error:(id*)arg2;
- (id)createPrivilegedPlayerWithPlayable:(id)arg1 error:(id*)arg2;
- (unsigned long long)currentPlayerBehavior;
- (double)currentTime;
- (void)dealloc;
- (void)disconnectAudioSession:(id)arg1;
- (void)dispatchOnLocal:(id /* block */)arg1;
- (void)dispatchSyncOnLocal:(id /* block */)arg1;
- (struct __map_iterator<std::__1::__tree_iterator<std::__1::__value_type<unsigned long, NSURL *>, std::__1::__tree_node<std::__1::__value_type<unsigned long, NSURL *>, void *> *, long>> { struct __tree_iterator<std::__1::__value_type<unsigned long, NSURL *>, std::__1::__tree_node<std::__1::__value_type<unsigned long, NSURL *>, void *> *, long> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; } x1; })doFindPublicAudioResourceID:(unsigned long long)arg1;
- (bool)doInit:(unsigned int)arg1 sessionIsShared:(bool)arg2 error:(id*)arg3;
- (bool)doInitWithOptions:(id)arg1 error:(id*)arg2;
- (bool)doPlayPatternFromDictionary:(id)arg1 error:(id*)arg2;
- (bool)doReferenceAudioResourceByID:(unsigned long long)arg1;
- (bool)doStartEngineAndWait:(id*)arg1;
- (void)doStartWithCompletionHandler:(id /* block */)arg1;
- (bool)doStopEngineAndWait:(id*)arg1;
- (void)doStopWithCompletionHandler:(id /* block */)arg1;
- (void)doUnregisterAllPublicAudioResources;
- (bool)finishInit:(id*)arg1;
- (bool)followAudioRoute;
- (id)getAvailableChannel:(id*)arg1;
- (double)getDurationForResource:(unsigned long long)arg1;
- (id)getMetricsForPlayer:(id)arg1;
- (long long)getReporterIDFromAVAudioSession:(id)arg1;
- (unsigned int)getSessionIDFromAVAudioSession:(id)arg1;
- (void)handleConnectionError;
- (void)handleFinish:(id)arg1;
- (void)handleMediaServerRecovery:(id)arg1;
- (bool)hapticsIsMuted;
- (bool)hapticsOnly;
- (bool)hasPublicAudioResourceID:(unsigned long long)arg1;
- (bool)highPriority;
- (unsigned long long)idForPublicAudioResourceURL:(id)arg1;
- (id)init;
- (id)initAndReturnError:(id*)arg1;
- (id)initWithAudioSession:(id)arg1 error:(id*)arg2;
- (id)initWithAudioSession:(id)arg1 sessionIsShared:(bool)arg2 error:(id*)arg3;
- (id)initWithAudioSessionID:(unsigned int)arg1 error:(id*)arg2;
- (id)initWithOptions:(id)arg1 error:(id*)arg2;
- (bool)isAutoShutdownEnabled;
- (bool)isBehaviorSet:(unsigned long long)arg1;
- (bool)isMutedForAudio;
- (bool)isMutedForHaptics;
- (bool)muteAudioOnRingerOff;
- (bool)muteHapticsWhileRecordingAudio;
- (bool)notifyPlayerStarted:(id)arg1 atTime:(double)arg2;
- (void)notifyPlayerStopped:(id)arg1 atTime:(double)arg2;
- (void)notifyWhenPlayersFinished:(id /* block */)arg1;
- (bool)playPatternFromData:(id)arg1 error:(id*)arg2;
- (bool)playPatternFromURL:(id)arg1 error:(id*)arg2;
- (id)player;
- (bool)playsHapticsOnly;
- (void)prewarmWithCompletionHandler:(id /* block */)arg1;
- (unsigned long long)registerAudioResource:(id)arg1 options:(id)arg2 error:(id*)arg3;
- (void)releaseChannel:(id)arg1;
- (void)removePublicAudioResourceID:(unsigned long long)arg1;
- (id /* block */)resetHandler;
- (bool)resourceIsRegistered:(unsigned long long)arg1;
- (bool)running;
- (id)serverConfig;
- (bool)sessionIsConstantVolume;
- (bool)sessionIsShared;
- (void)setActivateAudioSessionOnStart:(bool)arg1;
- (void)setAudioIsMuted:(bool)arg1;
- (void)setAutoShutdownEnabled:(bool)arg1;
- (void)setClientFinishedHandler:(id /* block */)arg1;
- (void)setCurrentPlayerBehavior:(unsigned long long)arg1;
- (void)setFollowAudioRoute:(bool)arg1;
- (void)setHapticsIsMuted:(bool)arg1;
- (void)setHapticsOnly:(bool)arg1;
- (void)setHighPriority:(bool)arg1;
- (void)setIsMutedForAudio:(bool)arg1;
- (void)setIsMutedForHaptics:(bool)arg1;
- (void)setMetricsTestModeEnabled;
- (void)setMuteAudioOnRingerOff:(bool)arg1;
- (void)setMuteHapticsWhileRecordingAudio:(bool)arg1;
- (void)setPlaysHapticsOnly:(bool)arg1;
- (void)setResetHandler:(id /* block */)arg1;
- (void)setRunning:(bool)arg1;
- (void)setStoppedHandler:(id /* block */)arg1;
- (void)setTimer:(id)arg1;
- (bool)setupUnsharedAudioSessionAndReturnError:(id*)arg1;
- (bool)startAndReturnError:(id*)arg1;
- (void)startIdleTimerWithHandler:(id /* block */)arg1;
- (void)startWithCompletionHandler:(id /* block */)arg1;
- (void)stopAndWait;
- (void)stopPrewarm;
- (void)stopWithCompletionHandler:(id /* block */)arg1;
- (id /* block */)stoppedHandler;
- (id)timer;
- (void)toggleBehavior:(unsigned long long)arg1 set:(bool)arg2;
- (bool)unregisterAudioResource:(unsigned long long)arg1 error:(id*)arg2;
- (void)updateEngineBehavior;
- (void)updatePlayerDuration:(id)arg1 atTime:(double)arg2;

@end
