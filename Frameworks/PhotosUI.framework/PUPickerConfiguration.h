/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI
 */

@interface PUPickerConfiguration : NSObject <NSItemProviderReading, NSItemProviderWriting, NSSecureCoding> {
    <PUPickerFilter> * _filter;
    struct { 
        unsigned int val[8]; 
    }  _limitedLibraryClientAuditToken;
    NSString * _limitedLibraryClientIdentifier;
    NSURL * _photoLibraryURL;
    long long  _preferredAssetRepresentationMode;
    bool  _requiresPickingConfirmation;
    unsigned long long  _resultOptions;
    long long  _selectionLimit;
    bool  _showsFileSizePicker;
    bool  _useMessagesLayout;
}

@property (nonatomic, readonly) bool allowsAssetData;
@property (nonatomic, readonly) bool allowsAssetIdentifiers;
@property (nonatomic, readonly) bool allowsMultipleSelection;
@property (nonatomic, readonly) bool allowsUnlimitedMultipleSelection;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly, copy) <PUPickerFilter> *filter;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isValidConfiguration;
@property (nonatomic) struct { unsigned int x1[8]; } limitedLibraryClientAuditToken;
@property (nonatomic, copy) NSString *limitedLibraryClientIdentifier;
@property (nonatomic, readonly, copy) NSURL *photoLibraryURL;
@property (nonatomic, readonly) long long preferredAssetRepresentationMode;
@property (nonatomic) bool requiresPickingConfirmation;
@property (nonatomic, readonly) unsigned long long resultOptions;
@property (nonatomic, readonly) long long selectionLimit;
@property (nonatomic, readonly) bool shouldRequestCurrentIfPossible;
@property (nonatomic) bool showsFileSizePicker;
@property (readonly) Class superclass;
@property (nonatomic) bool useMessagesLayout;
@property (nonatomic, readonly, copy) NSArray *writableTypeIdentifiersForItemProvider;

+ (id)objectWithItemProviderData:(id)arg1 typeIdentifier:(id)arg2 error:(id*)arg3;
+ (id)readableTypeIdentifiersForItemProvider;
+ (bool)supportsSecureCoding;
+ (id)writableTypeIdentifiersForItemProvider;

- (void).cxx_destruct;
- (bool)allowsAssetData;
- (bool)allowsAssetIdentifiers;
- (bool)allowsMultipleSelection;
- (bool)allowsUnlimitedMultipleSelection;
- (void)encodeWithCoder:(id)arg1;
- (id)filter;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithPHPickerConfiguration:(id)arg1;
- (bool)isValidConfiguration;
- (struct { unsigned int x1[8]; })limitedLibraryClientAuditToken;
- (id)limitedLibraryClientIdentifier;
- (id)loadDataWithTypeIdentifier:(id)arg1 forItemProviderCompletionHandler:(id /* block */)arg2;
- (id)photoLibraryURL;
- (long long)preferredAssetRepresentationMode;
- (bool)requiresPickingConfirmation;
- (unsigned long long)resultOptions;
- (long long)selectionLimit;
- (void)setLimitedLibraryClientAuditToken:(struct { unsigned int x1[8]; })arg1;
- (void)setLimitedLibraryClientIdentifier:(id)arg1;
- (void)setRequiresPickingConfirmation:(bool)arg1;
- (void)setShowsFileSizePicker:(bool)arg1;
- (void)setUseMessagesLayout:(bool)arg1;
- (bool)shouldRequestCurrentIfPossible;
- (bool)showsFileSizePicker;
- (bool)useMessagesLayout;

@end
