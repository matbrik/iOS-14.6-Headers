/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/PencilKit.framework/PencilKit
 */

@interface PKMetalRendererController : NSObject <PKRendererVSyncControllerDelegate> {
    double  __latestLatency;
    struct CGSize { 
        double width; 
        double height; 
    }  _actualSize;
    NSObject<OS_dispatch_semaphore> * _canBeginRenderSemaphore;
    _Atomic int  _cancelAllRendering;
    _Atomic int  _cancelLongRunningRenderingCount;
    struct CGPoint { 
        double x; 
        double y; 
    }  _canvasOffset;
    id /* block */  _canvasOffsetBlock;
    <CAMetalDrawable> * _currentDrawable;
    <MTLTexture> * _currentTextureTarget;
    <PKMetalRendererControllerDelegate> * _delegate;
    bool  _dirtyRectMightBeInvalid;
    bool  _fadeOutStrokesMode;
    PKStrokeGenerator * _inputController;
    double  _inputScale;
    bool  _invertColors;
    bool  _isTorndown;
    _Atomic double  _lastFrameDuration;
    _Atomic unsigned long long  _lastPresentationTime;
    PKLinedPaper * _linedPaper;
    double  _liveStrokeDuration;
    double  _liveStrokeElapsedTime;
    struct CGSize { 
        double width; 
        double height; 
    }  _liveStrokeMaxSize;
    bool  _liveStrokeMode;
    NSArray * _liveStrokeStrokes;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _liveStrokeStrokesAnimationBounds;
    struct CGImage { } * _paperTextureImage;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _paperTransform;
    unsigned long long  _pixelFormat;
    struct CGSize { 
        double width; 
        double height; 
    }  _pixelSize;
    NSMutableArray * _postPresentCallbacks;
    struct PKRunningStat { 
        long long numValues; 
        long long numValuesOverLimit; 
        double oldM; 
        double newM; 
        double oldS; 
        double newS; 
        double minValue; 
        double maxValue; 
        double limit; 
        struct os_unfair_lock_s { 
            unsigned int _os_unfair_lock_opaque; 
        } lock; 
    }  _predictedTouchesLatencyStat;
    long long  _presentationCount;
    CAMetalLayer * _presentationLayer;
    _Atomic int  _queuedRenders;
    struct atomic_flag { 
        _Atomic bool _Value; 
    }  _readyToBeginRender;
    NSObject<OS_dispatch_queue> * _renderQueue;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _renderTransform;
    PKMetalRenderer * _renderer;
    struct PKRunningStat { 
        long long numValues; 
        long long numValuesOverLimit; 
        double oldM; 
        double newM; 
        double oldS; 
        double newS; 
        double minValue; 
        double maxValue; 
        double limit; 
        struct os_unfair_lock_s { 
            unsigned int _os_unfair_lock_opaque; 
        } lock; 
    }  _strokeLatencyStat;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _strokeTransform;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _strokeTransformForRenderQueue;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _viewScissor;
}

@property (nonatomic) double _latestLatency;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } actualSize;
@property (nonatomic) double backboardPaperMultiply;
@property (nonatomic, readonly) <MTLCommandQueue> *commandQueue;
@property (nonatomic) <PKMetalRendererControllerDelegate> *delegate;
@property (nonatomic, readonly) <MTLDevice> *device;
@property (nonatomic) bool fadeOutStrokesMode;
@property (nonatomic, readonly) PKStrokeGenerator *inputController;
@property double inputScale;
@property (nonatomic) bool invertColors;
@property (nonatomic, retain) PKLinedPaper *linedPaper;
@property (nonatomic) double liveStrokeDuration;
@property (nonatomic) double liveStrokeElapsedTime;
@property (nonatomic) struct CGSize { double x1; double x2; } liveStrokeMaxSize;
@property (nonatomic) bool liveStrokeMode;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } paperTransform;
@property (nonatomic, readonly) unsigned long long pixelFormat;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } pixelSize;
@property (nonatomic) CAMetalLayer *presentationLayer;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *renderQueue;
@property struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } renderTransform;
@property (nonatomic, retain) PKMetalRenderer *renderer;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } strokeTransform;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } viewScissor;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_copyIntoTilesFromRenderQueue:(id)arg1 tileTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (unsigned long long)_drawStrokesAfterClear:(id)arg1 clippedToStrokeSpaceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 strokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 useLayerContext:(bool)arg4 progress:(id)arg5;
- (void)_drawStrokesAfterClear:(id)arg1 clippedToStrokeSpaceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 strokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 useLayerContext:(bool)arg4 renderCompletion:(id /* block */)arg5;
- (double)_latestLatency;
- (void)_present:(double)arg1 setDirtyRect:(bool)arg2;
- (bool)_renderAheadWithTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 at:(double)arg2;
- (void)_renderAndPresent:(bool)arg1 withTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (void)_renderDrawPoints;
- (void)_renderLiveStrokeAndPresentWithTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 at:(double)arg2 setDirtyRect:(bool)arg3;
- (bool)_setupCurrentDrawable;
- (void)_updateRendererStrokeTransformWithTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 offset:(struct CGPoint { double x1; double x2; })arg2;
- (struct CGSize { double x1; double x2; })actualSize;
- (double)backboardPaperMultiply;
- (void)buildRenderCacheForStrokes:(id)arg1;
- (void)callBlockAfterPresenting:(id /* block */)arg1;
- (void)cancelAllRendering;
- (void)cancelLongRunningRenders;
- (void)changeRenderSize;
- (void)clear;
- (id)commandQueue;
- (void)copyIntoTiles:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (id)device;
- (void)didFinishRendering:(id /* block */)arg1;
- (void)drawImage:(struct CGImage { }*)arg1 andMask:(struct CGImage { }*)arg2;
- (void)drawImage:(struct CGImage { }*)arg1 andMask:(struct CGImage { }*)arg2 clippedToStrokeSpaceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)drawStrokes:(id)arg1 clippedToStrokeSpaceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 completion:(id /* block */)arg3;
- (bool)drawStrokes:(id)arg1 intoTile:(id)arg2 renderCount:(long long)arg3;
- (void)drawStrokes:(id)arg1 renderIntermediateSteps:(bool)arg2 completion:(id /* block */)arg3;
- (void)drawStrokesAfterClear:(id)arg1 clippedToStrokeSpaceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 completion:(id /* block */)arg3;
- (void)drawStrokesAfterClear:(id)arg1 clippedToStrokeSpaceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 strokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 useLayerContext:(bool)arg4 completion:(id /* block */)arg5;
- (void)drawTexture:(id)arg1;
- (void)drawingBeganWithStroke:(id)arg1;
- (void)drawingCancelled;
- (void)drawingCancelledWithCompletion:(id /* block */)arg1;
- (void)drawingEnded:(id)arg1 finishStrokeBlock:(id /* block */)arg2;
- (bool)fadeOutStrokesMode;
- (void)flushMemoryIfPossible;
- (void)generateSmartFillMaskForStroke:(id)arg1 maskPaths:(const struct vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint>>, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint>>>> { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint>> {} *x1; struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint>> {} *x2; struct __compressed_pair<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint>> *, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint>>>> { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint>> {} *x_3_1_1; } x3; }*)arg2 completionBlock:(id /* block */)arg3;
- (id)initWithPixelSize:(struct CGSize { double x1; double x2; })arg1 actualSize:(struct CGSize { double x1; double x2; })arg2 renderQueue:(id)arg3 usePrivateResourceHandler:(bool)arg4;
- (id)initWithPixelSize:(struct CGSize { double x1; double x2; })arg1 actualSize:(struct CGSize { double x1; double x2; })arg2 renderQueue:(id)arg3 usePrivateResourceHandler:(bool)arg4 pixelFormat:(unsigned long long)arg5;
- (id)inputController;
- (double)inputScale;
- (bool)invertColors;
- (bool)isAllRenderingCancelled;
- (bool)isLongRunningRenderingCancelled;
- (id)linedPaper;
- (double)liveStrokeDuration;
- (double)liveStrokeElapsedTime;
- (struct CGSize { double x1; double x2; })liveStrokeMaxSize;
- (bool)liveStrokeMode;
- (void)liveStrokeParticlesToFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 strokes:(id)arg2 startTime:(double)arg3 duration:(double)arg4;
- (struct CGImage { }*)newCGImage;
- (struct CGImage { }*)newCGImageWithClipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })paperTransform;
- (unsigned long long)pixelFormat;
- (struct CGSize { double x1; double x2; })pixelSize;
- (void)pokeEventDispatcher;
- (bool)prerenderWithTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 inputScale:(double)arg2 at:(double)arg3;
- (id)presentationLayer;
- (void)purgeOriginalBackFramebuffer;
- (void)purgeRenderCachesForStrokes:(id)arg1;
- (id)renderQueue;
- (void)renderStrokes:(id)arg1 clippedToStrokeSpaceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 strokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 imageClipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 completion:(id /* block */)arg5;
- (struct CGImage { }*)renderStrokesSync:(id)arg1 clippedToStrokeSpaceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 strokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 imageClipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (void)renderTiles:(id)arg1 tileTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (void)renderTilesIntoTiles:(id)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })renderTransform;
- (void)renderWithTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 inputScale:(double)arg2 at:(double)arg3;
- (id)renderer;
- (void)replaceInkTexture:(id)arg1 image:(struct CGImage { }*)arg2;
- (void)resumeLongRunningRenders;
- (void)resumeLongRunningRendersAfterAllWorkIsDone;
- (void)setAlternativeStrokes:(id)arg1 alpha:(double)arg2 originalStrokeAlpha:(double)arg3;
- (void)setBackboardPaperMultiply:(double)arg1;
- (void)setBackgroundColor:(struct CGColor { }*)arg1;
- (void)setCanvasOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setCanvasOffsetPresentationOffsetBlock:(id /* block */)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFadeOutStrokesMode:(bool)arg1;
- (void)setInputScale:(double)arg1;
- (void)setInvertColors:(bool)arg1;
- (void)setLinedPaper:(id)arg1;
- (void)setLiveRenderingOverrideColor:(struct CGColor { }*)arg1;
- (void)setLiveStrokeDuration:(double)arg1;
- (void)setLiveStrokeElapsedTime:(double)arg1;
- (void)setLiveStrokeMaxSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setLiveStrokeMode:(bool)arg1;
- (void)setLiveStrokeStrokes:(id)arg1 animationBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)setPaperTextureImage:(struct CGImage { }*)arg1;
- (void)setPaperTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setPixelSize:(struct CGSize { double x1; double x2; })arg1 actualSize:(struct CGSize { double x1; double x2; })arg2;
- (void)setPresentationLayer:(id)arg1;
- (void)setRenderTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setRenderer:(id)arg1;
- (void)setResourceCacheSize:(unsigned long long)arg1;
- (void)setStrokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setViewScissor:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)set_latestLatency:(double)arg1;
- (void)setup;
- (void)setupSync;
- (void)signalVSyncSemaphore:(double)arg1 presentationTime:(unsigned long long)arg2;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })strokeTransform;
- (void)teardown;
- (void)teardownSync;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })viewScissor;

@end
