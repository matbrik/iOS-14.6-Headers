/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TextRecognition.framework/TextRecognition
 */

@interface CRNeuralTextDetectorV2 : CRNeuralTextDetector {
    CRTextDetectorModel * _model;
}

@property (retain) CRTextDetectorModel *model;

+ (void)aggregateScoreAndGeoMap:(id)arg1 inputGeo:(id)arg2 targetSize:(struct CGSize { double x1; double x2; })arg3 outputScoreMap:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg4 outputGeoMap:(struct vector<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>, std::__1::allocator<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>>> { struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x1; struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x2; struct __compressed_pair<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> *, std::__1::allocator<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>>> { struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x_3_1_1; } x3; }*)arg5 outputOrigin:(struct CGPoint { double x1; double x2; })arg6;
+ (void)calculateTargetOutputSize:(struct CGSize { double x1; double x2; }*)arg1 adjustedInputScale:(double*)arg2 paddedSize:(struct CGSize { double x1; double x2; }*)arg3 imageSize:(struct CGSize { double x1; double x2; })arg4 maximumSize:(struct CGSize { double x1; double x2; })arg5;
+ (void)convertVImageGeoMaps:(struct vector<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>, std::__1::allocator<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>>> { struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x1; struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x2; struct __compressed_pair<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> *, std::__1::allocator<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>>> { struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x_3_1_1; } x3; }*)arg1 toVector:(struct vector<std::__1::vector<float, std::__1::allocator<float>>, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>> { struct vector<float, std::__1::allocator<float>> {} *x1; struct vector<float, std::__1::allocator<float>> {} *x2; struct __compressed_pair<std::__1::vector<float, std::__1::allocator<float>> *, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>> { struct vector<float, std::__1::allocator<float>> {} *x_3_1_1; } x3; }*)arg2;
+ (void)convertVImageScoreMap:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg1 toVector:(struct vector<float, std::__1::allocator<float>> { float *x1; float *x2; struct __compressed_pair<float *, std::__1::allocator<float>> { float *x_3_1_1; } x3; }*)arg2;
+ (struct vector<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>, std::__1::allocator<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>>> { struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x1; struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x2; struct __compressed_pair<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> *, std::__1::allocator<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>>> { struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x_3_1_1; } x3; })createGeometricMaps:(struct CGSize { double x1; double x2; })arg1;
+ (struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> { struct __compressed_pair<CRImageBuffer *, std::__1::default_delete<CRImageBuffer>> { struct CRImageBuffer {} *x_1_1_1; } x1; })createImageMap:(id)arg1 targetSize:(struct CGSize { double x1; double x2; })arg2;
+ (void)genPolyResultsForMIVSNMS:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg1 geoMap:(struct vector<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>, std::__1::allocator<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>>> { struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x1; struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x2; struct __compressed_pair<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> *, std::__1::allocator<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>>> { struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x_3_1_1; } x3; }*)arg2 targetSize:(struct CGSize { double x1; double x2; })arg3 output:(struct vector<CRDetectorUtils::CRTextDetectorQuadFeature, std::__1::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>> { struct CRTextDetectorQuadFeature {} *x1; struct CRTextDetectorQuadFeature {} *x2; struct __compressed_pair<CRDetectorUtils::CRTextDetectorQuadFeature *, std::__1::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>> { struct CRTextDetectorQuadFeature {} *x_3_1_1; } x3; }*)arg4 mergingType:(int)arg5;
+ (void)getMasksForScoreMap:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg1 imageMask:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg2 binaryMask:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg3;
+ (void)scaleBufferNearestNeighbor:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg1 geoMap:(struct vector<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>, std::__1::allocator<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>>> { struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x1; struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x2; struct __compressed_pair<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> *, std::__1::allocator<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>>> { struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x_3_1_1; } x3; }*)arg2 dest:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg3 destGeomap:(struct vector<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>, std::__1::allocator<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>>> { struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x1; struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x2; struct __compressed_pair<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> *, std::__1::allocator<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>>> { struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x_3_1_1; } x3; }*)arg4 binaryMask:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg5;
+ (struct CGSize { double x1; double x2; })smallestImageSizeForTextWithRelativeHeight:(double)arg1 originalImageSize:(struct CGSize { double x1; double x2; })arg2;

- (void).cxx_destruct;
- (id)detectInImage:(id)arg1 error:(id*)arg2;
- (id)init;
- (id)initWithConfiguration:(id)arg1 error:(id*)arg2;
- (id)model;
- (id)processScoreMap:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg1 geoMap:(struct vector<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>, std::__1::allocator<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>>> { struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x1; struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x2; struct __compressed_pair<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> *, std::__1::allocator<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>>> { struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x_3_1_1; } x3; }*)arg2 adjustedSize:(struct CGSize { double x1; double x2; })arg3 scoreMapFullTile:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg4 geoMapFullTile:(struct vector<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>, std::__1::allocator<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>>> { struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x1; struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x2; struct __compressed_pair<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> *, std::__1::allocator<std::__1::unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>>>> { struct unique_ptr<CRImageBuffer, std::__1::default_delete<CRImageBuffer>> {} *x_3_1_1; } x3; }*)arg5 adjustedFullTileSize:(struct CGSize { double x1; double x2; })arg6 targetSize:(struct CGSize { double x1; double x2; })arg7 targetSizeFullTile:(struct CGSize { double x1; double x2; })arg8 intermediateResults:(id*)arg9;
- (void)setModel:(id)arg1;

@end
