/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/URLCompression.framework/URLCompression
 */

@interface UCAppClipCodeURLEncoder : NSObject <UCAppClipCodeURLEncoding, UCAppClipCodeURLEncodingPrivate> {
    long long  _codingVersion;
    struct unique_ptr<UC::SUE::SegmentedURLEncoderImpl, std::__1::default_delete<UC::SUE::SegmentedURLEncoderImpl>> { 
        struct __compressed_pair<UC::SUE::SegmentedURLEncoderImpl *, std::__1::default_delete<UC::SUE::SegmentedURLEncoderImpl>> { 
            struct SegmentedURLEncoderImpl {} *__value_; 
        } __ptr_; 
    }  _encoder;
}

@property (nonatomic, readonly) long long codingVersion;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (id)encoderWithExtendedInterfaceWithVersion:(long long)arg1;
+ (id)encoderWithVersion:(long long)arg1;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_convertRawURLEncodingBitsToAppClipCodeData:(const struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_4_1; unsigned long long x_1_4_2; unsigned long long x_1_4_3; } x_1_3_1; struct __short { BOOL x_2_4_1[23]; struct { unsigned char x_2_5_1; } x_2_4_2; } x_1_3_2; struct __raw { unsigned long long x_3_4_1[3]; } x_1_3_3; } x_1_2_1; } x_1_1_1; } x1; }*)arg1;
- (struct shared_ptr<UC::SUE::UCSegmentedURLEncodingResult> { struct UCSegmentedURLEncodingResult {} *x1; struct __shared_weak_count {} *x2; })_encodeURL:(id)arg1 error:(id*)arg2;
- (id)_errorFromCoderError:(const struct CoderError { int (**x1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_2_1_1; } x2; int x3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_4_1_1; } x4; }*)arg1;
- (id)_errorWithCoderErrorCode:(long long)arg1 codingErrorSymbol:(id)arg2 message:(id)arg3;
- (id)_errorWithUnsupportedURLComponentType:(long long)arg1;
- (void)clearCaches;
- (long long)codingVersion;
- (void)dealloc;
- (id)encodeURL:(id)arg1 error:(id*)arg2;
- (id)initWithCodingVersion:(long long)arg1;
- (id)resultForEncodingURL:(id)arg1 error:(id*)arg2;

@end
