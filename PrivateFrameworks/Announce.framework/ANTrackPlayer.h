/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Announce.framework/Announce
 */

@interface ANTrackPlayer : NSObject {
    NSURL * _audioFileAtStart;
    NSURL * _audioFileTransition;
    AVAudioSession * _audioSession;
    ANAudioSessionManager * _audioSessionManager;
    <ANTrackPlayerDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    NSUUID * _endpointUUID;
    double  _interruptionStart;
    NSObject<OS_os_log> * _log;
    unsigned long long  _options;
    unsigned long long  _playbackState;
    NSMutableArray * _playerItems;
    NSObject<OS_dispatch_group> * _playerStartGroup;
    double  _previousSkipGoesToPreviousTrackDelta;
    AVQueuePlayer * _queuePlayer;
    bool  _readyToPlay;
    double  _silenceBetweenEachTrack;
    double  _trimStartTone;
    double  _trimTransitionTone;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property (nonatomic, retain) NSURL *audioFileAtStart;
@property (nonatomic, retain) NSURL *audioFileTransition;
@property (nonatomic, readonly) AVAudioSession *audioSession;
@property (nonatomic, readonly) ANAudioSessionManager *audioSessionManager;
@property <ANTrackPlayerDelegate> *delegate;
@property NSObject<OS_dispatch_queue> *delegateQueue;
@property (nonatomic, readonly) NSUUID *endpointUUID;
@property double interruptionStart;
@property (nonatomic, readonly) NSObject<OS_os_log> *log;
@property (nonatomic, readonly) int numberActiveTracks;
@property (nonatomic, readonly) unsigned long long options;
@property unsigned long long playbackState;
@property (nonatomic, readonly) NSMutableArray *playerItems;
@property (nonatomic, retain) NSObject<OS_dispatch_group> *playerStartGroup;
@property double previousSkipGoesToPreviousTrackDelta;
@property (nonatomic, retain) AVQueuePlayer *queuePlayer;
@property (nonatomic) bool readyToPlay;
@property double silenceBetweenEachTrack;
@property double trimStartTone;
@property double trimTransitionTone;
@property (nonatomic, readonly) NSString *whatIsPlaying;
@property (readonly) NSObject<OS_dispatch_queue> *workQueue;

+ (double)machTimeToSeconds:(unsigned long long)arg1;
+ (unsigned long long)secondsToMachTime:(double)arg1;

- (void).cxx_destruct;
- (bool)_add:(id)arg1 announcementID:(id)arg2 trackType:(long long)arg3;
- (void)_addObserverForPlayer:(id)arg1;
- (bool)_addURL:(id)arg1 announcementID:(id)arg2 trackType:(long long)arg3;
- (void)_callDelegateWithBlock:(id /* block */)arg1;
- (void)_configureAudioSession;
- (void)_deregisterForNotificationsWithAudioSession:(id)arg1;
- (bool)_insertAudioBetween;
- (bool)_playSync;
- (id)_playerInfoForAVPlayerItem:(id)arg1;
- (void)_registerForNotificationsWithAudioSession:(id)arg1;
- (void)_removeItemObserverForPlayer:(id)arg1;
- (void)_removeObserverForPlayer:(id)arg1;
- (void)_resumePlaybackAfterInterruptionAtTimeInterval:(double)arg1;
- (void)_stopPlaybackAndFailWithItem:(id)arg1 error:(id)arg2;
- (id)_stringForPlayerItemStatus:(long long)arg1;
- (id)_stringForPlayerStatus:(long long)arg1;
- (id)_stringForTimeControlStatus:(long long)arg1;
- (bool)add:(id)arg1 announcementID:(id)arg2;
- (id)audioFileAtStart;
- (id)audioFileTransition;
- (id)audioSession;
- (void)audioSessionInterruptionHandler:(id)arg1;
- (id)audioSessionManager;
- (void)audioSessionMediaServicesLostHandler:(id)arg1;
- (void)audioSessionMediaServicesResetHandler:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (id)delegateQueue;
- (void)end;
- (id)endpointUUID;
- (void)handleInterruptionDelay:(double)arg1;
- (id)initWithOptions:(unsigned long long)arg1;
- (id)initWithOptions:(unsigned long long)arg1 endpointUUID:(id)arg2;
- (double)interruptionStart;
- (id)log;
- (void)next;
- (void)nextInternalSync;
- (int)numberActiveTracks;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (unsigned long long)options;
- (bool)playInternalSync;
- (void)playWithCompletionHandler:(id /* block */)arg1;
- (unsigned long long)playbackState;
- (void)playerItemPlayedToEndHandler:(id)arg1;
- (id)playerItems;
- (void)playerRateChangedHandler:(id)arg1;
- (id)playerStartGroup;
- (id)prepareToPlay;
- (void)previous;
- (void)previousInternalSync;
- (double)previousSkipGoesToPreviousTrackDelta;
- (id)queuePlayer;
- (bool)readyToPlay;
- (void)setAudioFileAtStart:(id)arg1;
- (void)setAudioFileTransition:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDelegateQueue:(id)arg1;
- (void)setInterruptionStart:(double)arg1;
- (void)setPlaybackState:(unsigned long long)arg1;
- (void)setPlayerStartGroup:(id)arg1;
- (void)setPreviousSkipGoesToPreviousTrackDelta:(double)arg1;
- (void)setQueuePlayer:(id)arg1;
- (void)setReadyToPlay:(bool)arg1;
- (void)setSilenceBetweenEachTrack:(double)arg1;
- (void)setTrimStartTone:(double)arg1;
- (void)setTrimTransitionTone:(double)arg1;
- (double)silenceBetweenEachTrack;
- (void)stop;
- (void)stopInternalSync;
- (double)trimStartTone;
- (double)trimTransitionTone;
- (id)whatIsPlaying;
- (id)workQueue;

@end
