/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/WorkflowUIServices.framework/WorkflowUIServices
 */

@interface WFWidgetConfigurationRequest : NSObject <NSSecureCoding> {
    NSString * _bundleIdentifier;
    struct CGSize { 
        double width; 
        double height; 
    }  _defaultCardSize;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _initialCardFrame;
    INIntent * _intent;
    NSSecurityScopedURLWrapper * _schemaBundleURL;
    unsigned long long  _sizeClass;
    bool  _usesWidgetAccentColor;
    NSSecurityScopedURLWrapper * _widgetBundleScopedURL;
    NSString * _widgetDescription;
    NSString * _widgetDisplayName;
    UIColor * _widgetPrimaryColor;
    UIColor * _widgetTintColor;
}

@property (nonatomic, readonly, copy) NSString *bundleIdentifier;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } defaultCardSize;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } initialCardFrame;
@property (nonatomic, readonly) INIntent *intent;
@property (nonatomic, readonly) INSchema *schema;
@property (nonatomic, readonly, copy) NSSecurityScopedURLWrapper *schemaBundleURL;
@property (nonatomic, readonly) unsigned long long sizeClass;
@property (nonatomic, readonly) bool usesWidgetAccentColor;
@property (nonatomic, readonly) NSSecurityScopedURLWrapper *widgetBundleScopedURL;
@property (nonatomic, readonly, copy) NSString *widgetDescription;
@property (nonatomic, readonly, copy) NSString *widgetDisplayName;
@property (getter=isWidgetExtensionInformationLoaded, nonatomic, readonly) bool widgetExtensionInformationLoaded;
@property (nonatomic, readonly) UIColor *widgetPrimaryColor;
@property (nonatomic, readonly) UIColor *widgetTintColor;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)appBundleIdentifier;
- (id)bundleIdentifier;
- (void)dealloc;
- (struct CGSize { double x1; double x2; })defaultCardSize;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithIntent:(id)arg1 bundleIdentifier:(id)arg2 widgetBundleScopedURL:(id)arg3 schemaBundleURL:(id)arg4 sizeClass:(unsigned long long)arg5 defaultCardSize:(struct CGSize { double x1; double x2; })arg6 initialCardFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg7 widgetDisplayName:(id)arg8 widgetDescription:(id)arg9 usesWidgetAccentColor:(bool)arg10;
- (id)initWithIntent:(id)arg1 bundleIdentifier:(id)arg2 widgetBundleScopedURL:(id)arg3 schemaBundleURL:(id)arg4 sizeClass:(unsigned long long)arg5 defaultCardSize:(struct CGSize { double x1; double x2; })arg6 initialCardFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg7 widgetDisplayName:(id)arg8 widgetDescription:(id)arg9 widgetPrimaryColor:(id)arg10 widgetTintColor:(id)arg11 usesWidgetAccentColor:(bool)arg12;
- (id)initWithOptions:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })initialCardFrame;
- (id)intent;
- (bool)isWidgetExtensionInformationLoaded;
- (void)loadWidgetExtensionInformationWithCompletion:(id /* block */)arg1;
- (id)schema;
- (id)schemaBundleURL;
- (unsigned long long)sizeClass;
- (void)startAccessingSecurityScopedBundleResource;
- (bool)usesWidgetAccentColor;
- (id)widgetBundleScopedURL;
- (id)widgetDescription;
- (id)widgetDisplayName;
- (id)widgetPrimaryColor;
- (id)widgetTintColor;

@end
