/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
 */

@interface CHRecognizerConfiguration : NSObject {
    int  _autoCapitalizationMode;
    int  _autoCorrectionMode;
    int  _contentType;
    bool  _enableCachingIfAvailable;
    bool  _enableGen2CharacterLMIfAvailable;
    bool  _enableGen2ModelIfAvailable;
    unsigned long long  _language;
    NSLocale * _locale;
    int  _mode;
    unsigned long long  _script;
}

@property (nonatomic, readonly) int autoCapitalizationMode;
@property (nonatomic, readonly) int autoCorrectionMode;
@property (nonatomic, readonly) int contentType;
@property (nonatomic, readonly) int contentTypeForNoSpaceRecognition;
@property (nonatomic, readonly) bool enableCachingIfAvailable;
@property (nonatomic, readonly) bool enableGen2CharacterLMIfAvailable;
@property (nonatomic, readonly) bool enableGen2ModelIfAvailable;
@property (nonatomic, readonly, copy) NSLocale *locale;
@property (nonatomic, readonly) int mode;

+ (void)_decodeLocale:(id)arg1 supportedLanguage:(unsigned long long*)arg2 supportedScript:(unsigned long long*)arg3;
+ (id)_stringForRecognitionLanguage:(unsigned long long)arg1;
+ (id)_stringForRecognitionScript:(unsigned long long)arg1;
+ (id)defaultLocaleForRecognitionType:(int)arg1 withMode:(int)arg2;
+ (struct CGSize { double x1; double x2; })defaultMinimumDrawingSize;
+ (long long)drawingStrokeLimitForLocale:(id)arg1;
+ (id)effectiveTextInputRecognitionLocales:(id)arg1;
+ (id)forcedGen2ModelLocaleForLocale:(id)arg1;
+ (bool)isLanguageSupported:(unsigned long long)arg1 withMode:(int)arg2;
+ (bool)isLocaleSupported:(id)arg1 withMode:(int)arg2;
+ (id)modelNameChinese;
+ (id)modelNameEPFIGS;
+ (id)recognitionEngineCachingKeyForRecognitionLocale:(id)arg1;
+ (bool)shouldApplyLatinSpacingForLocale:(id)arg1;
+ (bool)shouldInsertSpaceBetweenPreviousChar:(id)arg1 andNextChar:(id)arg2 inLocale:(id)arg3;
+ (bool)shouldPerformStrictCandidateFiltering:(id)arg1;
+ (bool)shouldRemoveSpaceBetweenPreviousChar:(id)arg1 andNextChar:(id)arg2 inLocale:(id)arg3;
+ (bool)shouldSwapTopTwoResults:(id)arg1 locales:(id)arg2;
+ (id)spellCheckingLocaleForRecognitionLocale:(id)arg1 string:(id)arg2;
+ (id)stringForAutoCapitalizationMode:(int)arg1;
+ (id)stringForAutoCorrectionMode:(int)arg1;
+ (id)stringForRecognitionContentType:(int)arg1;
+ (id)stringForRecognitionMode:(int)arg1;
+ (unsigned long long)supportedLanguageForLocale:(id)arg1;
+ (unsigned long long)supportedScriptForLocale:(id)arg1;
+ (int)validateRecognitionMode:(int)arg1;

- (int)autoCapitalizationMode;
- (int)autoCorrectionMode;
- (double)characterLMLowerBoundLogProbability;
- (id)configurationKey;
- (int)contentType;
- (int)contentTypeForNoSpaceRecognition;
- (void)dealloc;
- (double)decodingCharacterLMWeight;
- (id /* block */)decodingCommitActionBlock;
- (double)decodingLexiconWeight;
- (double)decodingWordLMWeight;
- (id)description;
- (unsigned long long)effectiveEngineLanguage;
- (bool)enableCachingIfAvailable;
- (bool)enableGen2CharacterLMIfAvailable;
- (bool)enableGen2ModelIfAvailable;
- (long long)engineCandidateCount;
- (bool)hasSamePostProcessingAsConfiguration:(id)arg1;
- (bool)hasSameResourcesAsConfiguration:(id)arg1;
- (id)initWithMode:(int)arg1 locale:(id)arg2 contentType:(int)arg3 autoCapitalizationMode:(int)arg4 autoCorrectionMode:(int)arg5 enableCachingIfAvailable:(bool)arg6 enableGen2ModelIfAvailable:(bool)arg7 enableGen2CharacterLMIfAvailable:(bool)arg8;
- (bool)isEqualToRecognizerConfiguration:(id)arg1;
- (id)languageResourceBundleWithStaticLexicon:(struct _LXLexicon { }*)arg1 customLexicon:(struct _LXLexicon { }*)arg2 wordLanguageModel:(void*)arg3;
- (id)linguisticResourcesFallbackLocale;
- (id)locale;
- (long long)maxRecognitionResultDefaultCount;
- (int)mecabraInputMethodType;
- (int)mode;
- (void*)newCJKStaticLexicon;
- (id)newCTCRecognitionModel;
- (id)newCTCTextDecoderWithStaticLexicon:(struct _LXLexicon { }*)arg1 customLexicon:(struct _LXLexicon { }*)arg2 wordLanguageModel:(void*)arg3;
- (void*)newCharacterLanguageModelAndMap:(struct map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int>>> { struct __tree<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned int>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned int>, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true>> { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)arg1 force:(bool)arg2;
- (id)newCutpointModel;
- (struct CHNeuralNetwork { int (*x1)(); bool x2; struct CHCodeMap {} *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; id x9; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_10_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_10_1_2; } x10; }*)newFreeFormEngine;
- (struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode>> { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode>> { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long>> { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long>> { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)newGrammarFST;
- (void*)newLanguageModel;
- (id)newOVSCleanupPostProcessorWithRecognizer:(id)arg1;
- (struct _CFBurstTrie { }*)newOVSTrie;
- (id)newPatternFST;
- (const struct _LXLexicon { }*)newPhraseLexicon:(id*)arg1;
- (id)newPostProcessingFST;
- (id)newPostProcessorWithStaticLexicon:(struct _LXLexicon { }*)arg1 customLexicon:(struct _LXLexicon { }*)arg2 phraseLexicon:(struct _LXLexicon { }*)arg3 customPhraseLexicon:(struct _LXLexicon { }*)arg4 characterLM:(id)arg5 recognizer:(id)arg6 textReplacements:(id)arg7 postProcessingFST:(id)arg8 languageModel:(void*)arg9;
- (struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode>> { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode>> { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long>> { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *>>> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long>> { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)newRadicalClusterFST;
- (struct CHNeuralNetwork { int (*x1)(); bool x2; struct CHCodeMap {} *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; id x9; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_10_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_10_1_2; } x10; }*)newRecognitionEngine;
- (id)newSpellChecker;
- (const struct _LXLexicon { }*)newStaticLexicon:(id*)arg1;
- (id)newStrokeTransitionModel;
- (struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; }*)newTransliterationVariantMap;
- (long long)precedingSpaceDefaultBehavior;
- (unsigned int)requiredInappropriateFilteringFlags;
- (bool)shouldApplyCandidatesThresholding;
- (bool)shouldApplyCharacterLMRescoring;
- (bool)shouldApplyChinesePostProcessing;
- (bool)shouldApplyDiacriticSensitivity;
- (bool)shouldApplyLMRescoring;
- (bool)shouldApplyLMSorting;
- (bool)shouldApplyLexicalPenalty;
- (bool)shouldApplyRomanPostProcessing;
- (bool)shouldApplySemanticTokenization;
- (bool)shouldAutoCapitalize;
- (bool)shouldAutoCorrect;
- (bool)shouldComposeLexiconWithNetwork;
- (bool)shouldComputeStrokePenalties;
- (bool)shouldDetectChinesePunctuation;
- (bool)shouldDetectRomanPunctuation;
- (bool)shouldEnforceGrammarOnTransliterations;
- (bool)shouldExpandCodePoints;
- (bool)shouldExpandLexiconInNetwork;
- (bool)shouldExpandNonSpaceSeparators;
- (bool)shouldFallbackOnSingleCharacterExpansion;
- (bool)shouldForwardMecabraOTAAssetsUpdate;
- (bool)shouldGenerateDigitLetterAlternatives;
- (bool)shouldIdentifyChangeableColumns;
- (bool)shouldKeepDuplicateTokenIDs;
- (bool)shouldKeepOutOfPatternCandidates;
- (bool)shouldMarkMultiWordOVS;
- (bool)shouldMergeNoPrecedingWhiteSpaceColumns;
- (bool)shouldPenalizeLetterInsertion;
- (bool)shouldPenalizePrefixes;
- (bool)shouldPerformGlobalBestSearch;
- (bool)shouldPerformGlobalBestSearchWithSmallLattice;
- (bool)shouldPerformIntegratedLexiconExpansion;
- (bool)shouldPerformMultiWordsExpansion;
- (bool)shouldPerformNoSpaceRecognition;
- (bool)shouldPerformRegularSpaceRecognition;
- (bool)shouldPreserveLegacyTranscriptionPaths;
- (bool)shouldPromoteChineseCommonCharacters;
- (bool)shouldRefineCandidates;
- (bool)shouldRefineChineseCharacterCandidates;
- (bool)shouldRelaxFinalCandidatesThresholding;
- (bool)shouldReorderSCTCConfusion;
- (bool)shouldReplaceInvalidTokenIDs;
- (bool)shouldRunNextGenCharacterLM;
- (bool)shouldRunNextGenRecognizer;
- (bool)shouldTransformCharacterProbabilitiesIntoLogScores;
- (bool)shouldTransliterateAndSynthetizeCandidates;
- (bool)shouldTransliterateConfusableCharacters;
- (bool)shouldTransliterateFrenchLigatures;
- (bool)shouldTransliterateHalfWidthPunctuations;
- (bool)shouldTransliterateSentences;
- (bool)shouldTreatAllSmallStrokesAsPunctuation;
- (bool)shouldUseCaching;
- (bool)shouldUseTokenPrecedingSpaces;
- (unsigned long long)supportedSegmentationStrategy;

@end
