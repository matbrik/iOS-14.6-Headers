/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreRE.framework/CoreRE
 */

@interface RENetworkSourceAudioUnit : AUAudioUnit {
    bool  _cannedRecording;
    AVAudioPCMBuffer * _cannedRecordingBuffer;
    struct mutex { 
        struct _opaque_pthread_mutex_t { 
            long long __sig; 
            BOOL __opaque[56]; 
        } __m_; 
    }  _cannedRecordingMutex;
    struct shared_ptr<REPacketEncoder> { 
        struct REPacketEncoder {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _encoder;
    struct unique_ptr<caulk::concurrent::messenger, std::__1::default_delete<caulk::concurrent::messenger>> { 
        struct __compressed_pair<caulk::concurrent::messenger *, std::__1::default_delete<caulk::concurrent::messenger>> { 
            struct messenger {} *__value_; 
        } __ptr_; 
    }  _encoderMessenger;
    AVAudioPCMBuffer * _inputBuffer;
    AUAudioUnitBus * _inputBus;
    AUAudioUnitBusArray * _inputBusArray;
    struct unique_ptr<REJitterBuffer, std::__1::default_delete<REJitterBuffer>> { 
        struct __compressed_pair<REJitterBuffer *, std::__1::default_delete<REJitterBuffer>> { 
            struct REJitterBuffer {} *__value_; 
        } __ptr_; 
    }  _jitterBuffer;
    AUAudioUnitBus * _outputBus;
    AUAudioUnitBusArray * _outputBusArray;
    struct unique_ptr<REEncodePayloadPool, std::__1::default_delete<REEncodePayloadPool>> { 
        struct __compressed_pair<REEncodePayloadPool *, std::__1::default_delete<REEncodePayloadPool>> { 
            struct REEncodePayloadPool {} *__value_; 
        } __ptr_; 
    }  _payloadPool;
    id /* block */  _sendCompressedBytes;
    NSObject<OS_dispatch_queue> * _sendQueue;
    bool  _shortCircuit;
    long long  _targetLatency;
}

@property (nonatomic) bool cannedRecording;
@property (nonatomic, readonly) double currentPlaybackTime;
@property (nonatomic, readonly) unsigned long long decodedSampleCount;
@property (nonatomic, readonly) int droppedPacketRecoveryLimit;
@property (readonly) unsigned int jitterBufferSize;
@property (nonatomic, readonly) int samplesPerPacket;
@property (copy) id /* block */ sendCompressedBytes;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *sendQueue;
@property bool shortCircuit;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)allocateRenderResourcesAndReturnError:(id*)arg1;
- (bool)cannedRecording;
- (id)channelCapabilities;
- (void)configureJitterBufferForTargetLatency:(long long)arg1;
- (double)currentPlaybackTime;
- (void)deallocateRenderResources;
- (unsigned long long)decodedSampleCount;
- (int)droppedPacketRecoveryLimit;
- (id)initWithComponentDescription:(struct AudioComponentDescription { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; })arg1 options:(unsigned int)arg2 error:(id*)arg3;
- (id)inputBusses;
- (id /* block */)internalRenderBlock;
- (unsigned int)jitterBufferSize;
- (id)outputBusses;
- (void)receive:(const char *)arg1 size:(unsigned int)arg2 timestamp:(unsigned int)arg3;
- (void)receive:(id)arg1 timestamp:(unsigned int)arg2;
- (void)receiveCompressedBytes:(const char *)arg1 size:(unsigned int)arg2 timestamp:(double)arg3;
- (void)receiveCompressedBytes:(id)arg1 timestamp:(double)arg2;
- (int)samplesPerPacket;
- (id /* block */)sendCompressedBytes;
- (id)sendQueue;
- (void)setCannedRecording:(bool)arg1;
- (void)setSendCompressedBytes:(id /* block */)arg1;
- (void)setSendQueue:(id)arg1;
- (void)setShortCircuit:(bool)arg1;
- (bool)shortCircuit;

@end
