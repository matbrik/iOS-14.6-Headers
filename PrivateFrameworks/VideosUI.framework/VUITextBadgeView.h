/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VideosUI.framework/VideosUI
 */

@interface VUITextBadgeView : UIView {
    NSAttributedString * _attributedTitle;
    UIImage * _backgroundImage;
    UIImage * _backgroundImageForMaterialRendering;
    bool  _backgroundImageForMaterialRenderingHasChanged;
    VUITextBadgeLayout * _badgeLayout;
    <VUITextBadgeViewDelegate> * _delegate;
    NSTimer * _expiryUpdateTimer;
    struct CGSize { 
        double width; 
        double height; 
    }  _glyphSize;
    UIView * _imageView;
    NSOperation * _pendingOperation;
    VUIRentalExpirationLabel * _rentalExpirationLabel;
    double  _strokeSize;
    IKViewElement * _viewElement;
}

@property (nonatomic, copy) NSAttributedString *attributedTitle;
@property (nonatomic, retain) UIImage *backgroundImage;
@property (nonatomic, retain) UIImage *backgroundImageForMaterialRendering;
@property (nonatomic) bool backgroundImageForMaterialRenderingHasChanged;
@property (nonatomic, retain) VUITextBadgeLayout *badgeLayout;
@property (nonatomic) <VUITextBadgeViewDelegate> *delegate;
@property (nonatomic, retain) NSTimer *expiryUpdateTimer;
@property (nonatomic) struct CGSize { double x1; double x2; } glyphSize;
@property (nonatomic, retain) UIView *imageView;
@property (nonatomic, retain) NSOperation *pendingOperation;
@property (nonatomic, retain) VUIRentalExpirationLabel *rentalExpirationLabel;
@property (nonatomic) double strokeSize;
@property (nonatomic, retain) IKViewElement *viewElement;

+ (bool)_viewBackgroundImageNeedsUpdatingWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 currentBackgroundImage:(id)arg2;
+ (bool)badgeElementHasContent:(id)arg1;

- (void).cxx_destruct;
- (void)_cancelPendingOperation;
- (void)_imageLoaded;
- (void)_invalidateTimer;
- (void)_redrawTextBadgeWithDuration:(double)arg1;
- (void)_redrawView:(id)arg1 withDuration:(double)arg2;
- (bool)_textBadgeBackgroundImageNeedsUpdating;
- (struct CGSize { double x1; double x2; })_textSize;
- (void)_updateBackgroundImagesWithCompletedOperation:(id)arg1;
- (void)_updateBackgroundMaterialImagesWithBackgroundImageSize:(struct CGSize { double x1; double x2; })arg1 performSynchronously:(bool)arg2 overlayViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (id)attributedTitle;
- (id)backgroundImage;
- (id)backgroundImageForMaterialRendering;
- (bool)backgroundImageForMaterialRenderingHasChanged;
- (id)badgeLayout;
- (void)dealloc;
- (id)delegate;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)expiryUpdateTimer;
- (struct CGSize { double x1; double x2; })glyphSize;
- (id)imageView;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)pendingOperation;
- (id)rentalExpirationLabel;
- (void)rentalExpirationLabelNeedsRelayout:(id)arg1;
- (void)reset;
- (void)setAttributedTitle:(id)arg1;
- (void)setBackgroundImage:(id)arg1;
- (void)setBackgroundImageForMaterialRendering:(id)arg1;
- (void)setBackgroundImageForMaterialRendering:(id)arg1 imageSize:(struct CGSize { double x1; double x2; })arg2 overlayViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)setBackgroundImageForMaterialRenderingHasChanged:(bool)arg1;
- (void)setBadgeLayout:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setElement:(id)arg1 withBadgeLayout:(id)arg2;
- (void)setExpiryUpdateTimer:(id)arg1;
- (void)setGlyphSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setImageView:(id)arg1;
- (void)setPendingOperation:(id)arg1;
- (void)setRentalExpirationLabel:(id)arg1;
- (void)setStrokeSize:(double)arg1;
- (void)setViewElement:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (double)strokeSize;
- (id)viewElement;

@end
