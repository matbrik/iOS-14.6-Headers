/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
 */

@interface CHTokenizedTextResult : NSObject <NSCopying, NSMutableCopying, NSSecureCoding> {
    long long  _changeableCount;
    long long  _precedingLineBreaks;
    long long  _recognizerGenerationIdentifier;
    NSArray * _tokenColumns;
    NSString * _trailingSeparator;
    NSArray * _transcriptionPathScores;
    NSArray * _transcriptionPaths;
}

@property (nonatomic, readonly) long long changeableTokenColumnCount;
@property (nonatomic, readonly) NSString *recognizerDebugDescription;
@property (nonatomic, readonly) long long tokenColumnCount;
@property (nonatomic, readonly, copy) NSString *topTranscription;
@property (nonatomic, readonly, copy) NSString *trailingSeparator;
@property (nonatomic, readonly, copy) NSArray *transcriptionPathScores;
@property (nonatomic, readonly, copy) NSArray *transcriptionPaths;

+ (long long)_characterCountInToken:(id)arg1 filteringCharacterSet:(id)arg2 filteredCharacterCount:(long long*)arg3;
+ (struct pair<double, double> { double x1; double x2; })_scoreMeanAndStdForToken:(id)arg1 forLocale:(id)arg2;
+ (bool)areTokenRowsEquivalent:(id)arg1 otherRow:(id)arg2;
+ (id)extendedToken:(id)arg1 withStrokeIndexSet:(id)arg2 alignmentScore:(double)arg3;
+ (long long)mergeTokenRow:(id)arg1 intoUniqueRows:(id)arg2;
+ (bool)supportsSecureCoding;
+ (id)tokenizedTextResultFromResults:(id)arg1 shouldPerformStrictFiltering:(bool)arg2;
+ (id)tokenizedTextResultWithString:(id)arg1 strokeIndexes:(id)arg2 trailingSeparator:(id)arg3 recognizerGenerationIdentifier:(long long)arg4;

- (double)_averageTokenRecognitionScoreInTranscriptionPath:(id)arg1;
- (bool)_isGibberishToken:(id)arg1;
- (id)_legacyTextRecognitionResultForTranscriptionIndex:(long long)arg1;
- (double)_normalizedLanguageFitness:(double)arg1;
- (double)_rawLanguageFitnessForTranscriptionPath:(id)arg1 locale:(id)arg2 recognitionMode:(int)arg3;
- (long long)changeableTokenColumnCount;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (void)enumerateTokensInTranscriptionPath:(id)arg1 columnRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 tokenProcessingBlock:(id /* block */)arg3;
- (unsigned long long)hash;
- (id)init;
- (id)initWithBestPathTokens:(id)arg1 pathProbabilities:(id)arg2 trailingSeparator:(id)arg3 recognizerGenerationIdentifier:(long long)arg4;
- (id)initWithBestPathTokens:(id)arg1 pathProbabilities:(id)arg2 trailingSeparator:(id)arg3 recognizerGenerationIdentifier:(long long)arg4 changeableColumnCount:(long long)arg5;
- (id)initWithCoder:(id)arg1;
- (id)initWithTokenColumns:(id)arg1 transcriptionPaths:(id)arg2 scores:(id)arg3 recognizerGenerationIdentifier:(long long)arg4;
- (id)initWithTokenColumns:(id)arg1 transcriptionPaths:(id)arg2 scores:(id)arg3 trailingSeparator:(id)arg4 recognizerGenerationIdentifier:(long long)arg5;
- (id)initWithTokenColumns:(id)arg1 transcriptionPaths:(id)arg2 scores:(id)arg3 trailingSeparator:(id)arg4 recognizerGenerationIdentifier:(long long)arg5 changeableColumnCount:(long long)arg6;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToTokenizedTextResult:(id)arg1;
- (bool)isValid;
- (struct { double x1; double x2; })languageFitnessForLocale:(id)arg1 recognitionMode:(int)arg2;
- (id)legacyTextRecognitionResults;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (id)phraseCaseCorrectedResultWithHistory:(id)arg1 phraseLexicon:(struct _LXLexicon { }*)arg2 maxPhraseLength:(long long)arg3;
- (long long)precedingLineBreaks;
- (id)precedingSeparatorForToken:(id)arg1;
- (id)precedingSeparatorForTopTranscriptionPath;
- (id)recognizerDebugDescription;
- (long long)recognizerGenerationIdentifier;
- (bool)shouldFilterOutStringForToken:(id)arg1 isGibberish:(bool*)arg2;
- (id)strokeIndexesForColumnsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)tokenAtLocation:(struct { long long x1; long long x2; long long x3; })arg1;
- (long long)tokenColumnCount;
- (id)tokenColumns;
- (id)tokenRowsAtColumnIndex:(long long)arg1;
- (id)tokenizedResultWithFilteredPaths:(double)arg1;
- (id)tokensFromTopTranscriptionWithCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)tokensInTranscriptionPath:(id)arg1 atColumnIndex:(long long)arg2;
- (id)topTranscription;
- (id)trailingSeparator;
- (id)transcriptionPathScores;
- (id)transcriptionPaths;
- (id)transcriptionWithPath:(id)arg1 columnRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 filterLowConfidence:(bool)arg3;
- (id)transcriptionWithPath:(id)arg1 columnRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 filterLowConfidence:(bool)arg3 excludeGibberish:(bool)arg4 rejectionRate:(double*)arg5 tokenProcessingBlock:(id /* block */)arg6;

@end
