/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MetalTools.framework/MetalTools
 */

@interface MTLGPUDebugRenderCommandEncoder : MTLToolsRenderCommandEncoder <MTLGPUDebugCommandEncoder> {
    MTLToolsDepthStencilState * _currentDepthStencil;
    MTLGPUDebugRenderPipelineState * _currentPipeline;
    struct GPUDebugEventUUIDPacket { 
        unsigned long long pipelineStateID; 
        unsigned int encoderID; 
        unsigned int eventID; 
    }  _drawID;
    unsigned long long  _encoderType;
    struct MTLGPUDebugBufferArgumentData { 
        bool needsFlush; 
        bool argumentBufferBacking; 
        bool useLengths; 
        <MTLBuffer> *buffers[31]; 
        unsigned long long offsets[31]; 
        unsigned int lengths[31]; 
        unsigned long long gpu_address[31][2]; 
    }  _fragmentBuffers;
    struct MTLGPUDebugStageBufferHandles { 
        unsigned long long handles[31]; 
        MTLGPUDebugBuffer *buffers[31]; 
        unsigned long long offsets[31]; 
        bool needsFlush; 
    }  _fragmentHandles;
    struct GPUBufferSubAlloc { 
        <MTLBuffer> *buffer; 
        unsigned long long offset; 
    }  _fragmentReportBuffer;
    bool  _fragmentStageActive;
    struct Options { unsigned int x1; int x2; int x3; int x4; int x5; struct { unsigned int x_6_1_1 : 1; unsigned int x_6_1_2 : 1; unsigned int x_6_1_3 : 1; unsigned int x_6_1_4 : 1; unsigned int x_6_1_5 : 1; unsigned int x_6_1_6 : 1; unsigned int x_6_1_7 : 1; unsigned int x_6_1_8 : 1; unsigned int x_6_1_9 : 1; unsigned int x_6_1_10 : 1; unsigned int x_6_1_11 : 1; unsigned int x_6_1_12 : 1; unsigned int x_6_1_13 : 1; unsigned int x_6_1_14 : 1; unsigned int x_6_1_15 : 1; unsigned int x_6_1_16 : 1; unsigned int x_6_1_17 : 1; unsigned int x_6_1_18 : 1; unsigned int x_6_1_19 : 1; unsigned int x_6_1_20 : 1; unsigned int x_6_1_21 : 1; unsigned int x_6_1_22 : 1; unsigned int x_6_1_23 : 1; unsigned int x_6_1_24 : 1; unsigned int x_6_1_25 : 1; unsigned int x_6_1_26 : 1; unsigned int x_6_1_27 : 1; unsigned int x_6_1_28 : 1; unsigned int x_6_1_29 : 1; } x6; } * _options;
    struct MTLGPUDebugTileThreadgroup { 
        struct GPUDebugThreadgroupTableEntry { 
            unsigned int offset; 
            unsigned int length; 
        } entries[32]; 
        bool needsFlush; 
    }  _threadgroup;
    struct MTLGPUDebugBufferArgumentData { 
        bool needsFlush; 
        bool argumentBufferBacking; 
        bool useLengths; 
        <MTLBuffer> *buffers[31]; 
        unsigned long long offsets[31]; 
        unsigned int lengths[31]; 
        unsigned long long gpu_address[31][2]; 
    }  _tileBuffers;
    struct MTLGPUDebugStageBufferHandles { 
        unsigned long long handles[31]; 
        MTLGPUDebugBuffer *buffers[31]; 
        unsigned long long offsets[31]; 
        bool needsFlush; 
    }  _tileHandles;
    struct GPUBufferSubAlloc { 
        <MTLBuffer> *buffer; 
        unsigned long long offset; 
    }  _tileReportBuffer;
    bool  _tileStageActive;
    bool  _tileStageUsed;
    struct { 
        unsigned char count; 
        bool mappingsValid; 
        struct { 
            unsigned int viewportArrayIndexOffset; 
            unsigned int renderTargetArrayIndexOffset; 
        } mappings[2]; 
    }  _vertexAmpState;
    struct MTLGPUDebugBufferArgumentData { 
        bool needsFlush; 
        bool argumentBufferBacking; 
        bool useLengths; 
        <MTLBuffer> *buffers[31]; 
        unsigned long long offsets[31]; 
        unsigned int lengths[31]; 
        unsigned long long gpu_address[31][2]; 
    }  _vertexBuffers;
    struct MTLGPUDebugStageBufferHandles { 
        unsigned long long handles[31]; 
        MTLGPUDebugBuffer *buffers[31]; 
        unsigned long long offsets[31]; 
        bool needsFlush; 
    }  _vertexHandles;
    struct GPUBufferSubAlloc { 
        <MTLBuffer> *buffer; 
        unsigned long long offset; 
    }  _vertexReportBuffer;
    unsigned int  useResourceIteration;
}

@property (readonly) MTLGPUDebugCommandBuffer *commandBuffer;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned int encoderID;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

- (id).cxx_construct;
- (void)_initBufferArgumentData:(id)arg1;
- (void)dispatchThreadsPerTile:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })arg1;
- (void)drawIndexedPatches:(unsigned long long)arg1 patchIndexBuffer:(id)arg2 patchIndexBufferOffset:(unsigned long long)arg3 controlPointIndexBuffer:(id)arg4 controlPointIndexBufferOffset:(unsigned long long)arg5 indirectBuffer:(id)arg6 indirectBufferOffset:(unsigned long long)arg7;
- (void)drawIndexedPatches:(unsigned long long)arg1 patchStart:(unsigned long long)arg2 patchCount:(unsigned long long)arg3 patchIndexBuffer:(id)arg4 patchIndexBufferOffset:(unsigned long long)arg5 controlPointIndexBuffer:(id)arg6 controlPointIndexBufferOffset:(unsigned long long)arg7 instanceCount:(unsigned long long)arg8 baseInstance:(unsigned long long)arg9;
- (void)drawIndexedPrimitives:(unsigned long long)arg1 indexCount:(unsigned long long)arg2 indexType:(unsigned long long)arg3 indexBuffer:(id)arg4 indexBufferOffset:(unsigned long long)arg5;
- (void)drawIndexedPrimitives:(unsigned long long)arg1 indexCount:(unsigned long long)arg2 indexType:(unsigned long long)arg3 indexBuffer:(id)arg4 indexBufferOffset:(unsigned long long)arg5 instanceCount:(unsigned long long)arg6;
- (void)drawIndexedPrimitives:(unsigned long long)arg1 indexCount:(unsigned long long)arg2 indexType:(unsigned long long)arg3 indexBuffer:(id)arg4 indexBufferOffset:(unsigned long long)arg5 instanceCount:(unsigned long long)arg6 baseVertex:(long long)arg7 baseInstance:(unsigned long long)arg8;
- (void)drawIndexedPrimitives:(unsigned long long)arg1 indexType:(unsigned long long)arg2 indexBuffer:(id)arg3 indexBufferOffset:(unsigned long long)arg4 indirectBuffer:(id)arg5 indirectBufferOffset:(unsigned long long)arg6;
- (void)drawPatches:(unsigned long long)arg1 patchIndexBuffer:(id)arg2 patchIndexBufferOffset:(unsigned long long)arg3 indirectBuffer:(id)arg4 indirectBufferOffset:(unsigned long long)arg5;
- (void)drawPatches:(unsigned long long)arg1 patchStart:(unsigned long long)arg2 patchCount:(unsigned long long)arg3 patchIndexBuffer:(id)arg4 patchIndexBufferOffset:(unsigned long long)arg5 instanceCount:(unsigned long long)arg6 baseInstance:(unsigned long long)arg7;
- (void)drawPrimitives:(unsigned long long)arg1 indirectBuffer:(id)arg2 indirectBufferOffset:(unsigned long long)arg3;
- (void)drawPrimitives:(unsigned long long)arg1 vertexStart:(unsigned long long)arg2 vertexCount:(unsigned long long)arg3;
- (void)drawPrimitives:(unsigned long long)arg1 vertexStart:(unsigned long long)arg2 vertexCount:(unsigned long long)arg3 instanceCount:(unsigned long long)arg4;
- (void)drawPrimitives:(unsigned long long)arg1 vertexStart:(unsigned long long)arg2 vertexCount:(unsigned long long)arg3 instanceCount:(unsigned long long)arg4 baseInstance:(unsigned long long)arg5;
- (unsigned int)encoderID;
- (void)endEncoding;
- (void)executeCommandsInBuffer:(id)arg1 indirectBuffer:(id)arg2 indirectBufferOffset:(unsigned long long)arg3;
- (void)executeCommandsInBuffer:(id)arg1 withRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)flushBindings;
- (id)initWithRenderCommandEncoder:(id)arg1 commandBuffer:(id)arg2 descriptor:(id)arg3 encoderID:(unsigned int)arg4;
- (id)initWithRenderCommandEncoder:(id)arg1 parallelEncoder:(id)arg2 descriptor:(id)arg3 encoderID:(unsigned int)arg4;
- (void)setDepthStencilState:(id)arg1;
- (void)setFragmentBuffer:(id)arg1 offset:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;
- (void)setFragmentBufferOffset:(unsigned long long)arg1 atIndex:(unsigned long long)arg2;
- (void)setFragmentBuffers:(const id*)arg1 offsets:(const unsigned long long*)arg2 withRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (void)setFragmentBytes:(const void*)arg1 length:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;
- (void)setFragmentReportBuffer:(id)arg1 offset:(unsigned long long)arg2;
- (void)setRenderPipelineState:(id)arg1;
- (void)setRenderPipelineStateBuffers:(id)arg1;
- (void)setTessellationControlPointIndexBuffer:(id)arg1 offset:(unsigned long long)arg2;
- (void)setThreadgroupMemoryLength:(unsigned long long)arg1 offset:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;
- (void)setTileBuffer:(id)arg1 offset:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;
- (void)setTileBufferOffset:(unsigned long long)arg1 atIndex:(unsigned long long)arg2;
- (void)setTileBuffers:(const id*)arg1 offsets:(const unsigned long long*)arg2 withRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (void)setTileBytes:(const void*)arg1 length:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;
- (void)setTileReportBuffer:(id)arg1 offset:(unsigned long long)arg2;
- (void)setVertexAmplificationCount:(unsigned long long)arg1 viewMappings:(const struct { unsigned int x1; unsigned int x2; }*)arg2;
- (void)setVertexBuffer:(id)arg1 offset:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;
- (void)setVertexBufferOffset:(unsigned long long)arg1 atIndex:(unsigned long long)arg2;
- (void)setVertexBuffers:(const id*)arg1 offsets:(const unsigned long long*)arg2 withRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (void)setVertexBytes:(const void*)arg1 length:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;
- (void)setVertexReportBuffer:(id)arg1 offset:(unsigned long long)arg2;
- (void)useResource:(id)arg1 usage:(unsigned long long)arg2;
- (void)useResource:(id)arg1 usage:(unsigned long long)arg2 stages:(unsigned long long)arg3;
- (void)useResources:(const id*)arg1 count:(unsigned long long)arg2 usage:(unsigned long long)arg3;
- (void)useResources:(const id*)arg1 count:(unsigned long long)arg2 usage:(unsigned long long)arg3 stages:(unsigned long long)arg4;

@end
