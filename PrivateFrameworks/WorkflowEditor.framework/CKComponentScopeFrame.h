/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/WorkflowEditor.framework/WorkflowEditor
 */

@interface CKComponentScopeFrame : NSObject {
    struct unordered_map<_CKStateScopeKey, CKComponentScopeFrame *, std::__1::hash<_CKStateScopeKey>, std::__1::equal_to<_CKStateScopeKey>, std::__1::allocator<std::__1::pair<const _CKStateScopeKey, CKComponentScopeFrame *>>> { 
        struct __hash_table<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true>, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>>> { 
            struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> *>>> { 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> *>>> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> {} **__value_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>>> { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> {} *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _children;
    CKComponentScopeHandle * _handle;
}

@property (nonatomic, readonly) CKComponentScopeHandle *handle;

+ (struct CKComponentScopeFramePair { id x1; id x2; })childPairForPair:(const struct CKComponentScopeFramePair { id x1; id x2; }*)arg1 newRoot:(id)arg2 componentClass:(Class)arg3 identifier:(id)arg4 initialStateCreator:(id /* block */)arg5 stateUpdates:(const struct unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>={__hash_table<std::__1::__hash_value_type<int, id (^)(id)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id (^)(id)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id (^)(id)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, id (^)(id)>>>={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *> *> *>>>={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *> *> *>>>=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *> *> {}*)arg6;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)handle;
- (id)initWithHandle:(id)arg1;

@end
