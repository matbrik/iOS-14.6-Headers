/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface _UIDatePickerCalendarTimeWheel : UIControl <UICollectionViewDelegate> {
    UICollectionView * _collectionView;
    UICollectionViewDiffableDataSource * _dataSource;
    _UIDatePickerCalendarTimeWheelDisplayModeDriver * _displayModeDriver;
    long long  _expectedRawValue;
    UIFont * _font;
    NSNumberFormatter * _formatter;
    long long  _interval;
    long long  _selectedValue;
    _UIDatePickerCalendarTimeSoundDriver * _soundDriver;
}

@property (nonatomic, readonly) UICollectionView *collectionView;
@property (nonatomic, readonly) UICollectionViewDiffableDataSource *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) unsigned long long displayMode;
@property (nonatomic, readonly) _UIDatePickerCalendarTimeWheelDisplayModeDriver *displayModeDriver;
@property (nonatomic, retain) UIFont *font;
@property (nonatomic, readonly) NSNumberFormatter *formatter;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) long long interval;
@property (nonatomic) long long selectedValue;
@property (nonatomic, readonly) _UIDatePickerCalendarTimeSoundDriver *soundDriver;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (struct CGPoint { double x1; double x2; })_contentOffsetForProposedContentOffset:(struct CGPoint { double x1; double x2; })arg1 velocity:(struct CGPoint { double x1; double x2; })arg2 inScrollView:(id)arg3;
- (void)_createDataSource;
- (void)_createHierarchy;
- (id)_createLayout;
- (id)_itemAtCenter;
- (id)_itemForContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)_performWithoutChangingSelection:(id /* block */)arg1;
- (void)_setSelectedRawValue:(long long)arg1 notify:(bool)arg2;
- (void)_updateCellForDisplayMode:(id)arg1;
- (bool)_updateContentOffset:(id)arg1;
- (void)_updateDataSource;
- (void)_updatePaging;
- (void)_updateSelectedValue:(long long)arg1 fromExtern:(bool)arg2;
- (void)_updateSelection;
- (id)collectionView;
- (void)collectionView:(id)arg1 willDisplayCell:(id)arg2 forItemAtIndexPath:(id)arg3;
- (id)dataSource;
- (unsigned long long)displayMode;
- (id)displayModeDriver;
- (id)font;
- (id)formatter;
- (id)initWithInterval:(long long)arg1 formatter:(id)arg2;
- (long long)interval;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidEndScrollingAnimation:(id)arg1;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewWillEndDragging:(id)arg1 withVelocity:(struct CGPoint { double x1; double x2; })arg2 targetContentOffset:(inout struct CGPoint { double x1; double x2; }*)arg3;
- (long long)selectedValue;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDisplayMode:(unsigned long long)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setFont:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSelectedValue:(long long)arg1;
- (id)soundDriver;

@end
