/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Transparency.framework/Transparency
 */

@interface KTContext : NSObject {
    NSString * _applicationID;
    KTApplicationPublicKeyStore * _applicationKeyStore;
    TransparencyManagedDataStore * _dataStore;
    KTLogClient * _logClient;
    TransparencyTranscript * _transcript;
    KTContextVerifier * _verifier;
}

@property (retain) NSString *applicationID;
@property (retain) KTApplicationPublicKeyStore *applicationKeyStore;
@property (retain) TransparencyManagedDataStore *dataStore;
@property (retain) KTLogClient *logClient;
@property (retain) TransparencyTranscript *transcript;
@property (retain) KTContextVerifier *verifier;

+ (id)failedServerLoggableDatas:(id)arg1;
+ (bool)hasAccountMismatch:(id)arg1;
+ (id)validateEventName:(unsigned long long)arg1 application:(id)arg2;

- (void).cxx_destruct;
- (id)analyticsForRequestValidation:(id)arg1 initialResult:(unsigned long long)arg2 result:(unsigned long long)arg3 failure:(id)arg4 transparentData:(id)arg5;
- (id)applicationID;
- (id)applicationKeyStore;
- (bool)checkDeferActivity:(id)arg1;
- (void)checkInclusionProofEpoch:(id)arg1;
- (void)clearState:(id /* block */)arg1;
- (id)copyState;
- (id)createChainOfErrorsFromRequestFailures:(id)arg1;
- (id)createChainOfErrorsFromSTHFailures:(id)arg1 type:(unsigned long long)arg2;
- (id)createErrorFromRequestFailure:(id)arg1 underlyingError:(id)arg2;
- (id)createErrorFromSTHFailure:(id)arg1 underlyingError:(id)arg2;
- (id)dataStore;
- (void)downloadConsistencyProof:(id*)arg1 retry:(bool)arg2;
- (void)downloadInclusionProofsForRevisions:(id)arg1 downloadType:(unsigned long long)arg2 retry:(bool)arg3 error:(id*)arg4;
- (void)downloadQueryForKTRequest:(id)arg1 retry:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)downloadSMHInclusionProofs:(id*)arg1 retry:(bool)arg2;
- (void)downloadSMTQueryResponse:(id)arg1 retry:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)downloadSTHInclusionProofs:(id*)arg1 retry:(bool)arg2;
- (unsigned long long)downloadTypeForValidateType:(unsigned long long)arg1;
- (bool)failExpiredRequest:(id)arg1 error:(id)arg2;
- (void)failExpiredSTHs:(id*)arg1;
- (void)failHeadDownload:(id)arg1 failure:(id)arg2 retry:(bool)arg3;
- (void)failHeadDownloadRecord:(id)arg1 failure:(id)arg2 retry:(bool)arg3 error:(id*)arg4;
- (void)failRequestDownload:(id)arg1 failure:(id)arg2 retry:(bool)arg3;
- (void)failRequestDownloadRecord:(id)arg1 failure:(id)arg2 retry:(bool)arg3;
- (void)failSMTDownload:(id)arg1 failure:(id)arg2 retry:(bool)arg3;
- (void)failSMTDownloadRecord:(id)arg1 failure:(id)arg2 retry:(bool)arg3 error:(id*)arg4;
- (void)failSMTRequest:(id)arg1 failure:(id)arg2 retry:(bool)arg3 error:(id*)arg4;
- (void)fetchQueryForKTRequest:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)garbageCollectHeads:(id*)arg1;
- (void)handleDownloadOfType:(unsigned long long)arg1 error:(id*)arg2;
- (void)handleDownloadOfType:(unsigned long long)arg1 retry:(bool)arg2 error:(id*)arg3;
- (void)handleGarbageCollection:(id)arg1 error:(id*)arg2;
- (void)handleHeadsWithUnverifiedSignature:(id*)arg1;
- (void)handleKTRequest:(id)arg1 queryRequest:(id)arg2 queryResponse:(id)arg3 error:(id*)arg4;
- (void)handleKTRequestDownload:(id)arg1;
- (void)handleKTRequestDownload:(id)arg1 retry:(bool)arg2;
- (void)handlePendingConsistencyProofs:(id*)arg1;
- (void)handlePendingHeadInclusionProofs:(id*)arg1;
- (void)handlePendingQueryRequests:(id)arg1 error:(id*)arg2;
- (void)handleSMTInclusionDownload:(id)arg1 request:(id)arg2;
- (void)handleSMTInclusionDownload:(id)arg1 request:(id)arg2 retry:(bool)arg3;
- (void)handleSMTsWithUnverifiedSignature:(id*)arg1;
- (void)handleURIsWithPendingSMTs:(id)arg1 error:(id*)arg2;
- (unsigned long long)handleVerifyInsertResponse:(id)arg1 request:(id)arg2 transparentData:(id*)arg3 error:(id*)arg4;
- (unsigned long long)handleVerifyPeerResponse:(id)arg1 queryRequest:(id)arg2 request:(id)arg3 transparentData:(id*)arg4 error:(id*)arg5;
- (unsigned long long)handleVerifySelfResponse:(id)arg1 queryRequest:(id)arg2 request:(id)arg3 transparentData:(id*)arg4 error:(id*)arg5;
- (bool)hasTooManyVRFRequests:(id)arg1;
- (id)initWithApplicationKeyStore:(id)arg1 dataStore:(id)arg2 logClient:(id)arg3 applicationID:(id)arg4;
- (id)logClient;
- (void)logFinishFailureEvent:(id)arg1 error:(id)arg2;
- (void)logFinishSuccessEvent:(id)arg1;
- (void)logStartEvent:(id)arg1;
- (id)parseQueryRequestFromKTRequest:(id)arg1 error:(id*)arg2;
- (id)queryRequestForKTRequest:(id)arg1 error:(id*)arg2;
- (bool)ready:(id*)arg1;
- (bool)runDutyCycleForActivity:(id)arg1;
- (void)saveRequestFailure:(id)arg1 failure:(id)arg2;
- (void)setApplicationID:(id)arg1;
- (void)setApplicationKeyStore:(id)arg1;
- (void)setDataStore:(id)arg1;
- (void)setLogClient:(id)arg1;
- (void)setTranscript:(id)arg1;
- (void)setVerifier:(id)arg1;
- (id)transcript;
- (unsigned long long)validateEnrollment:(id)arg1 queryRequest:(id)arg2 queryResponse:(id)arg3 transparentData:(id*)arg4 error:(id*)arg5;
- (unsigned long long)validateEnrollment:(id)arg1 transparentData:(id*)arg2 error:(id*)arg3;
- (unsigned long long)validateEnrollmentWithAnalytics:(id)arg1 transparentData:(id*)arg2 error:(id*)arg3;
- (unsigned long long)validatePeer:(id)arg1 queryRequest:(id)arg2 queryResponse:(id)arg3 transparentData:(id*)arg4 error:(id*)arg5;
- (unsigned long long)validatePeer:(id)arg1 transparentData:(id*)arg2 error:(id*)arg3;
- (unsigned long long)validatePeerWithAnalytics:(id)arg1 transparentData:(id*)arg2 error:(id*)arg3;
- (unsigned long long)validateSelf:(id)arg1 queryRequest:(id)arg2 queryResponse:(id)arg3 transparentData:(id*)arg4 error:(id*)arg5;
- (unsigned long long)validateSelf:(id)arg1 transparentData:(id*)arg2 error:(id*)arg3;
- (unsigned long long)validateSelfWithAnalytics:(id)arg1 transparentData:(id*)arg2 error:(id*)arg3;
- (id)verifier;
- (unsigned long long)verifyConsistencyProofDownload:(id)arg1 error:(id*)arg2;
- (unsigned long long)verifyConsistencyProofDownloadRecord:(id)arg1 error:(id*)arg2;
- (bool)verifyInclusionProofDownload:(id)arg1 error:(id*)arg2;
- (bool)verifyInclusionProofDownloadRecord:(id)arg1 error:(id*)arg2;
- (bool)verifyRequestDownload:(id)arg1 error:(id*)arg2;
- (void)verifyRequestDownloadRecord:(id)arg1 error:(id*)arg2;
- (bool)verifySMTDownload:(id)arg1 error:(id*)arg2;
- (void)verifySMTDownloadRecord:(id)arg1 error:(id*)arg2;
- (void)verifySMTQueryResponse:(id)arg1 request:(id)arg2 error:(id*)arg3;
- (unsigned long long)writeResult:(unsigned long long)arg1 request:(id)arg2 proof:(id)arg3 error:(id*)arg4;

@end
