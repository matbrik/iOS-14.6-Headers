/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface _UIPageIndicatorStore : NSObject {
    struct CGSize { 
        double width; 
        double height; 
    }  _cachedSize;
    <_UIPageIndicatorStoreDelegate> * _delegate;
    double  _fittingWidth;
    double  _indicatorSpacing;
    UIImage * _preferredImage;
    NSMutableArray * _store;
    struct { 
        unsigned int layout : 1; 
    }  _update;
}

@property (nonatomic) <_UIPageIndicatorStoreDelegate> *delegate;
@property (nonatomic, readonly) UIImage *indicatorImage;
@property (nonatomic) double indicatorSpacing;
@property (nonatomic, retain) UIImage *preferredImage;
@property (nonatomic, retain) NSMutableArray *store;

- (void).cxx_destruct;
- (void)_insertImage:(id)arg1 forPage:(long long)arg2;
- (long long)_objectIndexForPage:(long long)arg1 lower:(long long)arg2 upper:(long long)arg3;
- (void)_removeImageForPage:(long long)arg1;
- (void)_resetStore;
- (struct CGSize { double x1; double x2; })contentSizeForNumberOfPages:(long long)arg1;
- (id)customIndicatorImageForPage:(long long)arg1;
- (id)delegate;
- (double)indicatorContentWidthForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)indicatorImage;
- (id)indicatorImageForPage:(long long)arg1;
- (double)indicatorPositionForContinuousPage:(double)arg1;
- (struct CGSize { double x1; double x2; })indicatorSize;
- (struct CGSize { double x1; double x2; })indicatorSizeForPage:(long long)arg1;
- (double)indicatorSpacing;
- (id)init;
- (void)invalidateLayoutCache;
- (long long)lastPage;
- (long long)numberOfVisibleIndicatorsForStartIndex:(long long)arg1 fittingWidth:(double)arg2;
- (long long)objectIndexForPage:(long long)arg1;
- (id)preferredImage;
- (void)setDelegate:(id)arg1;
- (void)setIndicatorSpacing:(double)arg1;
- (void)setPreferredImage:(id)arg1;
- (void)setStore:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeForMaximumContentSizeFittingWidth:(double)arg1;
- (id)store;
- (void)updateImage:(id)arg1 forPage:(long long)arg2;
- (void)updateStoreForNumberOfPages:(long long)arg1;
- (void)validateDataStore;

@end
