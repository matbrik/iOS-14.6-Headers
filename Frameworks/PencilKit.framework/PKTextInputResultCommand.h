/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/PencilKit.framework/PencilKit
 */

@interface PKTextInputResultCommand : NSObject {
    bool  __applyIntermediateChange;
    PKTextInputTargetState * __inProgressInputTargetState;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _affectedRange;
    long long  _commandState;
    NSString * _commitReason;
    NSString * _committedText;
    long long  _committedTokenColumnCount;
    <PKTextInputResultCommandDelegate> * _delegate;
    bool  _destinationFrameForAnimationMightMove;
    PKTextInputTargetState * _finalInputTargetState;
    PKTextInputHandwritingShot * _handwritingShot;
    bool  _hasPendingUncommittedChanges;
    long long  _immediateCommitType;
    PKTextInputTargetState * _initialInputTargetState;
    CHTextInputQueryItem * _queryItem;
    bool  _resultedInTargetChange;
    PKTextInputElementContent * _targetElementContent;
}

@property (nonatomic) bool _applyIntermediateChange;
@property (nonatomic, retain) PKTextInputTargetState *_inProgressInputTargetState;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } affectedRange;
@property (setter=_setCommandState:, nonatomic) long long commandState;
@property (nonatomic, copy) NSString *commitReason;
@property (nonatomic, copy) NSString *committedText;
@property (nonatomic) long long committedTokenColumnCount;
@property (nonatomic) <PKTextInputResultCommandDelegate> *delegate;
@property (nonatomic) bool destinationFrameForAnimationMightMove;
@property (nonatomic, copy) PKTextInputTargetState *finalInputTargetState;
@property (nonatomic, readonly) PKTextInputHandwritingShot *handwritingShot;
@property (nonatomic) bool hasPendingUncommittedChanges;
@property (nonatomic, readonly) long long immediateCommitType;
@property (nonatomic, copy) PKTextInputTargetState *initialInputTargetState;
@property (nonatomic, readonly) CHTextInputQueryItem *queryItem;
@property (nonatomic) bool resultedInTargetChange;
@property (nonatomic, readonly) PKTextInputElementContent *targetElementContent;

+ (id)_alternativesForTranscriptionAtColumn:(long long)arg1 textResult:(id)arg2 columnTopTranscription:(id)arg3;
+ (long long)_commitableTokenColumnCountForQueryItem:(id)arg1 previousQueryItem:(id)arg2 immediateCommitType:(long long)arg3 applyIntermediateChange:(bool)arg4 preferredUncommittedTokenColumnCount:(long long)arg5 commitReason:(id*)arg6;
+ (void)_getTextsToCommit:(id*)arg1 alternativesTable:(id*)arg2 uncommittedPendingText:(id*)arg3 fromCorrectionResult:(id)arg4 commitTokenColumnCount:(long long)arg5 forTargetElementContent:(id)arg6 replacementRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg7;
+ (bool)_isAccidentalReplacementForQueryItem:(id)arg1 replacementRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 handwritingShot:(id)arg3;
+ (id)_tokenColumnStringsForTopTranscriptionInTextResult:(id)arg1;
+ (id)_transcriptionForTokensAtColumn:(long long)arg1 row:(long long)arg2 textResult:(id)arg3;

- (void).cxx_destruct;
- (id)_activePreviewTextForUncommittedText:(id)arg1 replacementRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (bool)_applyIntermediateChange;
- (void)_applyResultCommandPhase2;
- (void)_applyResultCommandPhase3WithCompletion:(id /* block */)arg1;
- (void)_applySelectOrDeleteGestureOfType:(long long)arg1 completion:(id /* block */)arg2;
- (void)_applyTextReplacementWithCompletion:(id /* block */)arg1;
- (long long)_characterLevelOperationLocationForCorrection:(id)arg1 committedTextLength:(long long)arg2 uncommittedPendingText:(id)arg3;
- (void)_clearPreviousActivePreviewIfNeededForCancellation:(bool)arg1;
- (void)_finishApplyingResultWithSuccess:(bool)arg1 cancelled:(bool)arg2;
- (id)_inProgressInputTargetState;
- (void)_logResultWithNewInputTargetState:(id)arg1 cancelCommit:(bool)arg2;
- (void)_removeCommittedTextInsertionStrokes:(id)arg1 committedTextLength:(long long)arg2 completion:(id /* block */)arg3;
- (void)_removeStrokesForSliceIDs:(id)arg1 destinationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_scheduleBecomeReadyAfterDelay:(double)arg1;
- (void)_setCommandState:(long long)arg1;
- (void)_showSystemCalloutIfNeededWithReferenceRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_strokeSliceIDsToRemoveForCommittedTokenColumnCount:(long long)arg1 forceRemoveAll:(bool)arg2;
- (void)_updateInputTargetStateWithUncommittedPendingText:(id)arg1 activePreviewText:(id)arg2 committedTextLength:(long long)arg3 accumulatedCommitLength:(long long)arg4;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })affectedRange;
- (void)beginApplyingResultCommandWithInputTargetState:(id)arg1;
- (void)cancelDelayedCommand;
- (long long)commandState;
- (id)commitReason;
- (id)committedText;
- (long long)committedTokenColumnCount;
- (id)delegate;
- (id)description;
- (bool)destinationFrameForAnimationMightMove;
- (id)finalInputTargetState;
- (id)handwritingShot;
- (bool)hasPendingUncommittedChanges;
- (long long)immediateCommitType;
- (id)initWithQueryItem:(id)arg1 handwritingShot:(id)arg2 immediateCommitType:(long long)arg3 applyAfterDelay:(double)arg4;
- (id)initialInputTargetState;
- (bool)isImmediateCommit;
- (id)queryItem;
- (bool)resultedInTargetChange;
- (void)setAffectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setCommitReason:(id)arg1;
- (void)setCommittedText:(id)arg1;
- (void)setCommittedTokenColumnCount:(long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDestinationFrameForAnimationMightMove:(bool)arg1;
- (void)setFinalInputTargetState:(id)arg1;
- (void)setHasPendingUncommittedChanges:(bool)arg1;
- (void)setInitialInputTargetState:(id)arg1;
- (void)setResultedInTargetChange:(bool)arg1;
- (void)set_applyIntermediateChange:(bool)arg1;
- (void)set_inProgressInputTargetState:(id)arg1;
- (id)targetElementContent;

@end
