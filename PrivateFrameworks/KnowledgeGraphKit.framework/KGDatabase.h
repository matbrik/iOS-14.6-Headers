/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/KnowledgeGraphKit.framework/KnowledgeGraphKit
 */

@interface KGDatabase : NSObject {
    NSMutableDictionary * _attrIdByPropertyName;
    struct Database { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; struct sqlite3 {} *x2; struct LabelTable { int (**x_3_1_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_6_1; unsigned long long x_1_6_2; unsigned long long x_1_6_3; } x_1_5_1; struct __short { BOOL x_2_6_1[23]; struct { unsigned char x_2_7_1; } x_2_6_2; } x_1_5_2; struct __raw { unsigned long long x_3_6_1[3]; } x_1_5_3; } x_1_4_1; } x_1_3_1; } x_2_2_1; } x_3_1_2; struct sqlite3 {} *x_3_1_3; struct shared_ptr<degas::Statement> { struct Statement {} *x_4_2_1; struct __shared_weak_count {} *x_4_2_2; } x_3_1_4; struct shared_ptr<degas::Statement> { struct Statement {} *x_5_2_1; struct __shared_weak_count {} *x_5_2_2; } x_3_1_5; struct shared_ptr<degas::Statement> { struct Statement {} *x_6_2_1; struct __shared_weak_count {} *x_6_2_2; } x_3_1_6; struct shared_ptr<degas::Statement> { struct Statement {} *x_7_2_1; struct __shared_weak_count {} *x_7_2_2; } x_3_1_7; } x3; } * _database;
    NSMutableDictionary * _labelIdByName;
    NSMutableDictionary * _labelNameById;
    NSMutableDictionary * _propertyNameByAttrId;
    NSURL * _url;
}

@property (nonatomic, readonly) NSUUID *graphIdentifier;
@property (nonatomic) unsigned long long graphVersion;
@property (nonatomic, readonly) NSURL *url;

+ (bool)copyFromURL:(id)arg1 toURL:(id)arg2 error:(id*)arg3;
+ (void)deleteClosedDatabaseFilesAtStoreURL:(id)arg1;
+ (bool)destroyAtURL:(id)arg1 error:(id*)arg2;
+ (void)initialize;
+ (bool)migrateFromURL:(id)arg1 toURL:(id)arg2 error:(id*)arg3;

- (void).cxx_destruct;
- (void)_enumerateEdgeTableWithEdgeCursor:(struct EdgeCursor { struct shared_ptr<degas::Statement> { struct Statement {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; }*)arg1 block:(id /* block */)arg2;
- (void)_enumerateEdgesWithEdgeCursor:(struct EdgeCursor { struct shared_ptr<degas::Statement> { struct Statement {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; }*)arg1 propertiesCursor:(struct AttributeValueCursor { struct shared_ptr<degas::Statement> { struct Statement {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; }*)arg2 block:(id /* block */)arg3;
- (void)_enumerateNodeTableWithNodeCursor:(struct NodeCursor { struct shared_ptr<degas::Statement> { struct Statement {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; }*)arg1 block:(id /* block */)arg2;
- (void)_enumerateNodesWithNodeCursor:(struct NodeCursor { struct shared_ptr<degas::Statement> { struct Statement {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; }*)arg1 propertiesCursor:(struct AttributeValueCursor { struct shared_ptr<degas::Statement> { struct Statement {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; }*)arg2 block:(id /* block */)arg3;
- (void)_enumeratePropertiesForCursor:(struct AttributeValueCursor { struct shared_ptr<degas::Statement> { struct Statement {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; }*)arg1 block:(id /* block */)arg2;
- (id)_namesOfLabelsWithIdentifiers:(struct Bitmap { unsigned long long x1; unsigned long long x2; struct vector<degas::BitsetPtr, std::__1::allocator<degas::BitsetPtr>> { struct BitsetPtr {} *x_3_1_1; struct BitsetPtr {} *x_3_1_2; struct __compressed_pair<degas::BitsetPtr *, std::__1::allocator<degas::BitsetPtr>> { struct BitsetPtr {} *x_3_2_1; } x_3_1_3; } x3; bool x4; }*)arg1;
- (unsigned long long)addEdgeWithIdentifier:(unsigned long long)arg1 labels:(id)arg2 weight:(float)arg3 properties:(id)arg4 sourceNodeIdentifier:(unsigned long long)arg5 targetNodeIdentifier:(unsigned long long)arg6 error:(id*)arg7;
- (void)addLabelName:(id)arg1 forLabelId:(id)arg2;
- (unsigned long long)addNodeWithIdentifier:(unsigned long long)arg1 labels:(id)arg2 weight:(float)arg3 properties:(id)arg4 error:(id*)arg5;
- (id)allNodeIdentifiersOfEdgesWithIdentifiers:(id)arg1 error:(id*)arg2;
- (bool)appendNodeIdentifiersOfEdgesWithIdentifiers:(id)arg1 sourceNodeIdentifiers:(id)arg2 targetNodeIdentifiers:(id)arg3 error:(id*)arg4;
- (unsigned long long)attributeIdentifierForPropertyName:(id)arg1 sampleValue:(id)arg2;
- (bool)beginTransaction;
- (void)close;
- (bool)commitTransaction;
- (bool)copyToURL:(id)arg1 error:(id*)arg2;
- (struct Database { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; struct sqlite3 {} *x2; struct LabelTable { int (**x_3_1_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> { struct __rep { union { struct __long { char *x_1_6_1; unsigned long long x_1_6_2; unsigned long long x_1_6_3; } x_1_5_1; struct __short { BOOL x_2_6_1[23]; struct { unsigned char x_2_7_1; } x_2_6_2; } x_1_5_2; struct __raw { unsigned long long x_3_6_1[3]; } x_1_5_3; } x_1_4_1; } x_1_3_1; } x_2_2_1; } x_3_1_2; struct sqlite3 {} *x_3_1_3; struct shared_ptr<degas::Statement> { struct Statement {} *x_4_2_1; struct __shared_weak_count {} *x_4_2_2; } x_3_1_4; struct shared_ptr<degas::Statement> { struct Statement {} *x_5_2_1; struct __shared_weak_count {} *x_5_2_2; } x_3_1_5; struct shared_ptr<degas::Statement> { struct Statement {} *x_6_2_1; struct __shared_weak_count {} *x_6_2_2; } x_3_1_6; struct shared_ptr<degas::Statement> { struct Statement {} *x_7_2_1; struct __shared_weak_count {} *x_7_2_2; } x_3_1_7; } x3; }*)database;
- (int)degasEdgeDirectionFromKG:(unsigned long long)arg1;
- (void)distributeValuesByType:(id)arg1 toIntegerValues:(id)arg2 floatValues:(id)arg3 stringValues:(id)arg4;
- (struct AttributeValueCursor { struct shared_ptr<degas::Statement> { struct Statement {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; })edgeAttributeValueCursorWithIdentifiers:(id)arg1;
- (struct EdgeCursor { struct shared_ptr<degas::Statement> { struct Statement {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; })edgeCursorWithIdentifiers:(id)arg1;
- (id)edgeIdentifiersForLabels:(id)arg1 error:(id*)arg2;
- (id)edgeIdentifiersForNodeIdentifier:(unsigned long long)arg1 error:(id*)arg2;
- (id)edgeIdentifiersForPropertyName:(id)arg1 value:(id)arg2 error:(id*)arg3;
- (id)edgeIdentifiersForPropertyName:(id)arg1 values:(id)arg2 error:(id*)arg3;
- (id)edgeIdentifiersWithLabels:(id)arg1 direction:(unsigned long long)arg2 forNodeIdentifier:(unsigned long long)arg3 error:(id*)arg4;
- (id)edgeLabels;
- (void)enumerateEdgesWithIdentifiers:(id)arg1 block:(id /* block */)arg2;
- (void)enumerateNodesWithIdentifiers:(id)arg1 block:(id /* block */)arg2;
- (id)filterEdgeIdentifiersForPropertyName:(id)arg1 value:(id)arg2 edgeIdentifiers:(id)arg3 error:(id*)arg4;
- (id)filterNodeIdentifiersForPropertyName:(id)arg1 value:(id)arg2 nodeIdentifiers:(id)arg3 error:(id*)arg4;
- (id)graphIdentifier;
- (unsigned long long)graphVersion;
- (id)inEdgeIdentifiersOfNodesWithIdentifiers:(id)arg1 error:(id*)arg2;
- (id)initWithURL:(id)arg1;
- (unsigned long long)labelIdentifierForLabelName:(id)arg1 insertIfNotFound:(bool)arg2;
- (bool)labelIdentifiers:(struct Bitmap { unsigned long long x1; unsigned long long x2; struct vector<degas::BitsetPtr, std::__1::allocator<degas::BitsetPtr>> { struct BitsetPtr {} *x_3_1_1; struct BitsetPtr {} *x_3_1_2; struct __compressed_pair<degas::BitsetPtr *, std::__1::allocator<degas::BitsetPtr>> { struct BitsetPtr {} *x_3_2_1; } x_3_1_3; } x3; bool x4; }*)arg1 fromLabelNames:(id)arg2 insertIfNotFound:(bool)arg3;
- (id)labelNameForLabelIdentifier:(unsigned long long)arg1;
- (void)loadLabels;
- (void)loadPropertyNames;
- (struct AttributeValueCursor { struct shared_ptr<degas::Statement> { struct Statement {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; })nodeAttributeValueCursorWithIdentifiers:(id)arg1;
- (struct NodeCursor { struct shared_ptr<degas::Statement> { struct Statement {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; })nodeCursorWithIdentifiers:(id)arg1;
- (id)nodeIdentifiersForLabels:(id)arg1 error:(id*)arg2;
- (id)nodeIdentifiersForPropertyName:(id)arg1 value:(id)arg2 error:(id*)arg3;
- (id)nodeIdentifiersForPropertyName:(id)arg1 values:(id)arg2 error:(id*)arg3;
- (id)nodeLabels;
- (bool)openWithMode:(unsigned long long)arg1 error:(id*)arg2;
- (id)outEdgeIdentifiersOfNodesWithIdentifiers:(id)arg1 error:(id*)arg2;
- (id)propertyNameForAttrIdentifier:(unsigned long long)arg1;
- (id)propertyValueForCursor:(struct AttributeValueCursor { struct shared_ptr<degas::Statement> { struct Statement {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; }*)arg1;
- (void)purgeCachedEdgeStatements;
- (void)purgeCachedNodeStatements;
- (bool)removeEdge:(unsigned long long)arg1 error:(id*)arg2;
- (bool)removeEdges:(id)arg1 error:(id*)arg2;
- (bool)removeNode:(unsigned long long)arg1 error:(id*)arg2;
- (bool)removeNodes:(id)arg1 error:(id*)arg2;
- (bool)rollbackTransaction;
- (bool)setEdgeProperties:(id)arg1 forIdentifier:(unsigned long long)arg2 error:(id*)arg3;
- (bool)setEdgeWeight:(float)arg1 forIdentifier:(unsigned long long)arg2 error:(id*)arg3;
- (void)setGraphVersion:(unsigned long long)arg1;
- (bool)setNodeProperties:(id)arg1 forIdentifier:(unsigned long long)arg2 error:(id*)arg3;
- (bool)setNodeWeight:(float)arg1 forIdentifier:(unsigned long long)arg2 error:(id*)arg3;
- (void)setPropertyName:(id)arg1 forAttrIdentifier:(id)arg2;
- (id)url;

@end
