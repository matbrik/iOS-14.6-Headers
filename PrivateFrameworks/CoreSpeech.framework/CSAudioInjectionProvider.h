/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreSpeech.framework/CoreSpeech
 */

@interface CSAudioInjectionProvider : CSAudioRecorder <CSAudioInjectionEngineDelegate> {
    NSMutableDictionary * _audioInjectionEngines;
    CSAudioInjectionEngine * _builtInAudioInjectionEngine;
    CSAudioInjectionDevice * _builtInDevice;
    CSAudioInjectionDevice * _bundleTvRemote;
    NSMutableArray * _connectedDevices;
    float  _didStartDelayInSeconds;
    unsigned long long  _latestPluginStreamId;
    NSHashTable * _observers;
    NSObject<OS_dispatch_queue> * _queue;
    NSUUID * _uuid;
}

@property (nonatomic, retain) NSMutableDictionary *audioInjectionEngines;
@property (nonatomic, retain) CSAudioInjectionEngine *builtInAudioInjectionEngine;
@property (nonatomic, retain) CSAudioInjectionDevice *builtInDevice;
@property (nonatomic, retain) CSAudioInjectionDevice *bundleTvRemote;
@property (nonatomic, retain) NSMutableArray *connectedDevices;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) float didStartDelayInSeconds;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned long long latestPluginStreamId;
@property (nonatomic, retain) NSHashTable *observers;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSUUID *uuid;

+ (void)createSharedAudioSession;
+ (id)defaultInjectionProvider;

- (void).cxx_destruct;
- (void)_connectPluginDevice:(id)arg1;
- (void)_createSpeechDetectionVADIfNeeded;
- (void)_tearDownSpeechDetectionVADIfNeeded;
- (bool)activateAudioSessionWithReason:(unsigned long long)arg1 streamHandleId:(unsigned long long)arg2 error:(id*)arg3;
- (unsigned long long)alertStartTime;
- (id)audioDeviceInfoWithStreamHandleId:(unsigned long long)arg1;
- (void)audioEngineAudioChunkForTvAvailable:(id)arg1 audioChunk:(id)arg2;
- (void)audioEngineBufferAvailable:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 buffer:(id)arg3 remoteVAD:(id)arg4 atTime:(unsigned long long)arg5;
- (void)audioEngineDidStartRecord:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 successfully:(bool)arg3 error:(id)arg4;
- (void)audioEngineDidStopRecord:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 reason:(unsigned long long)arg3;
- (id)audioInjectionEngines;
- (float)averagePowerForChannel:(unsigned long long)arg1;
- (id)builtInAudioInjectionEngine;
- (id)builtInDevice;
- (id)bundleTvRemote;
- (void)configureAlertBehavior:(id)arg1 audioStreamHandleId:(unsigned long long)arg2;
- (void)connectDevice:(id)arg1;
- (id)connectedDevices;
- (bool)deactivateAudioSession:(unsigned long long)arg1 streamHandleId:(unsigned long long)arg2 error:(id*)arg3;
- (void)dealloc;
- (float)didStartDelayInSeconds;
- (void)disconnectDevice:(id)arg1;
- (bool)duckOthersOption;
- (void)enableMiniDucking:(bool)arg1;
- (id)init;
- (bool)isNarrowBandWithStreamHandleId:(unsigned long long)arg1;
- (bool)isRecordingWithStreamHandleId:(unsigned long long)arg1;
- (bool)isSessionCurrentlyActivated;
- (unsigned long long)latestPluginStreamId;
- (id)metrics;
- (id)observers;
- (float)peakPowerForChannel:(unsigned long long)arg1;
- (bool)playAlertSoundForType:(long long)arg1;
- (bool)playRecordStartingAlertAndResetEndpointerFromStream:(unsigned long long)arg1;
- (id)playbackRoute;
- (bool)prepareAudioStreamRecord:(id)arg1 streamHandleId:(unsigned long long)arg2 error:(id*)arg3;
- (bool)prewarmAudioSessionWithStreamHandleId:(unsigned long long)arg1 error:(id*)arg2;
- (id)primaryInputDevice;
- (id)queue;
- (id)recordDeviceInfoWithStreamHandleId:(unsigned long long)arg1;
- (id)recordRouteWithStreamHandleId:(unsigned long long)arg1;
- (id)recordSettingsWithStreamHandleId:(unsigned long long)arg1;
- (float)recordingSampleRateWithStreamHandleId:(unsigned long long)arg1;
- (void)registerObserver:(id)arg1;
- (bool)setAlertSoundFromURL:(id)arg1 forType:(long long)arg2;
- (void)setAudioInjectionEngines:(id)arg1;
- (void)setAudioServerCrashEventDelegate:(id)arg1;
- (void)setAudioSessionEventDelegate:(id)arg1;
- (void)setBuiltInAudioInjectionEngine:(id)arg1;
- (void)setBuiltInDevice:(id)arg1;
- (void)setBundleTvRemote:(id)arg1;
- (void)setConnectedDevices:(id)arg1;
- (unsigned long long)setContext:(id)arg1 error:(id*)arg2;
- (bool)setCurrentContext:(id)arg1 streamHandleId:(unsigned long long)arg2 error:(id*)arg3;
- (void)setDidStartDelayInSeconds:(float)arg1;
- (void)setDuckOthersOption:(bool)arg1;
- (void)setLatestPluginStreamId:(unsigned long long)arg1;
- (void)setMeteringEnabled:(bool)arg1;
- (void)setObservers:(id)arg1;
- (void)setQueue:(id)arg1;
- (bool)setRecordMode:(long long)arg1 streamHandleId:(unsigned long long)arg2 error:(id*)arg3;
- (void)setUuid:(id)arg1;
- (void)start;
- (bool)startAudioStreamWithOption:(id)arg1 streamHandleId:(unsigned long long)arg2 error:(id*)arg3;
- (void)stop;
- (bool)stopAudioStreamWithStreamHandleId:(unsigned long long)arg1 error:(id*)arg2;
- (void)unregisterObserver:(id)arg1;
- (void)updateMeters;
- (id)uuid;
- (id)voiceTriggerInfo;
- (void)willDestroy;

@end
