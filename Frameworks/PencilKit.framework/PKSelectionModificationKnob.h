/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/PencilKit.framework/PencilKit
 */

@interface PKSelectionModificationKnob : CALayer {
    bool  _isBrushSelecting;
    bool  _isRTL;
    struct CGColor { } * _knobColor;
    CALayer * _knobLayer;
    long long  _knobLocation;
    CALayer * _knobTailLayer;
}

@property (nonatomic) struct CGColor { }*knobColor;
@property (nonatomic) long long knobLocation;

- (void).cxx_destruct;
- (bool)_isTailFacingDown;
- (double)_knobTailWidth;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_rectForKnob;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_rectForTail;
- (void)_updateKnobAppearance;
- (id)accessibilityIdentifier;
- (bool)containsPoint:(struct CGPoint { double x1; double x2; })arg1 inputType:(long long)arg2;
- (void)dealloc;
- (void)didBeginBrushSelection;
- (void)didEndBrushSelection;
- (double)distanceFromKnobCenterToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)initWithLocation:(long long)arg1 color:(struct CGColor { }*)arg2 isRTL:(bool)arg3;
- (bool)isAccessibilityElement;
- (struct CGColor { }*)knobColor;
- (long long)knobLocation;
- (void)layoutSublayers;
- (void)setKnobColor:(struct CGColor { }*)arg1;
- (void)setKnobLocation:(long long)arg1;

@end
