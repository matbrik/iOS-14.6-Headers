/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Memories.framework/Memories
 */

@interface MiroAutoEditKenBurnsController : NSObject {
    NSArray * _allPersonsAndPetsDetectedFaces;
    bool  _disableCroppingWithoutPet;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _endRect;
    NSArray * _featuredPersonsDetectedFaces;
    NSDictionary * _featuredPersonsInMemoryAsFaceRanges;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _finishAreaOfInterest;
    bool  _hasAreasOfInterest;
    bool  _interestingRegionsEstablished;
    KenBurnsClip * _kbClip;
    bool  _kbReassignment;
    unsigned long long  _kbStyle;
    double  _maximumZoomValue;
    unsigned long long  _memoryCategory;
    NSDictionary * _memoryFeaturesPersonInAsset;
    unsigned long long  _memorySubcategory;
    unsigned long long  _panStyle;
    Project * _project;
    double  _projectAspect;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _startRect;
    double  _targetAspect;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _titleSafeInterestingRegions;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _unionOfAllFaceRegions;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _unionOfAllInterestingRegions;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _unionOfAllSaliencyRegions;
}

@property (nonatomic, retain) NSArray *allPersonsAndPetsDetectedFaces;
@property (nonatomic) bool disableCroppingWithoutPet;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } endRect;
@property (nonatomic, retain) NSArray *featuredPersonsDetectedFaces;
@property (nonatomic, retain) NSDictionary *featuredPersonsInMemoryAsFaceRanges;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } finishAreaOfInterest;
@property (nonatomic) bool hasAreasOfInterest;
@property (nonatomic, readonly) double horizonNormalizedFromTop;
@property (nonatomic) bool interestingRegionsEstablished;
@property (nonatomic, retain) KenBurnsClip *kbClip;
@property (nonatomic) bool kbReassignment;
@property (nonatomic) unsigned long long kbStyle;
@property (nonatomic) double maximumZoomValue;
@property (nonatomic) unsigned long long memoryCategory;
@property (nonatomic, retain) NSDictionary *memoryFeaturesPersonInAsset;
@property (nonatomic) unsigned long long memorySubcategory;
@property (nonatomic) unsigned long long panStyle;
@property (nonatomic, retain) Project *project;
@property (nonatomic) double projectAspect;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } startRect;
@property (nonatomic) double targetAspect;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } titleSafeInterestingRegions;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } unionOfAllFaceRegions;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } unionOfAllInterestingRegions;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } unionOfAllSaliencyRegions;

+ (void)prepareKBClip:(id)arg1 project:(id)arg2;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForAsset:(id)arg1 targetAspect:(double)arg2 style:(unsigned long long)arg3;
+ (bool)shouldHeroSubjectForCategory:(unsigned long long)arg1 subcategory:(unsigned long long)arg2;
+ (bool)shouldTryToFitAllFaces:(unsigned long long)arg1 subcategory:(unsigned long long)arg2;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })titleRectForAsset:(id)arg1 targetAspect:(double)arg2 memoryTypeDisablesCropping:(bool)arg3 memoryCategory:(unsigned long long)arg4 memorySubcategory:(unsigned long long)arg5 memoryFeaturesPersonInAsset:(id)arg6 featuredPersonsInMemoryAsFaceRanges:(id)arg7;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unionOfAllInterestingRegionsRectForAsset:(id)arg1;

- (void).cxx_destruct;
- (void)_adjustZoomSpeedOfKenBurnsClip;
- (void)_customizePanOnlyKenBurnsClip;
- (void)_customizePortraitKB:(id)arg1 normalizedVerticalCenter:(double)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_panFrameForStart:(bool)arg1;
- (double)_scaleToPanOffsetFromScale:(double)arg1;
- (id)allPersonsAndPetsDetectedFaces;
- (void)applyKenBurnsForClip:(id)arg1 kenBurnsStyle:(unsigned long long)arg2 panStyle:(unsigned long long)arg3 kenBurnsPace:(unsigned long long)arg4 maxiumumZoomValue:(double)arg5;
- (bool)assetHasFeaturedPeople;
- (bool)assetIsFalsePositiveCandidateMADPets;
- (void)assignStartAndEndRect;
- (bool)backgroundTreatmentRequiredForStartEndRect;
- (bool)canCropRectSafelyFillFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)canSupportKB;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })centerAroundAllFacesIncluded:(id)arg1 framingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 minFaceAreaIntersectingAmount:(double)arg3;
- (double)clampZoomDifference:(double)arg1 kenBurnsPace:(unsigned long long)arg2;
- (bool)clipEligibleForNUpFraming:(id)arg1;
- (bool)clipRequiresOneUp:(id)arg1;
- (bool)disableCroppingWithoutPet;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })endRect;
- (void)establishInterestingRegions;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })extendAllTheThings:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })extendAllTheThings:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 alignment:(long long)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })extendAsMuchAsPossibleWithoutIncludingOtherFaces:(id)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)featuredPersonsDetectedFaces;
- (id)featuredPersonsInMemoryAsFaceRanges;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })finishAreaOfInterest;
- (void)finishConfiguringKBInfo;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })forceFeaturedPersonZoomCrop;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })forceTitleZoomCrop;
- (bool)hasAreasOfInterest;
- (double)horizonNormalizedFromTop;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })interestingRegionsAdjusted;
- (bool)interestingRegionsEstablished;
- (bool)isAttemptingToFrameAllFacesAcceptable:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 minFaceAreaIntersectingAmount:(double)arg2;
- (bool)isAttemptingToFrameAllFeaturedFacesAcceptable:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 minFaceAreaIntersectingAmount:(double)arg2;
- (bool)isPartialFaceFramingAcceptable:(id)arg1 unionOfAllFaceRegionsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 minFaceAreaIntersectingAmount:(double)arg3;
- (bool)isTitle;
- (id)kbClip;
- (bool)kbReassignment;
- (unsigned long long)kbStyle;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })maxRectICanExtendTo:(id)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (double)maximumZoomValue;
- (unsigned long long)memoryCategory;
- (id)memoryFeaturesPersonInAsset;
- (unsigned long long)memorySubcategory;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })noInformationCrop;
- (unsigned long long)panStyle;
- (void)prepareInterestingRegions;
- (void)prepareInterestingRegionsUsingMLFraming;
- (id)project;
- (double)projectAspect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectInCorrectAspectRatioInsideRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 rectToInclude:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 targetAspectRatio:(float)arg3;
- (double)rectIntersectionAmount:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 rect2:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })roundValuesInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setAllPersonsAndPetsDetectedFaces:(id)arg1;
- (void)setDisableCroppingWithoutPet:(bool)arg1;
- (void)setEndRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFeaturedPersonsDetectedFaces:(id)arg1;
- (void)setFeaturedPersonsInMemoryAsFaceRanges:(id)arg1;
- (void)setFinishAreaOfInterest:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHasAreasOfInterest:(bool)arg1;
- (void)setInterestingRegionsEstablished:(bool)arg1;
- (void)setKbClip:(id)arg1;
- (void)setKbReassignment:(bool)arg1;
- (void)setKbStyle:(unsigned long long)arg1;
- (void)setMaximumZoomValue:(double)arg1;
- (void)setMemoryCategory:(unsigned long long)arg1;
- (void)setMemoryFeaturesPersonInAsset:(id)arg1;
- (void)setMemorySubcategory:(unsigned long long)arg1;
- (void)setPanStyle:(unsigned long long)arg1;
- (void)setProject:(id)arg1;
- (void)setProjectAspect:(double)arg1;
- (void)setStartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setTargetAspect:(double)arg1;
- (void)setTitleSafeInterestingRegions:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setUnionOfAllFaceRegions:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setUnionOfAllInterestingRegions:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setUnionOfAllSaliencyRegions:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)shouldFeatureSpecificPerson;
- (bool)shouldFeatureSpecificPersonForClip:(id)arg1;
- (bool)shouldTryToFitAllFaces;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })startRect;
- (double)targetAspect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })titleSafeInterestingRegions;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unionOfAllFaceRegions;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unionOfAllInterestingRegions;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unionOfAllSaliencyRegions;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })zoomToPeopleInterestingRegion:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

@end
